TITLE: Create Gen AI Client for Gemini API (Python)
DESCRIPTION: Creates a client instance for the Gemini Developer API. Requires a valid API key.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_2

LANGUAGE: python
CODE:
```
client = genai.Client(api_key='GEMINI_API_KEY')
```

----------------------------------------

TITLE: Create Gemini Developer API Client
DESCRIPTION: Initializes a client for the Gemini Developer API using an API key. Ensure you have obtained a valid API key from the Google AI Studio.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from google import genai

# Only run this block for Gemini Developer API
client = genai.Client(api_key='GEMINI_API_KEY')
```

----------------------------------------

TITLE: genai.client.Client Class
DESCRIPTION: API documentation for the Client class, the main interface for interacting with the Generative AI API.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_84

LANGUAGE: APIDOC
CODE:
```
genai.client.Client (class)
  - The primary client for synchronous API requests.
```

----------------------------------------

TITLE: LiveMusicConnectParameters API
DESCRIPTION: API documentation for LiveMusicConnectParameters, detailing the model parameter for establishing a live music connection.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_203

LANGUAGE: APIDOC
CODE:
```
LiveMusicConnectParameters:
  model: The generative model to use for connecting to live music services.
```

----------------------------------------

TITLE: Create Gemini Developer API Client
DESCRIPTION: Initializes a client for the Gemini Developer API by providing your API key. This client is used to interact with Google's Gemini models directly.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_2

LANGUAGE: python
CODE:
```
from google import genai

# Only run this block for Gemini Developer API
client = genai.Client(api_key='GEMINI_API_KEY')
```

----------------------------------------

TITLE: LiveMusicClientSetup API
DESCRIPTION: API reference for the LiveMusicClientSetup type, specifying the model used for live music client setup.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_201

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientSetup:
  model: The generative model to use for live music.
```

----------------------------------------

TITLE: Google GenAI Tunings API
DESCRIPTION: Offers functionality for fine-tuning generative AI models. Includes methods to get tuning job status, list tuning jobs, and initiate new tuning processes.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_10

LANGUAGE: APIDOC
CODE:
```
Tunings API:
  - get(tuning_id: str, **kwargs) -> Tuning
    Retrieves details of a specific tuning job.
    Parameters:
      tuning_id: The unique identifier for the tuning job.
    Returns: A Tuning object.

  - list(**kwargs) -> List[Tuning]
    Lists all available tuning jobs.
    Returns: A list of Tuning objects.

  - tune(model_name: str, training_data: Union[str, list[str]], **kwargs) -> Tuning
    Initiates a new model tuning job.
    Parameters:
      model_name: The name of the base model to tune.
      training_data: The dataset for training.
    Returns: A Tuning object representing the new job.

AsyncTunings API (asynchronous counterparts to Tunings API methods):
  - get()
  - list()
  - tune()
```

----------------------------------------

TITLE: Google GenAI Client API Reference (APIDOC)
DESCRIPTION: Comprehensive API reference for the google-genai Python client, covering asynchronous and synchronous client methods, batch operations, cache management, file operations, model generation, and error handling classes. This section details available methods and their parameters.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_71

LANGUAGE: APIDOC
CODE:
```
Google GenAI Client API Reference:

Module: genai.client

Class: AsyncClient
  Methods:
    auth_tokens: Access authentication tokens.
    batches: Access batch operations.
    caches: Access cache operations.
    chats: Access chat operations.
    files: Access file operations.
    live: Access live operations.
    models: Access model operations.
    operations: Access operations.
    tunings: Access tuning operations.

Class: Client
  Properties:
    api_key: The API key for authentication.
    vertexai: Configuration for Vertex AI.
    credentials: The credentials for authentication.
    project: The Google Cloud project ID.
    location: The Google Cloud location.
    debug_config: Configuration for debugging.
    http_options: HTTP client options.
    aio: Access to the asynchronous client interface.
  Methods:
    auth_tokens: Access authentication tokens.
    batches: Access batch operations.
    caches: Access cache operations.
    chats: Access chat operations.
    files: Access file operations.
    models: Access model operations.
    operations: Access operations.
    tunings: Access tuning operations.
    vertexai: Configuration for Vertex AI.

Class: DebugConfig
  Properties:
    client_mode: The client mode for debugging.
    replay_id: The replay ID for debugging.
    replays_directory: The directory for storing replays.

Module: genai.batches

Class: AsyncBatches
  Methods:
    cancel(name: str): Cancels a batch job.
    create(model_name: str, ...): Creates a new batch job.
    delete(name: str): Deletes a batch job.
    get(name: str): Retrieves a specific batch job.
    list(config: ListBatchJobsConfig, ...): Lists batch jobs with optional configuration.

Class: Batches
  Methods:
    cancel(name: str): Cancels a batch job.
    create(model_name: str, ...): Creates a new batch job.
    delete(name: str): Deletes a batch job.
    get(name: str): Retrieves a specific batch job.
    list(config: ListBatchJobsConfig, ...): Lists batch jobs with optional configuration.

Module: genai.caches

Class: AsyncCaches
  Methods:
    create(name: str, ...): Creates a cache.
    delete(name: str): Deletes a cache.
    get(name: str): Retrieves a cache.
    list(config: ListCachesConfig, ...): Lists caches.

```

----------------------------------------

TITLE: Tune Models with Vertex AI or Gemini Developer API
DESCRIPTION: Shows how to initiate a model tuning job. It supports Vertex AI by using Google Cloud Storage URIs for training data and the Gemini Developer API by using inline examples.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_55

LANGUAGE: Python
CODE:
```
from google.genai import types

if client.vertexai:
    model = 'gemini-2.0-flash-001'
    training_dataset = types.TuningDataset(
        gcs_uri='gs://cloud-samples-data/ai-platform/generative_ai/gemini-1_5/text/sft_train_data.jsonl',
    )
else:
    model = 'models/gemini-2.0-flash-001'
    training_dataset = types.TuningDataset(
        examples=[
            types.TuningExample(
                text_input=f'Input text {i}',
                output=f'Output text {i}',
            )
            for i in range(5)
        ],
    )

tuning_job = client.tunings.tune(
    base_model=model,
    training_dataset=training_dataset,
    config=types.CreateTuningJobConfig(
        epoch_count=1, tuned_model_display_name='test_dataset_examples model'
    ),
)
print(tuning_job)
```

----------------------------------------

TITLE: LiveMusicGenerationConfig API
DESCRIPTION: API documentation for LiveMusicGenerationConfig, detailing parameters for controlling music generation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_207

LANGUAGE: APIDOC
CODE:
```
LiveMusicGenerationConfig:
  bpm: Beats per minute for the generated music.
  brightness: Controls the brightness or intensity of the music.
  density: Affects the density or complexity of the musical elements.
  guidance: Guidance scale for the music generation process.
  mute_bass: Boolean flag to mute the bass track.
  mute_drums: Boolean flag to mute the drums track.
  only_bass_and_drums: Boolean flag to generate only bass and drums.
  scale: Musical scale to use for generation.
  seed: Seed for random number generation to ensure reproducibility.
  temperature: Controls the randomness of the generated music.
  top_k: Top-K sampling parameter for controlling token selection.
```

----------------------------------------

TITLE: GenAI External API and Retrieval Attributes
DESCRIPTION: Documentation for attributes related to external API calls and retrieval mechanisms, including search parameters and HTTP options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_143

LANGUAGE: APIDOC
CODE:
```
genai.types.Retrieval.external_api
  Description: Configuration for an external API used in retrieval.

genai.types.RetrievalDict.external_api
  Description: Configuration for an external API used in retrieval (dictionary format).

genai.types.ExternalApiDict
  Description: Dictionary representation for external API configuration.

genai.types.ExternalApiElasticSearchParamsDict
  Description: Dictionary representation for Elasticsearch search parameters.

genai.types.ExternalApiSimpleSearchParamsDict
  Description: Dictionary representation for simple search parameters.

genai.types.HttpOptions.extra_body
  Description: Additional body content to include in HTTP requests.

genai.types.HttpOptionsDict.extra_body
  Description: Additional body content to include in HTTP requests (dictionary format).
```

----------------------------------------

TITLE: genai.types.HttpOptions Attributes
DESCRIPTION: API documentation for HttpOptions attributes, including client arguments.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_85

LANGUAGE: APIDOC
CODE:
```
genai.types.HttpOptions.client_args (attribute)
  - Additional arguments to pass to the underlying HTTP client.
  - Related: genai.types.HttpOptionsDict.client_args
```

----------------------------------------

TITLE: API Request Configuration Options
DESCRIPTION: Common configuration options for various API requests, primarily related to HTTP client behavior.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_234

LANGUAGE: APIDOC
CODE:
```
GetBatchJobConfigDict:
  http_options: HTTP client options for the request.

GetCachedContentConfigDict:
  http_options: HTTP client options for the request.

GetFileConfigDict:
  http_options: HTTP client options for the request.

GetModelConfigDict:
  http_options: HTTP client options for the request.
```

----------------------------------------

TITLE: Prepare Tuning Dataset
DESCRIPTION: Prepares a dataset for model tuning, supporting both GCS URIs for Vertex AI and inline examples for the Gemini Developer API.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_68

LANGUAGE: python
CODE:
```
from google.genai import types

if client.vertexai:
    model = 'gemini-2.0-flash-001'
    training_dataset = types.TuningDataset(
      # or gcs_uri=my_vertex_multimodal_dataset
        gcs_uri='gs://cloud-samples-data/ai-platform/generative_ai/gemini-1_5/text/sft_train_data.jsonl',
    )
else:
    model = 'models/gemini-2.0-flash-001'
    # or gcs_uri=my_vertex_multimodal_dataset.resource_name
    training_dataset = types.TuningDataset(
        examples=[
            types.TuningExample(
                text_input=f'Input text {i}',
                output=f'Output text {i}',
            )
            for i in range(5)
        ],
    )
```

----------------------------------------

TITLE: API Error Handling
DESCRIPTION: Shows how to catch and handle API errors raised by the client library. It demonstrates using a try-except block to catch `errors.APIError` and access its `code` and `message` attributes.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_94

LANGUAGE: python
CODE:
```
try:
    client.models.generate_content(
        model="invalid-model-name",
        contents="What is your name?",
    )
except errors.APIError as e:
    print(e.code) # 404
    print(e.message)
```

----------------------------------------

TITLE: genai.models Module Methods
DESCRIPTION: API methods for interacting with language models, including token counting and computation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_7

LANGUAGE: APIDOC
CODE:
```
AsyncModels:
  compute_tokens(model_name: str, prompt: str):
    Computes tokens for a given prompt and model.
  count_tokens(model_name: str, prompt: str):
    Counts tokens for a given prompt and model.
```

----------------------------------------

TITLE: Configure Gemini API Client with API Version v1alpha
DESCRIPTION: Initializes a Gemini Developer API client and sets the API version to 'v1alpha' using HttpOptions. This allows access to preview features.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_8

LANGUAGE: python
CODE:
```
from google import genai
from google.genai import types

client = genai.Client(
    api_key='GEMINI_API_KEY',
    http_options=types.HttpOptions(api_version='v1alpha')
)
```

----------------------------------------

TITLE: genai.types.WeightedPrompt API Reference
DESCRIPTION: API reference for the WeightedPrompt type, used for providing weighted prompts in generative models.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_375

LANGUAGE: APIDOC
CODE:
```
WeightedPrompt:
  Attributes:
    text: The prompt text.
    weight: The weight associated with the prompt.
```

----------------------------------------

TITLE: API Specification Types
DESCRIPTION: Specifies different API types or modes available for use with the GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_13

LANGUAGE: APIDOC
CODE:
```
ApiSpec:
  API_SPEC_UNSPECIFIED: int
    Default unspecified API specification.
  ELASTIC_SEARCH: int
    Specifies the Elastic Search API.
  SIMPLE_SEARCH: int
    Specifies the Simple Search API.
```

----------------------------------------

TITLE: Google Gen AI SDK Client API
DESCRIPTION: Documentation for the core client classes in the Google Gen AI SDK. This includes the synchronous Client and asynchronous AsyncClient, detailing their attributes and methods for interacting with various Gen AI features.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Module: genai.client

Classes:

AsyncClient:
  Represents an asynchronous client for Google Gen AI services.
  Attributes:
    auth_tokens: Access authentication tokens.
    batches: Interface for managing batch operations.
    caches: Interface for managing caches.
    chats: Interface for managing chat sessions.
    files: Interface for managing files.
    live: Interface for live model interactions.
    models: Interface for accessing available models.
    operations: Interface for managing long-running operations.
    tunings: Interface for managing model tunings.

Client:
  Represents a synchronous client for Google Gen AI services.
  Attributes:
    api_key: The API key used for authentication.
    vertexai: Configuration related to Vertex AI.
    credentials: The credentials used for authentication.
    project: The Google Cloud project ID.
    location: The Google Cloud location.
    debug_config: Configuration for debugging client behavior.
    http_options: Options for configuring HTTP requests.
    aio: Access to the asynchronous client instance.
    auth_tokens: Access authentication tokens.
    batches: Interface for managing batch operations.
    caches: Interface for managing caches.
    chats: Interface for managing chat sessions.
    files: Interface for managing files.
    models: Interface for accessing available models.
    operations: Interface for managing long-running operations.
    tunings: Interface for managing model tunings.
    vertexai: Alias for vertexai configuration.

DebugConfig:
  Configuration object for debugging client operations.
  Attributes:
    client_mode: Specifies the client mode for debugging.
```

----------------------------------------

TITLE: LiveMusicClientSetupDict API
DESCRIPTION: Documentation for the LiveMusicClientSetupDict type, offering dictionary access to live music client setup parameters.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_202

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientSetupDict:
  model: The generative model to use for live music.
```

----------------------------------------

TITLE: LiveClientSetup API Reference
DESCRIPTION: Details the attributes for configuring a live client setup, including proactivity, session resumption, and system instructions.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_285

LANGUAGE: APIDOC
CODE:
```
LiveClientSetup:
  proactivity: Controls the proactivity level of the client.
  session_resumption: Configuration for session resumption.
  system_instruction: Sets the system instruction for the model.
  tools: Specifies the tools available to the model.
```

----------------------------------------

TITLE: LiveMusicClientMessage API
DESCRIPTION: Documentation for the LiveMusicClientMessage type, detailing its attributes for playback control and setup.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_199

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientMessage:
  playback_control: Controls playback actions for live music.
  setup: Configuration settings for setting up live music playback.
```

----------------------------------------

TITLE: PartnerModelTuningSpec API
DESCRIPTION: Defines the configuration for tuning a partner model. Includes dataset URIs and hyper-parameters.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_346

LANGUAGE: APIDOC
CODE:
```
PartnerModelTuningSpec:
  validation_dataset_uri: str
    The URI for the validation dataset.
  hyper_parameters: dict
    A dictionary of hyper-parameters for tuning.
  training_dataset_uri: str
    The URI for the training dataset.
```

----------------------------------------

TITLE: Google GenAI Models API
DESCRIPTION: Provides methods for interacting with generative AI models, including content generation, image manipulation, and token computation. Supports both synchronous and asynchronous operations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Models API:
  - compute_tokens(model_name: str, prompt: Union[str, list[str]], **kwargs) -> TokenStats
    Computes token counts for given content.
    Parameters:
      model_name: The name of the model to use.
      prompt: The content to count tokens for.
    Returns: TokenStats object.

  - count_tokens(model_name: str, prompt: Union[str, list[str]], **kwargs) -> TokenStats
    Counts tokens for given content.
    Parameters:
      model_name: The name of the model to use.
      prompt: The content to count tokens for.
    Returns: TokenStats object.

  - delete(model_name: str, **kwargs)
    Deletes a model.
    Parameters:
      model_name: The name of the model to delete.

  - edit_image(model_name: str, prompt: str, image: Union[PIL.Image.Image, bytes], **kwargs)
    Edits an image based on a prompt.
    Parameters:
      model_name: The name of the model to use.
      prompt: The editing prompt.
      image: The image to edit.

  - embed_content(model_name: str, prompt: Union[str, list[str]], **kwargs) -> EmbedContentResponse
    Generates embeddings for given content.
    Parameters:
      model_name: The name of the model to use.
      prompt: The content to embed.
    Returns: EmbedContentResponse object.

  - generate_content(model_name: str, prompt: Union[str, list[str]], **kwargs) -> GenerateContentResponse
    Generates content based on a prompt.
    Parameters:
      model_name: The name of the model to use.
      prompt: The content prompt.
    Returns: GenerateContentResponse object.

  - generate_content_stream(model_name: str, prompt: Union[str, list[str]], **kwargs) -> Iterator[GenerateContentResponse]
    Generates content in a streaming fashion.
    Parameters:
      model_name: The name of the model to use.
      prompt: The content prompt.
    Returns: An iterator yielding GenerateContentResponse objects.

  - generate_images(model_name: str, prompt: str, **kwargs) -> GenerateImagesResponse
    Generates images based on a prompt.
    Parameters:
      model_name: The name of the model to use.
      prompt: The image generation prompt.
    Returns: GenerateImagesResponse object.

  - generate_videos(model_name: str, prompt: str, **kwargs) -> GenerateVideosResponse
    Generates videos based on a prompt.
    Parameters:
      model_name: The name of the model to use.
      prompt: The video generation prompt.
    Returns: GenerateVideosResponse object.

  - get(model_name: str, **kwargs) -> Model
    Retrieves information about a specific model.
    Parameters:
      model_name: The name of the model to retrieve.
    Returns: Model object.

  - list(**kwargs) -> List[Model]
    Lists available models.
    Returns: A list of Model objects.

  - update(model_name: str, **kwargs)
    Updates a model.
    Parameters:
      model_name: The name of the model to update.

  - upscale_image(model_name: str, image: Union[PIL.Image.Image, bytes], **kwargs)
    Upscales an image.
    Parameters:
      model_name: The name of the model to use.
      image: The image to upscale.

AsyncModels API (asynchronous counterparts to Models API methods):
  - delete()
  - edit_image()
  - embed_content()
  - generate_content()
  - generate_content_stream()
  - generate_images()
  - generate_videos()
  - get()
  - list()
  - update()
  - upscale_image()
```

----------------------------------------

TITLE: Common 'get' Method Across GenAI Resources
DESCRIPTION: This entry consolidates the 'get' method found across various asynchronous and synchronous resource managers within the genai library, including batches, caches, files, models, and tunings. It represents a common pattern for retrieving resources.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_173

LANGUAGE: APIDOC
CODE:
```
get()
  Description: Retrieves a resource or a list of resources.
  Applies to:
    - genai.batches.AsyncBatches.get
    - genai.batches.Batches.get
    - genai.caches.AsyncCaches.get
    - genai.caches.Caches.get
    - genai.files.AsyncFiles.get
    - genai.files.Files.get
    - genai.models.AsyncModels.get
    - genai.models.Models.get
    - genai.tunings.AsyncTunings.get
    - genai.tunings.Tunings.get
  Parameters: (Specific parameters vary by resource type, not detailed in source)
  Returns: (Specific return type varies by resource type, not detailed in source)
```

----------------------------------------

TITLE: LiveMusicFilteredPrompt API
DESCRIPTION: API reference for LiveMusicFilteredPrompt, detailing attributes for filtered music prompts, including text and reason.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_205

LANGUAGE: APIDOC
CODE:
```
LiveMusicFilteredPrompt:
  filtered_reason: The reason why the prompt was filtered.
  text: The original text of the prompt.
```

----------------------------------------

TITLE: GenAI API Specification Attributes
DESCRIPTION: References to API specification related attributes within the genai library, including ApiKeyConfig, ApiSpec, and HttpOptions.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_26

LANGUAGE: APIDOC
CODE:
```
ApiKeyConfig:
  api_key_string: Attribute related to API key configuration.

ApiKeyConfigDict:
  api_key_string: Attribute related to API key configuration dictionary.

ExternalApi:
  api_spec: Attribute for external API specifications.

ExternalApiDict:
  api_spec: Attribute for external API specification dictionaries.

ApiSpec:
  API_SPEC_UNSPECIFIED: Constant indicating an unspecified API specification.

HttpOptions:
  api_version: Attribute for specifying the API version.

HttpOptionsDict:
  api_version: Attribute for specifying the API version in a dictionary.

HttpOptions:
  async_client_args: Arguments for the asynchronous client.

HttpOptionsDict:
  async_client_args: Arguments for the asynchronous client in a dictionary.
```

----------------------------------------

TITLE: Handle API Errors with try-except (Python)
DESCRIPTION: Illustrates how to handle errors when interacting with the GenAI API. It shows how to catch `errors.APIError` and access error details like code and message. This is crucial for robust application development.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_70

LANGUAGE: python
CODE:
```
try:
    client.models.generate_content(
        model="invalid-model-name",
        contents="What is your name?",
    )
except errors.APIError as e:
    print(e.code) # 404
    print(e.message)
```

----------------------------------------

TITLE: Google GenAI Models API
DESCRIPTION: Provides methods for interacting with generative AI models, including content generation, image and video generation, and model retrieval.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_77

LANGUAGE: APIDOC
CODE:
```
Models API:

  generate_content_stream(prompt: str, **kwargs) -> Iterator[GenerateContentResponse]
    Generates content from a model in a streaming fashion.
    Parameters:
      prompt: The input prompt for content generation.
      **kwargs: Additional arguments for generation.
    Returns: An iterator yielding content generation responses.

  generate_images(prompt: str, **kwargs) -> GenerateContentResponse
    Generates images based on a text prompt.
    Parameters:
      prompt: The text prompt for image generation.
      **kwargs: Additional arguments for image generation.
    Returns: A response object containing generated images.

  generate_videos(prompt: str, **kwargs) -> GenerateContentResponse
    Generates videos based on a text prompt.
    Parameters:
      prompt: The text prompt for video generation.
      **kwargs: Additional arguments for video generation.
    Returns: A response object containing generated videos.

  get(model_name: str) -> Model
    Retrieves a specific generative AI model.
    Parameters:
      model_name: The name of the model to retrieve.
    Returns: A Model object.

  list() -> List[Model]
    Lists available generative AI models.
    Returns: A list of available Model objects.

  update(model_name: str, **kwargs) -> Model
    Updates an existing generative AI model configuration.
    Parameters:
      model_name: The name of the model to update.
      **kwargs: Model configuration parameters to update.
    Returns: The updated Model object.

  upscale_image(image: Image, **kwargs) -> GenerateContentResponse
    Upscales an input image.
    Parameters:
      image: The image object to upscale.
      **kwargs: Additional arguments for upscaling.
    Returns: A response object containing the upscaled image.
```

----------------------------------------

TITLE: LiveMusicConnectParametersDict API
DESCRIPTION: Documentation for LiveMusicConnectParametersDict, providing dictionary access to parameters for live music connection.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_204

LANGUAGE: APIDOC
CODE:
```
LiveMusicConnectParametersDict:
  model: The generative model to use for connecting to live music services.
```

----------------------------------------

TITLE: API Version Selection
DESCRIPTION: Configure the SDK to use specific API versions (e.g., v1 for Vertex AI, v1alpha for Gemini Developer API) by setting the `api_version` within `HttpOptions` during client initialization.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_7

LANGUAGE: python
CODE:
```
from google import genai
from google.genai import types

# For Vertex AI with stable API (v1)
client_vertex = genai.Client(
    vertexai=True,
    project='your-project-id',
    location='us-central1',
    http_options=types.HttpOptions(api_version='v1')
)

# For Gemini Developer API with v1alpha
client_gemini = genai.Client(
    api_key='GEMINI_API_KEY',
    http_options=types.HttpOptions(api_version='v1alpha')
)
```

----------------------------------------

TITLE: genai.client.Client Properties
DESCRIPTION: API documentation for properties of the Client and AsyncClient classes, including access to chat functionalities.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_75

LANGUAGE: APIDOC
CODE:
```
genai.client.AsyncClient.chats (property)
  - Property to access asynchronous chat functionalities.
  - Related: genai.client.Client.chats
```

LANGUAGE: APIDOC
CODE:
```
genai.client.Client.chats (property)
  - Property to access synchronous chat functionalities.
  - Related: genai.client.AsyncClient.chats
```

----------------------------------------

TITLE: LiveClientToolResponse API Reference
DESCRIPTION: Describes the structure for tool responses from the live client, focusing on function call results.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_287

LANGUAGE: APIDOC
CODE:
```
LiveClientToolResponse:
  function_responses: A list of responses from executed functions.
```

----------------------------------------

TITLE: Google GenAI Tokens API
DESCRIPTION: Provides methods for tokenization, including asynchronous and synchronous operations for creating tokens.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_78

LANGUAGE: APIDOC
CODE:
```
Tokens API:

  AsyncTokens.create(prompt: str, **kwargs) -> TokenizeResponse
    Asynchronously creates tokens for a given prompt.
    Parameters:
      prompt: The text prompt to tokenize.
      **kwargs: Additional arguments.
    Returns: An asynchronous response object with token information.

  Tokens.create(prompt: str, **kwargs) -> TokenizeResponse
    Synchronously creates tokens for a given prompt.
    Parameters:
      prompt: The text prompt to tokenize.
      **kwargs: Additional arguments.
    Returns: A response object with token information.
```

----------------------------------------

TITLE: genai.files Module Methods
DESCRIPTION: API methods for managing files, including uploading, downloading, retrieving, listing, and deleting files asynchronously and synchronously.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_5

LANGUAGE: APIDOC
CODE:
```
AsyncFiles:
  delete(file_id: str):
    Deletes a file.
  download(file_id: str, destination_path: str):
    Downloads a file to a specified path.
  get(file_id: str):
    Retrieves metadata for a specific file.
  list():
    Lists all files.
  upload(file_path: str, display_name: str):
    Uploads a file.

Files:
  delete(file_id: str):
    Deletes a file.
  download(file_id: str, destination_path: str):
    Downloads a file to a specified path.
  get(file_id: str):
    Retrieves metadata for a specific file.
  list():
    Lists all files.
  upload(file_path: str, display_name: str):
    Uploads a file.
```

----------------------------------------

TITLE: Google GenAI Tunings API
DESCRIPTION: Offers methods for fine-tuning generative AI models, supporting both asynchronous and synchronous operations for tuning, listing, and retrieving tuning jobs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_79

LANGUAGE: APIDOC
CODE:
```
Tunings API:

  AsyncTunings.get(tuning_id: str) -> Tuning
    Asynchronously retrieves a specific tuning job by its ID.
    Parameters:
      tuning_id: The unique identifier for the tuning job.
    Returns: A Tuning object.

  AsyncTunings.list(**kwargs) -> List[Tuning]
    Asynchronously lists available tuning jobs.
    Parameters:
      **kwargs: Filtering or pagination arguments.
    Returns: A list of Tuning objects.

  AsyncTunings.tune(training_data: List[Dict], **kwargs) -> Tuning
    Asynchronously initiates a model tuning job.
    Parameters:
      training_data: A list of dictionaries representing the training dataset.
      **kwargs: Configuration for the tuning job.
    Returns: A Tuning object representing the initiated job.

  Tunings.get(tuning_id: str) -> Tuning
    Synchronously retrieves a specific tuning job by its ID.
    Parameters:
      tuning_id: The unique identifier for the tuning job.
    Returns: A Tuning object.

  Tunings.list(**kwargs) -> List[Tuning]
    Synchronously lists available tuning jobs.
    Parameters:
      **kwargs: Filtering or pagination arguments.
    Returns: A list of Tuning objects.

  Tunings.tune(training_data: List[Dict], **kwargs) -> Tuning
    Synchronously initiates a model tuning job.
    Parameters:
      training_data: A list of dictionaries representing the training dataset.
      **kwargs: Configuration for the tuning job.
    Returns: A Tuning object representing the initiated job.
```

----------------------------------------

TITLE: FunctionDeclaration and FunctionDeclarationDict API
DESCRIPTION: API reference for `FunctionDeclaration` and `FunctionDeclarationDict`, used to define functions that the model can call. Includes details on name, description, parameters, and response schemas.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_112

LANGUAGE: APIDOC
CODE:
```
FunctionDeclaration:
  Defines a function that the model can call.
  Attributes:
    behavior (str | None): Optional description of the function's behavior.
    description (str | None): A detailed description of the function.
    name (str): The name of the function.
    parameters (dict | None): A dictionary representing the function's parameters, typically in OpenAPI schema format.
    parameters_json_schema (dict | None): A JSON schema object for the function's parameters.
    response (dict | None): A dictionary representing the function's response, typically in OpenAPI schema format.
    response_json_schema (dict | None): A JSON schema object for the function's response.
  Methods:
    from_callable(callable, name=None, description=None, parameters=None, response=None):
      Creates a FunctionDeclaration from a Python callable.
    from_callable_with_api_option(callable, name=None, description=None, parameters=None, response=None):
      Creates a FunctionDeclaration from a Python callable with API options.

FunctionDeclarationDict:
  A dictionary representation of FunctionDeclaration.
  Attributes:
    behavior (str | None): Optional description of the function's behavior.
    description (str | None): A detailed description of the function.
    name (str): The name of the function.
    parameters (dict | None): A dictionary representing the function's parameters, typically in OpenAPI schema format.
    parameters_json_schema (dict | None): A JSON schema object for the function's parameters.
    response (dict | None): A dictionary representing the function's response, typically in OpenAPI schema format.
    response_json_schema (dict | None): A JSON schema object for the function's response.
```

----------------------------------------

TITLE: Set Gemini API Version to v1alpha
DESCRIPTION: Configures the Gemini Developer API client to use the 'v1alpha' API version, enabling access to preview features. This is done via HttpOptions.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_8

LANGUAGE: python
CODE:
```
from google import genai
from google.genai import types

# Only run this block for Gemini Developer API
client = genai.Client(
    api_key='GEMINI_API_KEY',
    http_options=types.HttpOptions(api_version='v1alpha')
)
```

----------------------------------------

TITLE: Google GenAI Tokens API
DESCRIPTION: Provides methods for tokenization operations, specifically for creating tokenizers or processing text into tokens.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Tokens API:
  - create(model_name: str, **kwargs) -> Tokens
    Creates a tokenizer for a given model.
    Parameters:
      model_name: The name of the model to create a tokenizer for.
    Returns: A Tokens object.

AsyncTokens API (asynchronous counterpart to Tokens API):
  - create()
    Creates a tokenizer asynchronously.
```

----------------------------------------

TITLE: LiveMusicPlaybackControl API
DESCRIPTION: API reference for the LiveMusicPlaybackControl type, used for managing playback of live music.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_209

LANGUAGE: APIDOC
CODE:
```
LiveMusicPlaybackControl:
  (No specific attributes listed in the provided text, implies a control object)
```

----------------------------------------

TITLE: genai.types.GenerateContentResponse Attributes
DESCRIPTION: API documentation for attributes of GenerateContentResponse, including candidates and usage metadata.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_70

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerateContentResponse.candidates (attribute)
  - A list of candidate responses from the model.
  - Related: genai.types.GenerateContentResponseDict.candidates, genai.types.LogprobsResultTopCandidates.candidates, genai.types.LogprobsResultTopCandidatesDict.candidates
```

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerateContentResponseUsageMetadata.candidates_token_count (attribute)
  - The total token count for all candidates.
  - Related: genai.types.GenerateContentResponseUsageMetadataDict.candidates_token_count
```

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerateContentResponseUsageMetadata.candidates_tokens_details (attribute)
  - Detailed token breakdown for each candidate.
  - Related: genai.types.GenerateContentResponseUsageMetadataDict.candidates_tokens_details
```

----------------------------------------

TITLE: Configure Vertex AI Client with API Version v1
DESCRIPTION: Initializes a Vertex AI client and explicitly sets the API version to 'v1' using HttpOptions. This ensures usage of stable API endpoints.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_7

LANGUAGE: python
CODE:
```
from google import genai
from google.genai import types

client = genai.Client(
    vertexai=True,
    project='your-project-id',
    location='us-central1',
    http_options=types.HttpOptions(api_version='v1')
)
```

----------------------------------------

TITLE: genai.types.VoiceConfig API Reference
DESCRIPTION: API reference for the VoiceConfig type, detailing its configuration for voice synthesis.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_373

LANGUAGE: APIDOC
CODE:
```
VoiceConfig:
  Attributes:
    prebuilt_voice_config: Configuration for a prebuilt voice.
```

----------------------------------------

TITLE: genai.types.CitationMetadata Attributes
DESCRIPTION: API documentation for CitationMetadata attributes, including the list of citations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_83

LANGUAGE: APIDOC
CODE:
```
genai.types.CitationMetadata.citations (attribute)
  - A list of citation details.
  - Related: genai.types.CitationMetadataDict.citations
```

----------------------------------------

TITLE: Segment Type API Documentation
DESCRIPTION: Details the attributes for the Segment type, used to represent segments of text or data, typically with start and end indices.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_304

LANGUAGE: APIDOC
CODE:
```
Segment:
  Attributes:
    - end_index: The ending index of the segment.
    - part_index: The index of the part this segment belongs to.
    - start_index: The starting index of the segment.
    - text: The text content of the segment.
```

----------------------------------------

TITLE: GenAI Resource Creation Methods
DESCRIPTION: Provides an overview of methods used to create various resources within the genai library, such as batches, caches, chats, and tokens. These methods are essential for initializing and managing library components.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_113

LANGUAGE: APIDOC
CODE:
```
genai.batches.Batches.create()
  - Creates a new batch resource.

genai.caches.AsyncCaches.create()
  - Creates a new asynchronous cache resource.

genai.caches.Caches.create()
  - Creates a new cache resource.

genai.chats.AsyncChats.create()
  - Creates a new asynchronous chat session.

genai.chats.Chats.create()
  - Creates a new chat session.

genai.tokens.AsyncTokens.create()
  - Creates a new asynchronous tokenization resource.

genai.tokens.Tokens.create()
  - Creates a new tokenization resource.
```

----------------------------------------

TITLE: genai.types.Candidate Attributes
DESCRIPTION: API documentation for Candidate attributes, including citation metadata.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_80

LANGUAGE: APIDOC
CODE:
```
genai.types.Candidate.citation_metadata (attribute)
  - Metadata related to citations within the candidate response.
  - Related: genai.types.CandidateDict.citation_metadata
```

----------------------------------------

TITLE: genai.types.ExternalApi
DESCRIPTION: Configuration for external API integrations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_22

LANGUAGE: APIDOC
CODE:
```
genai.types.ExternalApi:
  Configuration for an external API.
  Attributes:
    api_auth: Authentication details for the external API.
      (Type and constraints not specified in source text.)

genai.types.ExternalApiDict:
  Dictionary representation of ExternalApi.
  Attributes:
    api_auth: Authentication details for the external API.
      (Type and constraints not specified in source text.)
```

----------------------------------------

TITLE: genai.types.VideoMetadata API Reference
DESCRIPTION: API reference for the VideoMetadata type, detailing its attributes related to video properties.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_371

LANGUAGE: APIDOC
CODE:
```
VideoMetadata:
  Attributes:
    end_offset: Offset in milliseconds from the start of the video.
    fps: Frames per second of the video.
    start_offset: Offset in milliseconds from the start of the video.
```

----------------------------------------

TITLE: GenAI Files API
DESCRIPTION: Manages file uploads, downloads, and listings for use with AI models. Supports asynchronous and synchronous file operations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_74

LANGUAGE: APIDOC
CODE:
```
Files:
  upload(file_path: str, display_name: str, **kwargs)
    Uploads a file to be used with the AI service.
    Parameters:
      file_path: The local path to the file.
      display_name: A user-friendly name for the file.
    Returns: File object.

  get(file_id: str)
    Retrieves information about a specific file.
    Parameters:
      file_id: The ID of the file.
    Returns: File object.

  list(**kwargs)
    Lists all uploaded files.
    Returns: List of File objects.

  download(file_id: str, destination_path: str, **kwargs)
    Downloads a file from the service.
    Parameters:
      file_id: The ID of the file to download.
      destination_path: The local path to save the downloaded file.
    Returns: None.

  delete(file_id: str)
    Deletes a specific file.
    Parameters:
      file_id: The ID of the file to delete.
    Returns: None.

AsyncFiles:
  upload(file_path: str, display_name: str, **kwargs)
    Asynchronously uploads a file.
    Parameters:
      file_path: The local path to the file.
      display_name: A user-friendly name for the file.
    Returns: Coroutine that resolves to a File object.

  download(file_id: str, destination_path: str, **kwargs)
    Asynchronously downloads a file.
    Parameters:
      file_id: The ID of the file to download.
      destination_path: The local path to save the downloaded file.
    Returns: Coroutine that resolves to None.
```

----------------------------------------

TITLE: genai.live Module Methods
DESCRIPTION: API methods for real-time interactions, including connecting to live sessions, sending/receiving data, and managing streams.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_6

LANGUAGE: APIDOC
CODE:
```
AsyncLive:
  connect():
    Establishes a connection to a live session.
  music:
    Access to music-related live functionalities.

AsyncSession:
  close():
    Closes the live session.
  receive():
    Receives data from the live session.
  send(data):
    Sends data to the live session.
  send_client_content(content):
    Sends client-generated content to the live session.
  send_realtime_input(input):
    Sends real-time input to the live session.
  send_tool_response(response):
    Sends a tool response to the live session.
  start_stream():
    Starts a data stream from the live session.
```

----------------------------------------

TITLE: genai.types.WeightedPromptDict API Reference
DESCRIPTION: API reference for the WeightedPromptDict type, used for providing weighted prompts in generative models.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_376

LANGUAGE: APIDOC
CODE:
```
WeightedPromptDict:
  Attributes:
    text: The prompt text.
    weight: The weight associated with the prompt.
```

----------------------------------------

TITLE: genai.types.VoiceConfigDict API Reference
DESCRIPTION: API reference for the VoiceConfigDict type, detailing its configuration for voice synthesis.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_374

LANGUAGE: APIDOC
CODE:
```
VoiceConfigDict:
  Attributes:
    prebuilt_voice_config: Configuration for a prebuilt voice.
```

----------------------------------------

TITLE: genai.types.VideoMetadataDict API Reference
DESCRIPTION: API reference for the VideoMetadataDict type, detailing its attributes related to video properties.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_372

LANGUAGE: APIDOC
CODE:
```
VideoMetadataDict:
  Attributes:
    end_offset: Offset in milliseconds from the start of the video.
    fps: Frames per second of the video.
    start_offset: Offset in milliseconds from the start of the video.
```

----------------------------------------

TITLE: genai.types.CitationMetadataDict
DESCRIPTION: API documentation for the CitationMetadataDict type, representing metadata about citations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_82

LANGUAGE: APIDOC
CODE:
```
genai.types.CitationMetadataDict (class)
  - Represents metadata containing multiple citations.
```

----------------------------------------

TITLE: genai.batches Module Methods
DESCRIPTION: API methods for managing asynchronous and synchronous batches, including creation, retrieval, listing, and deletion.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_2

LANGUAGE: APIDOC
CODE:
```
AsyncBatches:
  cancel(batch_id: str):
    Cancels a batch job.
  create(batch):
    Creates a new batch job.
  delete(batch_id: str):
    Deletes a batch job.
  get(batch_id: str):
    Retrieves a specific batch job.
  list():
    Lists all batch jobs.

Batches:
  cancel(batch_id: str):
    Cancels a batch job.
  create(batch):
    Creates a new batch job.
  delete(batch_id: str):
    Deletes a batch job.
  get(batch_id: str):
    Retrieves a specific batch job.
  list():
    Lists all batch jobs.
```

----------------------------------------

TITLE: SupervisedTuningSpec API
DESCRIPTION: Defines the configuration for supervised tuning, including dataset URIs and hyperparameters.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_389

LANGUAGE: APIDOC
CODE:
```
SupervisedTuningSpec:
  Configuration for supervised tuning.
  Attributes:
    export_last_checkpoint_only (bool): Whether to export only the last checkpoint.
    hyper_parameters (dict): Dictionary of hyperparameters for tuning.
    training_dataset_uri (str): URI for the training dataset.
    validation_dataset_uri (str): URI for the validation dataset.

SupervisedTuningSpecDict:
  Dictionary representation of SupervisedTuningSpec.
  Attributes:
    export_last_checkpoint_only (bool): Whether to export only the last checkpoint.
    hyper_parameters (dict): Dictionary of hyperparameters for tuning.
    training_dataset_uri (str): URI for the training dataset.
    validation_dataset_uri (str): URI for the validation dataset.
```

----------------------------------------

TITLE: CreateFileResponseDict API
DESCRIPTION: Defines the structure for a file creation response, including details about the SDK's HTTP response.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_135

LANGUAGE: APIDOC
CODE:
```
CreateFileResponseDict:
  sdk_http_response: Details of the HTTP response from the SDK.
```

----------------------------------------

TITLE: Tuning and Dataset Statistics Attributes
DESCRIPTION: Documentation for attributes related to tuning operations and dataset statistics, including counts of truncated examples, total characters, and dataset URIs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_355

LANGUAGE: APIDOC
CODE:
```
genai.types.SupervisedTuningDataStats.total_truncated_example_count
  - Description: The total count of examples that were truncated.
  - Type: int

genai.types.SupervisedTuningDataStatsDict.total_truncated_example_count
  - Description: The total count of examples that were truncated (dictionary representation).
  - Type: int

genai.types.DatasetStats.total_tuning_character_count
  - Description: The total number of characters available for tuning.
  - Type: int

genai.types.DatasetStatsDict.total_tuning_character_count
  - Description: The total number of characters available for tuning (dictionary representation).
  - Type: int

genai.types.SupervisedTuningDataStats.total_tuning_character_count
  - Description: The total number of characters in the supervised tuning dataset.
  - Type: int

genai.types.SupervisedTuningDataStatsDict.total_tuning_character_count
  - Description: The total number of characters in the supervised tuning dataset (dictionary representation).
  - Type: int

genai.types.DistillationDataStats.training_dataset_stats
  - Description: Statistics for the training dataset used in distillation.
  - Type: genai.types.DatasetStats

genai.types.DistillationDataStatsDict.training_dataset_stats
  - Description: Statistics for the training dataset used in distillation (dictionary representation).
  - Type: genai.types.DatasetStatsDict

genai.types.DistillationSpec.training_dataset_uri
  - Description: The URI of the training dataset for distillation.
  - Type: str

genai.types.DistillationSpecDict.training_dataset_uri
  - Description: The URI of the training dataset for distillation (dictionary representation).
  - Type: str

genai.types.PartnerModelTuningSpec.training_dataset_uri
  - Description: The URI of the training dataset for partner model tuning.
  - Type: str

genai.types.PartnerModelTuningSpecDict.training_dataset_uri
  - Description: The URI of the training dataset for partner model tuning (dictionary representation).
  - Type: str

genai.types.SupervisedTuningSpec.training_dataset_uri
  - Description: The URI of the training dataset for supervised tuning.
  - Type: str

genai.types.SupervisedTuningSpecDict.training_dataset_uri
  - Description: The URI of the training dataset for supervised tuning (dictionary representation).
  - Type: str

genai.types.SupervisedTuningDataStats.truncated_example_indices
  - Description: Indices of examples that were truncated.
  - Type: list[int]

genai.types.SupervisedTuningDataStatsDict.truncated_example_indices
  - Description: Indices of examples that were truncated (dictionary representation).
  - Type: list[int]
```

----------------------------------------

TITLE: FunctionCallingConfig and FunctionCallingConfigDict API
DESCRIPTION: API reference for `FunctionCallingConfig` and `FunctionCallingConfigDict`, used to configure function calling behavior. Includes settings for allowed function names and calling mode.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_110

LANGUAGE: APIDOC
CODE:
```
FunctionCallingConfig:
  Configuration for enabling and controlling function calling.
  Attributes:
    allowed_function_names (list[str] | None): A list of function names that the model is allowed to call. If None, all functions are allowed.
    mode (FunctionCallingConfigMode): The mode for function calling.

FunctionCallingConfigDict:
  A dictionary representation of FunctionCallingConfig.
  Attributes:
    allowed_function_names (list[str] | None): A list of function names that the model is allowed to call. If None, all functions are allowed.
    mode (FunctionCallingConfigMode): The mode for function calling.
```

----------------------------------------

TITLE: Set Vertex AI API Version to v1
DESCRIPTION: Configures the Vertex AI client to use the stable 'v1' API version by passing HttpOptions. This ensures compatibility with stable API endpoints.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_7

LANGUAGE: python
CODE:
```
from google import genai
from google.genai import types

client = genai.Client(
    vertexai=True,
    project='your-project-id',
    location='us-central1',
    http_options=types.HttpOptions(api_version='v1')
)
```

----------------------------------------

TITLE: genai.types.ApiAuth
DESCRIPTION: Authentication configuration, including API key details.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_24

LANGUAGE: APIDOC
CODE:
```
genai.types.ApiAuth:
  Authentication configuration.
  Attributes:
    api_key_config: Configuration specific to API key authentication.
      (Type and constraints not specified in source text.)

genai.types.ApiAuthDict:
  Dictionary representation of ApiAuth.
  Attributes:
    api_key_config: Configuration specific to API key authentication.
      (Type and constraints not specified in source text.)

genai.types.AuthConfig:
  General authentication configuration.
  Attributes:
    api_key_config: Configuration specific to API key authentication.
      (Type and constraints not specified in source text.)

genai.types.AuthConfigDict:
  Dictionary representation of AuthConfig.
  Attributes:
    api_key_config: Configuration specific to API key authentication.
      (Type and constraints not specified in source text.)
```

----------------------------------------

TITLE: LiveMusicClientMessageDict API
DESCRIPTION: Documentation for the LiveMusicClientMessageDict type, providing dictionary-based access to live music client message attributes.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_200

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientMessageDict:
  client_content: Content related to the client's music request.
  music_generation_config: Configuration for music generation.
  playback_control: Controls playback actions for live music.
  setup: Configuration settings for setting up live music playback.
```

----------------------------------------

TITLE: ExternalApi Type Definition
DESCRIPTION: Defines configuration for external APIs, including authentication methods and API specifications.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_183

LANGUAGE: APIDOC
CODE:
```
ExternalApi:
  api_auth: str
  api_spec: dict
  auth_config: dict
```

----------------------------------------

TITLE: Model API
DESCRIPTION: Represents a generative AI model, including its properties and capabilities.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_252

LANGUAGE: APIDOC
CODE:
```
Model:
  checkpoints: list[Checkpoint]
    Description: List of available checkpoints for the model.
  default_checkpoint_id: str
    Description: The ID of the default checkpoint.
  description: str
    Description: A human-readable description of the model.
  display_name: str
    Description: The display name of the model.
  endpoints: list[str]
    Description: List of API endpoints associated with the model.
  input_token_limit: int
    Description: The maximum number of input tokens the model can process.
```

----------------------------------------

TITLE: API Key Configuration Types
DESCRIPTION: Defines types for configuring API key authentication, including string representations and dictionary formats.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_12

LANGUAGE: APIDOC
CODE:
```
ApiAuthApiKeyConfig:
  api_key_string: str
    The API key string for authentication.

ApiAuthApiKeyConfigDict:
  api_key_secret_version: str
    The version of the API key secret.
  api_key_string: str
    The API key string for authentication.

ApiKeyConfig:
  api_key_string: str
    The API key string for authentication.

ApiKeyConfigDict:
  api_key_string: str
    The API key string for authentication.
```

----------------------------------------

TITLE: genai.client.Client Properties
DESCRIPTION: Properties of the genai client, including asynchronous client access and API key configuration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_17

LANGUAGE: APIDOC
CODE:
```
genai.client.Client:
  The main client for interacting with the GenAI service.
  Properties:
    aio: Provides access to the asynchronous client interface.
      (Type and details not specified in source text.)
    api_key: The API key used for authentication.
      (Type and details not specified in source text.)
```

----------------------------------------

TITLE: Handle API Errors
DESCRIPTION: Demonstrates how to catch and handle API errors raised by the model service using the SDK's APIError class. It shows accessing error code and message.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_90

LANGUAGE: python
CODE:
```
from google.genai import errors

try:
  client.models.generate_content(
      model="invalid-model-name",
      contents="What is your name?",
  )
except errors.APIError as e:
  print(e.code) # 404
  print(e.message)
```

----------------------------------------

TITLE: GenAI Models API
DESCRIPTION: Provides interfaces for interacting with various AI models, including content generation, embedding, token counting, and image manipulation. Supports both asynchronous and synchronous model operations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_76

LANGUAGE: APIDOC
CODE:
```
Models:
  get(model_name: str)
    Retrieves information about a specific model.
    Parameters:
      model_name: The name of the model.
    Returns: Model object.

  list(**kwargs)
    Lists available models.
    Returns: List of Model objects.

  generate_content(prompt: str, **kwargs)
    Generates content based on a prompt.
    Parameters:
      prompt: The input prompt for content generation.
    Returns: Content generation response.

  generate_content_stream(prompt: str, **kwargs)
    Generates content and streams the response.
    Parameters:
      prompt: The input prompt for content generation.
    Returns: Iterator yielding content response chunks.

  count_tokens(prompt: str, **kwargs)
    Counts the tokens in a given prompt.
    Parameters:
      prompt: The text to count tokens for.
    Returns: Token count result.

  embed_content(content: str, **kwargs)
    Generates embeddings for the given content.
    Parameters:
      content: The text content to embed.
    Returns: Embedding result.

  edit_image(image: bytes, mask: bytes = None, **kwargs)
    Edits an image, optionally using a mask.
    Parameters:
      image: The image data.
      mask: Optional mask data.
    Returns: Edited image data.

  generate_images(prompt: str, **kwargs)
    Generates images based on a prompt.
    Parameters:
      prompt: The prompt for image generation.
    Returns: List of generated image data.

  generate_videos(prompt: str, **kwargs)
    Generates videos based on a prompt.
    Parameters:
      prompt: The prompt for video generation.
    Returns: List of generated video data.

  upscale_image(image: bytes, **kwargs)
    Upscales an image.
    Parameters:
      image: The image data to upscale.
    Returns: Upscaled image data.

  delete(model_id: str)
    Deletes a model.
    Parameters:
      model_id: The ID of the model to delete.
    Returns: None.

  update(model_id: str, **kwargs)
    Updates a model.
    Parameters:
      model_id: The ID of the model to update.
    Returns: Updated model object.

AsyncModels:
  generate_content(prompt: str, **kwargs)
    Asynchronously generates content based on a prompt.
    Parameters:
      prompt: The input prompt for content generation.
    Returns: Coroutine that resolves to content generation response.

  generate_content_stream(prompt: str, **kwargs)
    Asynchronously generates content and streams the response.
    Parameters:
      prompt: The input prompt for content generation.
    Returns: Async iterator yielding content response chunks.

  count_tokens(prompt: str, **kwargs)
    Asynchronously counts the tokens in a given prompt.
    Parameters:
      prompt: The text to count tokens for.
    Returns: Coroutine that resolves to token count result.

  embed_content(content: str, **kwargs)
    Asynchronously generates embeddings for the given content.
    Parameters:
      content: The text content to embed.
    Returns: Coroutine that resolves to embedding result.

  edit_image(image: bytes, mask: bytes = None, **kwargs)
    Asynchronously edits an image.
    Parameters:
      image: The image data.
      mask: Optional mask data.
    Returns: Coroutine that resolves to edited image data.

  generate_images(prompt: str, **kwargs)
    Asynchronously generates images based on a prompt.
    Parameters:
      prompt: The prompt for image generation.
    Returns: Coroutine that resolves to a list of generated image data.

  generate_videos(prompt: str, **kwargs)
    Asynchronously generates videos based on a prompt.
    Parameters:
      prompt: The prompt for video generation.
    Returns: Coroutine that resolves to a list of generated video data.

  upscale_image(image: bytes, **kwargs)
    Asynchronously upscales an image.
    Parameters:
      image: The image data to upscale.
    Returns: Coroutine that resolves to upscaled image data.

  compute_tokens(prompt: str, **kwargs)
    Asynchronously computes tokens for a given prompt.
    Parameters:
      prompt: The text to compute tokens for.
    Returns: Coroutine that resolves to token computation result.
```

----------------------------------------

TITLE: GenerateImagesConfig API
DESCRIPTION: Configuration options for generating images using the GenAI API. This class allows customization of image generation parameters such as aspect ratio, prompts, and safety settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_123

LANGUAGE: APIDOC
CODE:
```
GenerateImagesConfig:
  Configuration for generating images.

  Attributes:
    add_watermark (bool): Whether to add a watermark to the generated images.
    aspect_ratio (str): The desired aspect ratio for the generated images (e.g., '1:1', '16:9').
    enhance_prompt (bool): Whether to enhance the prompt for better image quality.
    guidance_scale (float): Controls how closely the image generation follows the prompt.
    http_options (dict): Optional HTTP client options.
    include_rai_reason (bool): Whether to include reasoning for safety attributes.
    include_safety_attributes (bool): Whether to include safety attributes in the response.
    language (str): The language for the prompt and generated content.
    negative_prompt (str): A prompt describing what to avoid in the generated image.
    number_of_images (int): The number of images to generate.
    output_compression_quality (int): Compression quality for output images (0-100).
    output_gcs_uri (str): Google Cloud Storage URI for saving generated images.
    output_mime_type (str): MIME type for the output images (e.g., 'image/png').
    person_generation (str): Configuration for person generation (e.g., 'PERSON_GENERATION_ENABLED').
    safety_filter_level (str): The level of safety filtering to apply.
    seed (int): A seed for reproducible image generation.
```

----------------------------------------

TITLE: CreateTuningJobConfig API
DESCRIPTION: Configuration parameters for creating a model tuning job. Specifies training parameters, dataset details, and model naming.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_136

LANGUAGE: APIDOC
CODE:
```
CreateTuningJobConfig:
  adapter_size: The size of the adapter to use for tuning.
  batch_size: The batch size for training steps.
  description: A user-provided description for the tuning job.
  epoch_count: The number of training epochs.
  export_last_checkpoint_only: If true, only the last checkpoint is exported.
  http_options: Optional HTTP client options.
  learning_rate: The learning rate for the optimizer.
  learning_rate_multiplier: Multiplier for the learning rate.
  tuned_model_display_name: The display name for the tuned model.
  validation_dataset: The dataset to use for validation.
```

----------------------------------------

TITLE: Generate Image using Gemini API
DESCRIPTION: Demonstrates how to generate images using the Gemini API with a specified model and prompt. This functionality requires the `google-generativeai` library and is currently behind an allowlist. The output can be configured with parameters like `number_of_images` and `output_mime_type`.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_42

LANGUAGE: python
CODE:
```
from google.genai import types

# Generate Image
response1 = client.models.generate_images(
    model='imagen-3.0-generate-002',
    prompt='An umbrella in the foreground, and a rainy night sky in the background',
    config=types.GenerateImagesConfig(
        number_of_images=1,
        include_rai_reason=True,
        output_mime_type='image/jpeg',
    ),
)
response1.generated_images[0].image.show()
```

----------------------------------------

TITLE: genai.types.CitationDict
DESCRIPTION: API documentation for the CitationDict type, representing citation information.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_81

LANGUAGE: APIDOC
CODE:
```
genai.types.CitationDict (class)
  - Represents a single citation reference.
```

----------------------------------------

TITLE: GenAI Video Generation Configuration API
DESCRIPTION: Defines configuration options for generating videos using the GenAI API. This includes parameters for aspect ratio, duration, FPS, quality, and advanced settings like negative prompts and seeds.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_220

LANGUAGE: APIDOC
CODE:
```
GenerateVideosConfig:
  resolution: The desired resolution for the generated videos (e.g., '1080p').
  seed: An optional seed for reproducible video generation.

GenerateVideosConfigDict:
  aspect_ratio: The aspect ratio of the generated videos (e.g., '16:9').
  compression_quality: The compression quality for the video output (integer between 0 and 100).
  duration_seconds: The duration of the generated videos in seconds.
  enhance_prompt: Boolean flag to enhance the input prompt for better results.
  fps: Frames per second for the generated video.
  generate_audio: Boolean flag to indicate if audio should be generated.
  http_options: Optional HTTP client options.
  last_frame: Optional URL or data for the last frame of the video.
  negative_prompt: A prompt describing what to avoid in the generated video.
  number_of_videos: The number of videos to generate.
  output_gcs_uri: Google Cloud Storage URI for saving the generated videos.
  person_generation: Configuration for person generation within the video.
  pubsub_topic: Pub/Sub topic for receiving notifications about video generation progress.
  resolution: The desired resolution for the generated videos (e.g., '1080p').
  seed: An optional seed for reproducible video generation.
```

----------------------------------------

TITLE: LiveClientSetupDict API Reference
DESCRIPTION: Defines the dictionary representation for live client setup configuration, including context window compression and generation settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_286

LANGUAGE: APIDOC
CODE:
```
LiveClientSetupDict:
  context_window_compression: Configuration for context window compression.
  generation_config: Settings for model generation.
  input_audio_transcription: Configuration for input audio transcription.
  model: Specifies the model to be used.
  output_audio_transcription: Configuration for output audio transcription.
  proactivity: Controls the proactivity level of the client.
  session_resumption: Configuration for session resumption.
  system_instruction: Sets the system instruction for the model.
  tools: Specifies the tools available to the model.
```

----------------------------------------

TITLE: FunctionResponse and FunctionResponseDict API
DESCRIPTION: API reference for `FunctionResponse` and `FunctionResponseDict`, used to provide the output of a function call back to the model. Includes attributes like `id`, `name`, `response`, and `scheduling`.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_113

LANGUAGE: APIDOC
CODE:
```
FunctionResponse:
  Represents the output of a function call.
  Attributes:
    id (str): The unique identifier for the function call response.
    name (str): The name of the function that was called.
    response (dict | str | None): The result of the function execution.
    scheduling (str | None): Information about scheduling the next step.
    will_continue (bool | None): Indicates if the conversation will continue after this response.
  Methods:
    from_mcp_response(response):
      Creates a FunctionResponse from an MCP response object.

FunctionResponseDict:
  A dictionary representation of FunctionResponse.
  Attributes:
    id (str): The unique identifier for the function call response.
    name (str): The name of the function that was called.
    response (dict | str | None): The result of the function execution.
    scheduling (str | None): Information about scheduling the next step.
```

----------------------------------------

TITLE: Create Gen AI Client for Vertex AI (Python)
DESCRIPTION: Creates a client instance for the Gemini API within Vertex AI. Requires project ID and location.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_3

LANGUAGE: python
CODE:
```
client = genai.Client(
    vertexai=True, project='your-project-id', location='us-central1'
)
```

----------------------------------------

TITLE: ExternalApi and related types
DESCRIPTION: Defines structures for configuring external API interactions, including search parameters and endpoint details. Includes both class and dictionary representations for flexibility.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_184

LANGUAGE: APIDOC
CODE:
```
ExternalApi:
  elastic_search_params: Configuration for Elasticsearch-based searches.
  endpoint: The URL or identifier for the external API endpoint.
  simple_search_params: Configuration for simple search queries.

ExternalApiDict:
  api_auth: Authentication details for the API.
  api_spec: Specification of the API's contract.
  auth_config: Configuration related to authentication.
  elastic_search_params: Dictionary representation of Elasticsearch search parameters.
  endpoint: Dictionary representation of the API endpoint.
  simple_search_params: Dictionary representation of simple search parameters.

ExternalApiElasticSearchParams:
  index: The Elasticsearch index to search.
  num_hits: The maximum number of hits to return.
  search_template: A template for the Elasticsearch query.

ExternalApiElasticSearchParamsDict:
  index: Dictionary representation of the Elasticsearch index.
  num_hits: Dictionary representation of the number of hits.
  search_template: Dictionary representation of the search template.

ExternalApiSimpleSearchParams:
  (No specific attributes detailed in provided text)

ExternalApiSimpleSearchParamsDict:
  (No specific attributes detailed in provided text)
```

----------------------------------------

TITLE: LiveMusicServerMessageDict API
DESCRIPTION: Dictionary representation of server messages, facilitating data handling and interoperability.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_306

LANGUAGE: APIDOC
CODE:
```
LiveMusicServerMessageDict:
  filtered_prompt: LiveMusicFilteredPromptDict | None
    Description: Information about a filtered prompt, if applicable.
  server_content: LiveMusicServerContentDict | None
    Description: The actual generated content from the server, such as audio.
  setup_complete: bool
    Description: Indicates whether the initial server setup is complete.
```

----------------------------------------

TITLE: Generate Videos
DESCRIPTION: Details the process for generating videos using the Gemini API. Support for video generation is behind an allowlist for both Vertex AI and the Gemini Developer API.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_57

LANGUAGE: python
CODE:
```
from google.genai import types

# Create operation
```

----------------------------------------

TITLE: genai.types.ApiAuthApiKeyConfig
DESCRIPTION: Specific configuration for API key authentication.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_25

LANGUAGE: APIDOC
CODE:
```
genai.types.ApiAuthApiKeyConfig:
  Configuration for API key authentication.
  Attributes:
    api_key_secret_version: The version of the API key secret.
      (Type and constraints not specified in source text.)
    api_key_string: The API key itself.
      (Type and constraints not specified in source text.)

genai.types.ApiAuthApiKeyConfigDict:
  Dictionary representation of ApiAuthApiKeyConfig.
  Attributes:
    api_key_secret_version: The version of the API key secret.
      (Type and constraints not specified in source text.)
    api_key_string: The API key itself.
      (Type and constraints not specified in source text.)
```

----------------------------------------

TITLE: LiveMusicFilteredPromptDict API
DESCRIPTION: Documentation for LiveMusicFilteredPromptDict, offering dictionary access to filtered music prompt details.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_206

LANGUAGE: APIDOC
CODE:
```
LiveMusicFilteredPromptDict:
  filtered_reason: The reason why the prompt was filtered.
  text: The original text of the prompt.
```

----------------------------------------

TITLE: LiveMusicServerContentDict API
DESCRIPTION: Dictionary representation of server content, used for data exchange and serialization.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_304

LANGUAGE: APIDOC
CODE:
```
LiveMusicServerContentDict:
  audio_chunks: list[bytes]
    Description: A list of byte chunks representing audio data.
```

----------------------------------------

TITLE: HttpOptions and HttpOptionsDict
DESCRIPTION: Configuration options for making HTTP requests to the Generative AI API. These include base URL, headers, timeouts, and retry logic.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_162

LANGUAGE: APIDOC
CODE:
```
HttpOptions:
  Configuration for HTTP requests.
  Attributes:
    - api_version (str, optional): The API version to use.
    - base_url (str, optional): The base URL for API endpoints.
    - headers (dict, optional): Custom headers to include in requests.
    - client_args (dict, optional): Arguments to pass to the underlying HTTP client (e.g., requests.Session).
    - async_client_args (dict, optional): Arguments for the async HTTP client.
    - timeout (float, optional): Request timeout in seconds.
    - retry_options (dict, optional): Options for request retries.
    - extra_body (dict, optional): Additional data to include in the request body.

HttpOptionsDict:
  A dictionary representation of HttpOptions.
  Attributes:
    - api_version (str, optional): The API version to use.
    - base_url (str, optional): The base URL for API endpoints.
    - headers (dict, optional): Custom headers to include in requests.
    - client_args (dict, optional): Arguments to pass to the underlying HTTP client.
    - async_client_args (dict, optional): Arguments for the async HTTP client.
    - timeout (float, optional): Request timeout in seconds.
    - retry_options (dict, optional): Options for request retries.
    - extra_body (dict, optional): Additional data to include in the request body.
```

----------------------------------------

TITLE: genai.types.CandidateDict
DESCRIPTION: API documentation for the CandidateDict type, representing a candidate response from the model.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_69

LANGUAGE: APIDOC
CODE:
```
genai.types.CandidateDict (class)
  - Represents a model-generated candidate response.
```

----------------------------------------

TITLE: genai.types.LiveSendRealtimeInputParameters Attributes
DESCRIPTION: Documentation for parameters related to sending real-time input for live clients.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_3

LANGUAGE: APIDOC
CODE:
```
genai.types.LiveSendRealtimeInputParameters:
  activity_end: int
    Timestamp indicating the end of an activity.
  activity_start: int
    Timestamp indicating the start of an activity.
```

LANGUAGE: APIDOC
CODE:
```
genai.types.LiveSendRealtimeInputParametersDict:
  activity_end: int
    Timestamp indicating the end of an activity.
  activity_start: int
    Timestamp indicating the start of an activity.
```

----------------------------------------

TITLE: GenerateImagesConfig API
DESCRIPTION: Configuration options for generating images using the Generative AI API. This object allows customization of various aspects of the image generation process, including watermarking, aspect ratio, prompt enhancement, and safety features.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_216

LANGUAGE: APIDOC
CODE:
```
GenerateImagesConfig:
  Attributes:
    - add_watermark: Boolean to add a watermark to the generated images.
    - aspect_ratio: The desired aspect ratio for the generated images (e.g., '1:1', '16:9').
    - enhance_prompt: Boolean to enhance the prompt for better image quality.
    - guidance_scale: Controls how much the generation follows the prompt (higher values mean stronger adherence).
    - http_options: Optional HTTP client options for the request.
    - include_rai_reason: Boolean to include reasoning for Responsible AI attributes.
    - include_safety_attributes: Boolean to include safety attributes in the response.
    - language: The language for the generated content or prompts.
    - negative_prompt: Text describing what to exclude from the generated images.
    - number_of_images: The number of images to generate (typically 1-4).
```

----------------------------------------

TITLE: Upload and Get File
DESCRIPTION: Demonstrates uploading a file and then retrieving its information using the client's file operations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_63

LANGUAGE: python
CODE:
```
file1 = client.files.upload(file='2312.11805v3.pdf')
file_info = client.files.get(name=file1.name)
```

----------------------------------------

TITLE: LiveMusicGenerationConfigDict API
DESCRIPTION: Documentation for LiveMusicGenerationConfigDict, providing dictionary access to music generation configuration parameters.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_208

LANGUAGE: APIDOC
CODE:
```
LiveMusicGenerationConfigDict:
  bpm: Beats per minute for the generated music.
  brightness: Controls the brightness or intensity of the music.
  density: Affects the density or complexity of the musical elements.
  guidance: Guidance scale for the music generation process.
  mute_bass: Boolean flag to mute the bass track.
  mute_drums: Boolean flag to mute the drums track.
  only_bass_and_drums: Boolean flag to generate only bass and drums.
  scale: Musical scale to use for generation.
  seed: Seed for random number generation to ensure reproducibility.
  temperature: Controls the randomness of the generated music.
  top_k: Top-K sampling parameter for controlling token selection.
```

----------------------------------------

TITLE: genai.types.LogprobsResult Attributes
DESCRIPTION: API documentation for LogprobsResult attributes, including chosen candidates.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_79

LANGUAGE: APIDOC
CODE:
```
genai.types.LogprobsResult.chosen_candidates (attribute)
  - The candidates selected by the model.
  - Related: genai.types.LogprobsResultDict.chosen_candidates
```

----------------------------------------

TITLE: Tool and ToolDict Definitions
DESCRIPTION: Outlines the various tools available for use, such as code execution, search, and maps.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_337

LANGUAGE: APIDOC
CODE:
```
Tool:
  code_execution: Configuration for code execution tool.
  computer_use: Configuration for computer use tool.
  enterprise_web_search: Configuration for enterprise web search tool.
  function_declarations: Declarations for functions the tool can call.
  google_maps: Configuration for Google Maps tool.
  google_search: Configuration for Google Search tool.
  google_search_retrieval: Configuration for Google Search retrieval tool.
  retrieval: Configuration for retrieval tool.
  url_context: Configuration for URL context tool.
```

LANGUAGE: APIDOC
CODE:
```
ToolDict:
  code_execution: Configuration for code execution tool.
  computer_use: Configuration for computer use tool.
  enterprise_web_search: Configuration for enterprise web search tool.
  function_declarations: Declarations for functions the tool can call.
  google_maps: Configuration for Google Maps tool.
  google_search: Configuration for Google Search tool.
  google_search_retrieval: Configuration for Google Search retrieval tool.
  retrieval: Configuration for retrieval tool.
  url_context: Configuration for URL context tool.
```

----------------------------------------

TITLE: Configure Gemini API Key via Env Var (Shell)
DESCRIPTION: Sets the GOOGLE_API_KEY environment variable for the Gemini Developer API. This allows client creation without passing the key directly.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_4

LANGUAGE: shell
CODE:
```
export GOOGLE_API_KEY='your-api-key'
```

----------------------------------------

TITLE: HttpResponse Type
DESCRIPTION: Represents a standard HTTP response from the API.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_247

LANGUAGE: APIDOC
CODE:
```
HttpResponse:
  - body: dict
  - headers: dict
```

----------------------------------------

TITLE: ProactivityConfig API
DESCRIPTION: Configuration for proactive features, such as proactive audio.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_349

LANGUAGE: APIDOC
CODE:
```
ProactivityConfig:
  proactive_audio: bool
    Enables or disables proactive audio features.
```

----------------------------------------

TITLE: genai.types.CheckpointDict
DESCRIPTION: API documentation for the CheckpointDict type, representing a model checkpoint.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_77

LANGUAGE: APIDOC
CODE:
```
genai.types.CheckpointDict (class)
  - Represents a model checkpoint configuration or status.
```

----------------------------------------

TITLE: genai.types.Model Attributes
DESCRIPTION: API documentation for model attributes, including available checkpoints.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_78

LANGUAGE: APIDOC
CODE:
```
genai.types.Model.checkpoints (attribute)
  - A list of available checkpoints for the model.
  - Related: genai.types.ModelDict.checkpoints, genai.types.TunedModel.checkpoints, genai.types.TunedModelDict.checkpoints
```

----------------------------------------

TITLE: FunctionCall and FunctionCallDict API
DESCRIPTION: Documentation for `FunctionCall` and `FunctionCallDict` types, representing a function call made by the model. Includes attributes like `id`, `name`, and `args`.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_109

LANGUAGE: APIDOC
CODE:
```
FunctionCall:
  Represents a function call made by the model.
  Attributes:
    id (str): The unique identifier for the function call.
    name (str): The name of the function to be called.
    args (dict): A dictionary of arguments for the function call.

FunctionCallDict:
  A dictionary representation of FunctionCall.
  Attributes:
    id (str): The unique identifier for the function call.
    name (str): The name of the function to be called.
    args (dict): A dictionary of arguments for the function call.
```

----------------------------------------

TITLE: genai.chats.Chat Class
DESCRIPTION: API documentation for the Chat class, used for managing conversational interactions with the model.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_73

LANGUAGE: APIDOC
CODE:
```
genai.chats.Chat (class)
  - Manages conversational history and interactions.
```

----------------------------------------

TITLE: Upscale Image using Gemini API
DESCRIPTION: Shows how to upscale a previously generated image using the Gemini API. This feature is supported in Vertex AI and requires the `google-generativeai` library. It takes the model, the image to upscale, and the desired `upscale_factor` as input.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_43

LANGUAGE: python
CODE:
```
from google.genai import types

# Upscale the generated image from above
response2 = client.models.upscale_image(
    model='imagen-3.0-generate-002',
    image=response1.generated_images[0].image,
    upscale_factor='x2',
    config=types.UpscaleImageConfig(
        include_rai_reason=True,
        output_mime_type='image/jpeg',
    ),
)
response2.generated_images[0].image.show()
```

----------------------------------------

TITLE: LiveMusic Client Setup
DESCRIPTION: Specifies setup parameters for the Live Music client, including model selection.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_296

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientSetup:
  model: The music generation model to use.
```

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientSetupDict:
  model: The music generation model to use.
```

----------------------------------------

TITLE: SupervisedTuningDatasetDistribution API
DESCRIPTION: Details the data structure for dataset distribution statistics in supervised tuning, including token distribution and bucket information.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_388

LANGUAGE: APIDOC
CODE:
```
SupervisedTuningDatasetDistribution:
  Represents statistical distribution of a dataset for supervised tuning.
  Attributes:
    billable_sum (int): Sum of billable tokens.
    buckets (list[SupervisedTuningDatasetDistributionDatasetBucket]): Buckets for token distribution.
    max (float): Maximum value in the distribution.
    mean (float): Mean value in the distribution.
    median (float): Median value in the distribution.
    min (float): Minimum value in the distribution.
    p5 (float): 5th percentile value.
    p95 (float): 95th percentile value.
    sum (int): Sum of tokens.

SupervisedTuningDatasetDistributionDatasetBucket:
  Represents a bucket in the token distribution.
  Attributes:
    count (int): Number of items in this bucket.
    left (float): Lower bound of the bucket.
    right (float): Upper bound of the bucket.

SupervisedTuningDatasetDistributionDict:
  Dictionary representation of SupervisedTuningDatasetDistribution.
  Attributes:
    billable_sum (int): Sum of billable tokens.
    buckets (list[SupervisedTuningDatasetDistributionDatasetBucketDict]): Buckets for token distribution.
    max (float): Maximum value in the distribution.
    mean (float): Mean value in the distribution.
    median (float): Median value in the distribution.
    min (float): Minimum value in the distribution.
    p5 (float): 5th percentile value.
    p95 (float): 95th percentile value.
    sum (int): Sum of tokens.

SupervisedTuningDatasetDistributionDatasetBucketDict:
  Dictionary representation of SupervisedTuningDatasetDistributionDatasetBucket.
  Attributes:
    count (int): Number of items in this bucket.
    left (float): Lower bound of the bucket.
    right (float): Upper bound of the bucket.

SupervisedTuningDataStatsDict.user_output_token_distribution:
  Represents the token distribution for user output.
  Type: SupervisedTuningDatasetDistributionDict
```

----------------------------------------

TITLE: List Available Models (Synchronous)
DESCRIPTION: Demonstrates how to iterate through available models using the synchronous `client.models.list()` method. Includes an example of paginating results.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_31

LANGUAGE: python
CODE:
```
for model in client.models.list():
    print(model)
```

LANGUAGE: python
CODE:
```
pager = client.models.list(config={'page_size': 10})
print(pager.page_size)
print(pager[0])
pager.next_page()
print(pager[0])
```

----------------------------------------

TITLE: Configure Gemini API Key via Environment Variable
DESCRIPTION: Sets the GOOGLE_API_KEY environment variable for the Gemini Developer API. The SDK can automatically pick this up when initializing the client.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_4

LANGUAGE: bash
CODE:
```
export GOOGLE_API_KEY='your-api-key'
```

----------------------------------------

TITLE: GenAI ExternalApi Configuration
DESCRIPTION: Documentation for ExternalApi and its dictionary representation, covering various parameters for configuring external API calls, including authentication, specifications, and search parameters.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_96

LANGUAGE: APIDOC
CODE:
```
ExternalApi:
  api_auth: object
    Authentication details for the external API.
  api_spec: object
    Specification details for the external API.
  auth_config: object
    Configuration for authentication.
  elastic_search_params: ExternalApiElasticSearchParams
    Parameters for Elasticsearch queries.
  endpoint: string
    The URL endpoint for the external API.
  simple_search_params: ExternalApiSimpleSearchParams
    Parameters for simple search queries.

ExternalApiDict:
  api_auth: object
    Authentication details for the external API.
  api_spec: object
    Specification details for the external API.
  auth_config: object
    Configuration for authentication.
  elastic_search_params: ExternalApiElasticSearchParamsDict
    Parameters for Elasticsearch queries.
  endpoint: string
    The URL endpoint for the external API.
  simple_search_params: ExternalApiSimpleSearchParamsDict
    Parameters for simple search queries.
```

----------------------------------------

TITLE: FunctionCallingConfigMode API
DESCRIPTION: Enumeration for `FunctionCallingConfigMode`, defining the behavior of function calling.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_111

LANGUAGE: APIDOC
CODE:
```
FunctionCallingConfigMode:
  Defines the mode for function calling.
  Members:
    ANY: Allows any function to be called.
    AUTO: Automatically determines whether to call a function.
    MODE_UNSPECIFIED: The function calling mode is not specified.
    NONE: Disables function calling.
```

----------------------------------------

TITLE: LiveClientToolResponseDict API Reference
DESCRIPTION: Defines the dictionary representation for tool responses, detailing function call outcomes.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_288

LANGUAGE: APIDOC
CODE:
```
LiveClientToolResponseDict:
  function_responses: A list of responses from executed functions.
```

----------------------------------------

TITLE: Modality Enum API
DESCRIPTION: Enumeration defining the core modalities for content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_248

LANGUAGE: APIDOC
CODE:
```
Modality:
  AUDIO: str
    Description: Represents audio content.
  IMAGE: str
    Description: Represents image content.
  MODALITY_UNSPECIFIED: str
    Description: Unspecified modality.
  TEXT: str
    Description: Represents text content.
```

----------------------------------------

TITLE: List Available Models (Asynchronous)
DESCRIPTION: Shows how to list available models asynchronously using `client.aio.models.list()`. Includes examples of iterating through async results and paginating.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_32

LANGUAGE: python
CODE:
```
async for job in await client.aio.models.list():
    print(job)
```

LANGUAGE: python
CODE:
```
async_pager = await client.aio.models.list(config={'page_size': 10})
print(async_pager.page_size)
print(async_pager[0])
await async_pager.next_page()
print(async_pager[0])
```

----------------------------------------

TITLE: genai.types.HttpOptions Attributes
DESCRIPTION: Details attributes for HttpOptions, including base_url for configuring the base URL for API requests.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_35

LANGUAGE: APIDOC
CODE:
```
genai.types.HttpOptions.base_url
  - Description: The base URL for API requests.
  - Related: genai.types.HttpOptionsDict.base_url
```

----------------------------------------

TITLE: PersonGeneration API
DESCRIPTION: Configuration options for controlling person generation, specifying allowed content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_347

LANGUAGE: APIDOC
CODE:
```
PersonGeneration:
  ALLOW_ADULT: int
    Enum value allowing adult content.
  ALLOW_ALL: int
    Enum value allowing all content types.
  DONT_ALLOW: int
    Enum value disallowing content.
```

----------------------------------------

TITLE: DownloadFileConfig API
DESCRIPTION: Details the DownloadFileConfig type and its 'http_options' attribute within the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_159

LANGUAGE: APIDOC
CODE:
```
DownloadFileConfig:
  http_options: object
    HTTP options for downloading the file.
```

----------------------------------------

TITLE: genai.types.LiveClientRealtimeInput Attributes
DESCRIPTION: Documentation for attributes related to real-time input for live clients.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_2

LANGUAGE: APIDOC
CODE:
```
genai.types.LiveClientRealtimeInput:
  activity_end: int
    Timestamp indicating the end of an activity.
  activity_start: int
    Timestamp indicating the start of an activity.
```

LANGUAGE: APIDOC
CODE:
```
genai.types.LiveClientRealtimeInputDict:
  activity_end: int
    Timestamp indicating the end of an activity.
  activity_start: int
    Timestamp indicating the start of an activity.
```

----------------------------------------

TITLE: LiveConnectConfig API Reference
DESCRIPTION: Configuration options for establishing a live connection, including media, audio, and generation settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_289

LANGUAGE: APIDOC
CODE:
```
LiveConnectConfig:
  context_window_compression: Configuration for context window compression.
  enable_affective_dialog: Enables or disables affective dialog features.
  generation_config: Settings for model generation.
  http_options: HTTP client configuration options.
  input_audio_transcription: Configuration for input audio transcription.
  max_output_tokens: Maximum number of tokens for the output.
  media_resolution: Specifies the resolution for media processing.
  output_audio_transcription: Configuration for output audio transcription.
  proactivity: Controls the proactivity level of the client.
  realtime_input_config: Configuration for real-time input.
  response_modalities: Specifies the allowed response modalities.
  seed: Seed for random number generation.
  session_resumption: Configuration for session resumption.
  speech_config: Configuration for speech processing.
  system_instruction: Sets the system instruction for the model.
  temperature: Controls the randomness of predictions.
  tools: Specifies the tools available to the model.
  top_k: Top-K sampling parameter.
  top_p: Top-P (nucleus) sampling parameter.
```

----------------------------------------

TITLE: GenAI Search and SDK Response Attributes
DESCRIPTION: Documentation for attributes related to search entry points, SDK HTTP responses, and response segments within the genai library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_317

LANGUAGE: APIDOC
CODE:
```
genai.types.SearchEntryPoint.sdk_blob
  - Description: Blob data associated with a search entry point.
  - Related: genai.types.SearchEntryPointDict.sdk_blob

genai.types.SearchEntryPointDict.sdk_blob
  - Description: Dictionary representation of the blob data for a search entry point.

genai.types.CreateFileResponse.sdk_http_response
  - Description: The underlying HTTP response object from the SDK for file creation.
  - Related: genai.types.CreateFileResponseDict.sdk_http_response, genai.types.GenerateContentResponse.sdk_http_response, genai.types.GenerateContentResponseDict.sdk_http_response

genai.types.GenerateContentResponse.sdk_http_response
  - Description: The underlying HTTP response object from the SDK for content generation.

genai.types.ReplayResponse.sdk_response_segments
  - Description: Segments of the SDK response for replay operations.
  - Related: genai.types.ReplayResponseDict.sdk_response_segments

genai.types.ReplayResponseDict.sdk_response_segments
  - Description: Dictionary representation of SDK response segments for replay.

genai.types.GroundingMetadata.search_entry_point
  - Description: The search entry point associated with grounding metadata.
  - Related: genai.types.GroundingMetadataDict.search_entry_point

genai.types.GroundingMetadataDict.search_entry_point
  - Description: Dictionary representation of the search entry point for grounding metadata.

genai.types.ExternalApiElasticSearchParams.search_template
  - Description: The search template used for external API Elasticsearch parameters.
  - Related: genai.types.ExternalApiElasticSearchParamsDict.search_template

genai.types.ExternalApiElasticSearchParamsDict.search_template
  - Description: Dictionary representation of the search template for Elasticsearch parameters.
```

----------------------------------------

TITLE: genai.chats.Chats Class
DESCRIPTION: API documentation for the Chats class, likely a factory or manager for Chat instances.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_74

LANGUAGE: APIDOC
CODE:
```
genai.chats.Chats (class)
  - Provides methods for managing multiple chat sessions.
```

----------------------------------------

TITLE: HttpOptions Type
DESCRIPTION: Configuration options for customizing HTTP client behavior.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_245

LANGUAGE: APIDOC
CODE:
```
HttpOptions:
  - api_version: str
  - async_client_args: dict
  - base_url: str
  - client_args: dict
  - extra_body: dict
  - headers: dict
  - retry_options: HttpRetryOptions
  - timeout: int
```

----------------------------------------

TITLE: genai.types.GenerateContentConfig Attributes
DESCRIPTION: API documentation for attributes related to content generation configuration, including candidate count.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_68

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerateContentConfig.candidate_count (attribute)
  - The number of candidates to generate.
  - Related: genai.types.GenerateContentConfigDict.candidate_count, genai.types.GenerationConfig.candidate_count, genai.types.GenerationConfigDict.candidate_count
```

----------------------------------------

TITLE: Scale API
DESCRIPTION: Enumerates musical scales, providing predefined options for scale selection in music-related functionalities.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_298

LANGUAGE: APIDOC
CODE:
```
Scale:
  Enumerates musical scales.
  Members:
    SCALE_UNSPECIFIED: Default, unspecified scale.
    C_MAJOR_A_MINOR: C Major / A Minor scale.
    G_MAJOR_E_MINOR: G Major / E Minor scale.
    D_MAJOR_B_MINOR: D Major / B Minor scale.
    A_MAJOR_G_FLAT_MINOR: A Major / G# Minor scale.
    E_MAJOR_D_FLAT_MINOR: E Major / D# Minor scale.
    B_MAJOR_A_FLAT_MINOR: B Major / A# Minor scale.
    F_MAJOR_D_MINOR: F Major / D Minor scale.
    C_SHARP_MAJOR_A_SHARP_MINOR: C# Major / A# Minor scale.
    G_FLAT_MAJOR_E_FLAT_MINOR: Gb Major / Eb Minor scale.
    D_FLAT_MAJOR_B_FLAT_MINOR: Db Major / Bb Minor scale.
    A_FLAT_MAJOR_F_MINOR: Ab Major / F Minor scale.
    E_FLAT_MAJOR_C_MINOR: Eb Major / C Minor scale.
    B_FLAT_MAJOR_G_MINOR: Bb Major / G Minor scale.
```

----------------------------------------

TITLE: Tuning Method
DESCRIPTION: Provides documentation for the `tune` method used for model tuning operations, available for both asynchronous and synchronous tuning interfaces.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_360

LANGUAGE: APIDOC
CODE:
```
genai.tunings.AsyncTunings.tune()
  - Description: Initiates the asynchronous tuning process for a model.
  - Parameters: (Specific parameters depend on the tuning type and configuration)
  - Returns: An object representing the tuning job status.

genai.tunings.Tunings.tune()
  - Description: Initiates the synchronous tuning process for a model.
  - Parameters: (Specific parameters depend on the tuning type and configuration)
  - Returns: An object representing the tuning job status.
```

----------------------------------------

TITLE: DownloadFileConfigDict API
DESCRIPTION: Details the DownloadFileConfigDict type and its 'http_options' attribute within the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_160

LANGUAGE: APIDOC
CODE:
```
DownloadFileConfigDict:
  http_options: object
    HTTP options for downloading the file.
```

----------------------------------------

TITLE: genai.chats Module Methods
DESCRIPTION: API methods for interacting with chat sessions, including sending messages, streaming responses, and creating chat instances.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_4

LANGUAGE: APIDOC
CODE:
```
AsyncChat:
  send_message(message):
    Sends a message to the chat and returns the response.
  send_message_stream(message):
    Sends a message to the chat and streams the response.

AsyncChats:
  create():
    Creates a new asynchronous chat session.

Chat:
  send_message(message):
    Sends a message to the chat and returns the response.
  send_message_stream(message):
    Sends a message to the chat and streams the response.

Chats:
  create():
    Creates a new chat session.
```

----------------------------------------

TITLE: GenAI Library Upload Methods
DESCRIPTION: Documentation for the 'upload' method in the genai.files module. This method is used for uploading files, likely for use with generative AI models.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_368

LANGUAGE: APIDOC
CODE:
```
genai.files.AsyncFiles.upload()
  - Asynchronously uploads a file.

genai.files.Files.upload()
  - Synchronously uploads a file.

These methods typically accept file paths or file-like objects and configuration parameters for the upload. They return information about the uploaded file, such as its ID or URI.
```

----------------------------------------

TITLE: FunctionResponseDict API
DESCRIPTION: A dictionary representation of FunctionResponse, used for serialization or data exchange.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_203

LANGUAGE: APIDOC
CODE:
```
FunctionResponseDict:
  id: str
  name: str
  response: Dict[str, Any]
  scheduling: Optional[FunctionResponseScheduling]
  will_continue: bool
```

----------------------------------------

TITLE: RagRetrievalConfigRankingRankService API
DESCRIPTION: Configuration for a dedicated ranking service in RAG, specifying the model name.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_288

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigRankingRankService:
  model_name: The name of the model for the ranking service.
```

----------------------------------------

TITLE: RagRetrievalConfigFilterDict API
DESCRIPTION: Dictionary representation for RAG retrieval filtering, mirroring RagRetrievalConfigFilter.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_281

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigFilterDict:
  metadata_filter: A filter for metadata.
  vector_distance_threshold: The threshold for vector distance.
  vector_similarity_threshold: The threshold for vector similarity.
```

----------------------------------------

TITLE: LiveServerContent API Reference
DESCRIPTION: Represents content received from the live server. It includes transcription, generation status, and grounding metadata.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_219

LANGUAGE: APIDOC
CODE:
```
LiveServerContent:
  generation_complete: Optional[bool]
    Indicates if the generation process is complete.
  grounding_metadata: Optional[Any]
    Metadata related to grounding the response.
  input_transcription: Optional[str]
    The transcribed input from the user.
  interrupted: Optional[bool]
    Indicates if the generation was interrupted.
  model_turn: Optional[bool]
    Indicates if this content is part of the model's turn.
  output_transcription: Optional[str]
    The transcribed output from the model.
  turn_complete: Optional[bool]
    Indicates if the current turn is complete.
  url_context_metadata: Optional[Any]
    Metadata related to URL context.
```

----------------------------------------

TITLE: TuningDataset Attributes
DESCRIPTION: Details the attributes for TuningDataset, used to define datasets for model tuning, including examples and source URIs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_405

LANGUAGE: APIDOC
CODE:
```
TuningDataset:
  examples: A list of tuning examples.
  gcs_uri: Google Cloud Storage URI for the dataset.
  vertex_dataset_resource: Resource name of the Vertex AI dataset.

TuningDatasetDict:
  examples: A list of tuning examples (dictionary representation).
  gcs_uri: Google Cloud Storage URI for the dataset (dictionary representation).
  vertex_dataset_resource: Resource name of the Vertex AI dataset (dictionary representation).
```

----------------------------------------

TITLE: genai.types.ActivityStartDict
DESCRIPTION: Represents the structure for activity start events within the genai library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_9

LANGUAGE: APIDOC
CODE:
```
genai.types.ActivityStartDict:
  A dictionary representing the start of an activity.
  (Details on fields and types are not provided in the source text.)
```

----------------------------------------

TITLE: Edit Image using Gemini API
DESCRIPTION: Illustrates how to edit an image using the Gemini API with a prompt and reference images, including mask-based editing. This functionality is supported in Vertex AI and requires specific reference image types like `RawReferenceImage` and `MaskReferenceImage`. The `edit_mode` parameter controls the editing behavior.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_44

LANGUAGE: python
CODE:
```
from google.genai import types
from google.genai.types import RawReferenceImage, MaskReferenceImage

raw_ref_image = RawReferenceImage(
    reference_id=1,
    reference_image=response1.generated_images[0].image,
)

# Model computes a mask of the background
mask_ref_image = MaskReferenceImage(
    reference_id=2,
    config=types.MaskReferenceConfig(
        mask_mode='MASK_MODE_BACKGROUND',
        mask_dilation=0,
    ),
)

response3 = client.models.edit_image(
    model='imagen-3.0-capability-001',
    prompt='Sunlight and clear sky',
    reference_images=[raw_ref_image, mask_ref_image],
    config=types.EditImageConfig(
        edit_mode='EDIT_MODE_INPAINT_INSERTION',
        number_of_images=1,
        include_rai_reason=True,
        output_mime_type='image/jpeg',
    ),
)
response3.generated_images[0].image.show()
```

----------------------------------------

TITLE: PrebuiltVoiceConfig API
DESCRIPTION: Configuration for using a pre-built voice, specifying the voice name.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_348

LANGUAGE: APIDOC
CODE:
```
PrebuiltVoiceConfig:
  voice_name: str
    The name of the pre-built voice to use.
```

----------------------------------------

TITLE: RagRetrievalConfigRankingRankServiceDict API
DESCRIPTION: Dictionary representation for a dedicated ranking service in RAG, including the model name.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_289

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigRankingRankServiceDict:
  model_name: The name of the model for the ranking service.
```

----------------------------------------

TITLE: genai.types.SafetyAttributes Attributes
DESCRIPTION: API documentation for safety attributes, including categories and ratings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_71

LANGUAGE: APIDOC
CODE:
```
genai.types.SafetyAttributes.categories (attribute)
  - A list of safety categories and their ratings.
  - Related: genai.types.SafetyAttributesDict.categories
```

----------------------------------------

TITLE: File Upload
DESCRIPTION: Uploads files to the Gemini Developer API. This allows the model to process content from these files.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_64

LANGUAGE: python
CODE:
```
file1 = client.files.upload(file='2312.11805v3.pdf')
file2 = client.files.upload(file='2403.05530.pdf')

print(file1)
print(file2)
```

----------------------------------------

TITLE: Data Structures for Configuration and Dictionaries
DESCRIPTION: Documents various dictionary-like data structures used for configuring API requests and representing data payloads within the genai library. These include configurations for authentication, batch jobs, file uploads, and tuning jobs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_115

LANGUAGE: APIDOC
CODE:
```
CreateAuthTokenConfigDict (class in genai.types)
  - Dictionary for creating authentication token configurations.

CreateAuthTokenParametersDict (class in genai.types)
  - Dictionary for parameters related to creating authentication tokens.

CreateBatchJobConfigDict (class in genai.types)
  - Dictionary for configuring the creation of batch jobs.

CreateCachedContentConfigDict (class in genai.types)
  - Dictionary for configuring the creation of cached content.

CreateFileConfigDict (class in genai.types)
  - Dictionary for configuring file creation and upload.

CreateFileResponseDict (class in genai.types)
  - Dictionary representing the response after creating a file.

CreateTuningJobConfigDict (class in genai.types)
  - Dictionary for configuring the creation of tuning jobs.
```

----------------------------------------

TITLE: Tool Definitions
DESCRIPTION: Defines various tools that the model can utilize, such as code execution, web search, and map lookups. Includes specific configurations for each tool.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_395

LANGUAGE: APIDOC
CODE:
```
Tool:
  code_execution: ToolCodeExecution | None
    Configuration for code execution tool.
  computer_use: ToolComputerUse | None
    Configuration for computer use tool.
  enterprise_web_search: dict | None
    Configuration for enterprise web search.
  function_declarations: list[dict] | None
    Declarations for custom functions.
  google_maps: dict | None
    Configuration for Google Maps tool.
  google_search: dict | None
    Configuration for Google Search tool.
  google_search_retrieval: dict | None
    Configuration for Google Search retrieval tool.
  retrieval: dict | None
    Configuration for retrieval tool.
  url_context: dict | None
    Configuration for URL context tool.
```

LANGUAGE: APIDOC
CODE:
```
ToolCodeExecution:
  pass
    Placeholder for code execution tool configuration.
```

LANGUAGE: APIDOC
CODE:
```
ToolCodeExecutionDict:
  pass
    Placeholder for code execution tool configuration.
```

LANGUAGE: APIDOC
CODE:
```
ToolComputerUse:
  pass
    Placeholder for computer use tool configuration.
```

----------------------------------------

TITLE: LiveMusicServerContent API
DESCRIPTION: Represents content received from the live music server, primarily containing audio data.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_303

LANGUAGE: APIDOC
CODE:
```
LiveMusicServerContent:
  audio_chunks: list[bytes]
    Description: A list of byte chunks representing audio data.
```

----------------------------------------

TITLE: TuningExample Attributes
DESCRIPTION: Details the attributes for TuningExample, representing a single data point for model tuning.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_406

LANGUAGE: APIDOC
CODE:
```
TuningExample:
  output: The desired output for the given input.
  text_input: The input text for the tuning example.

TuningExampleDict:
  output: The desired output for the given input (dictionary representation).
  text_input: The input text for the tuning example (dictionary representation).
```

----------------------------------------

TITLE: ModalityTokenCountDict API
DESCRIPTION: Dictionary representation for modality token counts.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_250

LANGUAGE: APIDOC
CODE:
```
ModalityTokenCountDict:
  modality: Modality
    Description: The media modality.
  token_count: int
    Description: The number of tokens for the modality.
```

----------------------------------------

TITLE: LiveSendRealtimeInputParametersDict API Reference
DESCRIPTION: Defines the structure for parameters used when sending real-time input data. It includes fields for activity timing, audio, media, text, and video content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_218

LANGUAGE: APIDOC
CODE:
```
LiveSendRealtimeInputParametersDict:
  activity_end: Optional[float]
    Timestamp indicating the end of the activity.
  activity_start: Optional[float]
    Timestamp indicating the start of the activity.
  audio: Optional[bytes]
    Raw audio data to be sent.
  audio_stream_end: Optional[bool]
    Flag to indicate the end of an audio stream.
  media: Optional[bytes]
    Raw media data to be sent.
  text: Optional[str]
    Textual input to be sent.
  video: Optional[bytes]
    Raw video data to be sent.
```

----------------------------------------

TITLE: GenerateContentConfig API
DESCRIPTION: Configuration options for generating content, controlling aspects like candidate count, penalties, and caching.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_205

LANGUAGE: APIDOC
CODE:
```
GenerateContentConfig:
  audio_timestamp: Optional[int]
  automatic_function_calling: Optional[bool]
  cached_content: Optional[str]
  candidate_count: Optional[int]
  frequency_penalty: Optional[float]
  http_options: Optional[Dict[str, Any]]
  labels: Optional[Dict[str, str]]
```

----------------------------------------

TITLE: RagRetrievalConfigHybridSearch API
DESCRIPTION: Configuration for hybrid search in RAG, balancing keyword and vector search.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_354

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigHybridSearch:
  alpha: float
    The weighting factor for hybrid search (0.0 to 1.0).
```

----------------------------------------

TITLE: GenAI Live Interaction API
DESCRIPTION: Facilitates real-time, live interactions, including connecting to services, sending and receiving data, and managing streaming sessions. Primarily uses asynchronous patterns.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_75

LANGUAGE: APIDOC
CODE:
```
AsyncLive:
  connect(**kwargs)
    Establishes a connection to the live service.
    Returns: AsyncLive object.

  music
    Access to music-related live functionalities.

AsyncSession:
  send(data: bytes, **kwargs)
    Sends raw data over the live session.
    Parameters:
      data: The data payload to send.
    Returns: None.

  send_client_content(content: str, **kwargs)
    Sends client-generated content over the live session.
    Parameters:
      content: The content string to send.
    Returns: None.

  send_realtime_input(input_text: str, **kwargs)
    Sends real-time input text over the live session.
    Parameters:
      input_text: The real-time input.
    Returns: None.

  send_tool_response(response: str, **kwargs)
    Sends a response from a tool execution.
    Parameters:
      response: The tool response string.
    Returns: None.

  receive(**kwargs)
    Receives data from the live session.
    Returns: Data received from the session.

  start_stream(**kwargs)
    Starts a streaming session.
    Returns: None.

  close()
    Closes the live session.
    Returns: None.
```

----------------------------------------

TITLE: Text Generation Methods (genai.models)
DESCRIPTION: Provides methods for generating text content using Google's generative models. Supports both synchronous and asynchronous operations, including streaming responses.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_162

LANGUAGE: APIDOC
CODE:
```
genai.models.Models.generate_content(model_name: str, contents: Union[str, List[Union[str, Dict]]], generation_config: Optional[Dict] = None, safety_settings: Optional[Dict] = None, tools: Optional[List[Dict]] = None, stream: bool = False, **kwargs) -> Union[GenerateContentResponse, AsyncIterable[GenerateContentResponse]]
  - Generates text content from a prompt.
  - Parameters:
    - model_name: The name of the model to use (e.g., 'gemini-pro').
    - contents: The input prompt, which can be a string or a list of strings/dictionaries.
    - generation_config: Configuration options for generation (e.g., temperature, max_output_tokens).
    - safety_settings: Configuration for safety filters.
    - tools: List of tools the model can use.
    - stream: If True, returns an asynchronous iterator for streaming responses.
  - Returns: A GenerateContentResponse object or an async iterator for streamed responses.

genai.models.Models.generate_content_stream(model_name: str, contents: Union[str, List[Union[str, Dict]]], generation_config: Optional[Dict] = None, safety_settings: Optional[Dict] = None, tools: Optional[List[Dict]] = None, **kwargs) -> AsyncIterable[GenerateContentResponse]
  - Generates text content from a prompt in a streaming fashion.
  - Parameters:
    - model_name: The name of the model to use.
    - contents: The input prompt.
    - generation_config: Configuration options for generation.
    - safety_settings: Configuration for safety filters.
    - tools: List of tools the model can use.
  - Returns: An asynchronous iterator yielding GenerateContentResponse chunks.
```

----------------------------------------

TITLE: Mode Enum API
DESCRIPTION: Enumeration defining different operational modes.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_251

LANGUAGE: APIDOC
CODE:
```
Mode:
  MODE_DYNAMIC: int
    Description: Dynamic mode.
  MODE_UNSPECIFIED: int
    Description: Unspecified mode.
```

----------------------------------------

TITLE: List Tuning Jobs
DESCRIPTION: Provides examples for listing tuning jobs synchronously using the Google GenAI Python client. It includes iterating through a pager and accessing job information.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_63

LANGUAGE: python
CODE:
```
for job in client.tunings.list(config={'page_size': 10}):
    print(job)

pager = client.tunings.list(config={'page_size': 10})
print(pager.page_size)
print(pager[0])
pager.next_page()
print(pager[0])
```

----------------------------------------

TITLE: genai.types.ExternalApiElasticSearchParams Attributes
DESCRIPTION: Search parameters for Elastic Search within external APIs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_279

LANGUAGE: APIDOC
CODE:
```
ExternalApiElasticSearchParams:
  num_hits: The number of hits to return from the search.
```

----------------------------------------

TITLE: Interval Type
DESCRIPTION: Represents a time interval with start and end times.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_259

LANGUAGE: APIDOC
CODE:
```
Interval:
  end_time: The end time of the interval (datetime).
  start_time: The start time of the interval (datetime).
```

----------------------------------------

TITLE: genai.types FileStatus and GoogleRpcStatus Attributes
DESCRIPTION: Documentation for the 'details' attribute in genai.types.FileStatus, genai.types.FileStatusDict, genai.types.GoogleRpcStatus, genai.types.GoogleRpcStatusDict, and genai.types.JobError.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_131

LANGUAGE: APIDOC
CODE:
```
genai.types.FileStatus.details
  - Description: (Details not provided in input)

genai.types.FileStatusDict.details
  - Description: (Details not provided in input)

genai.types.GoogleRpcStatus.details
  - Description: (Details not provided in input)

genai.types.GoogleRpcStatusDict.details
  - Description: (Details not provided in input)

genai.types.JobError.details
  - Description: (Details not provided in input)
```

----------------------------------------

TITLE: genai.caches Module Methods
DESCRIPTION: API methods for managing asynchronous and synchronous caches, including creation, retrieval, listing, updating, and deletion.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AsyncCaches:
  create(cache):
    Creates a new cache.
  delete(cache_id: str):
    Deletes a cache.
  get(cache_id: str):
    Retrieves a specific cache.
  list():
    Lists all caches.
  update(cache_id: str, cache):
    Updates an existing cache.

Caches:
  create(cache):
    Creates a new cache.
  delete(cache_id: str):
    Deletes a cache.
  get(cache_id: str):
    Retrieves a specific cache.
  list():
    Lists all caches.
  update(cache_id: str, cache):
    Updates an existing cache.
```

----------------------------------------

TITLE: StartSensitivity Enum Members
DESCRIPTION: Defines sensitivity levels for starting an operation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_315

LANGUAGE: APIDOC
CODE:
```
StartSensitivity:
  START_SENSITIVITY_HIGH: int
    High sensitivity setting.
  START_SENSITIVITY_LOW: int
    Low sensitivity setting.
  START_SENSITIVITY_UNSPECIFIED: int
    Unspecified sensitivity setting.
```

----------------------------------------

TITLE: GenerateContentResponseUsageMetadataDict API
DESCRIPTION: Defines the structure for metadata related to content generation usage, including token counts and traffic types. This dictionary provides insights into resource consumption for generative AI operations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_122

LANGUAGE: APIDOC
CODE:
```
GenerateContentResponseUsageMetadataDict:
  Represents usage metadata for content generation.

  Attributes:
    tool_use_prompt_tokens_details (list[ToolUsePromptTokensDetailsDict]): Details about prompt tokens used by tools.
    total_token_count (int): The total number of tokens consumed.
    traffic_type (str): The type of traffic (e.g., 'USER_GENERATED', 'GROUNDING').
```

----------------------------------------

TITLE: GenAI Tuning Job Data Statistics
DESCRIPTION: Documents attributes related to statistics and data counts for tuning jobs and datasets. This includes counts of examples, steps, and overall dataset statistics.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_363

LANGUAGE: APIDOC
CODE:
```
genai.types.TuningJob.tuning_data_stats
  - Description: Statistics about the tuning dataset.
  - Type: DatasetStats

genai.types.TuningJobDict.tuning_data_stats
  - Description: Statistics about the tuning dataset.
  - Type: DatasetStatsDict

genai.types.DatasetStats.tuning_dataset_example_count
  - Description: Total number of examples in the tuning dataset.
  - Type: int

genai.types.DatasetStatsDict.tuning_dataset_example_count
  - Description: Total number of examples in the tuning dataset.
  - Type: int

genai.types.SupervisedTuningDataStats.tuning_dataset_example_count
  - Description: Total number of examples in the supervised tuning dataset.
  - Type: int

genai.types.SupervisedTuningDataStatsDict.tuning_dataset_example_count
  - Description: Total number of examples in the supervised tuning dataset.
  - Type: int

genai.types.DatasetStats.tuning_step_count
  - Description: Total number of training steps for the tuning job.
  - Type: int

genai.types.DatasetStatsDict.tuning_step_count
  - Description: Total number of training steps for the tuning job.
  - Type: int

genai.types.SupervisedTuningDataStats.tuning_step_count
  - Description: Total number of training steps for the supervised tuning job.
  - Type: int

genai.types.SupervisedTuningDataStatsDict.tuning_step_count
  - Description: Total number of training steps for the supervised tuning job.
  - Type: int
```

----------------------------------------

TITLE: RagRetrievalConfigRankingLlmRanker API
DESCRIPTION: Specifies the model name to be used when employing an LLM for ranking in RAG.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_286

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigRankingLlmRanker:
  model_name: The name of the LLM model to use for ranking.
```

----------------------------------------

TITLE: CreateTuningJobConfigDict API
DESCRIPTION: Dictionary representation of tuning job configuration parameters. Mirrors CreateTuningJobConfig attributes for data handling.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_137

LANGUAGE: APIDOC
CODE:
```
CreateTuningJobConfigDict:
  adapter_size: The size of the adapter to use for tuning.
  batch_size: The batch size for training steps.
  description: A user-provided description for the tuning job.
  epoch_count: The number of training epochs.
  export_last_checkpoint_only: If true, only the last checkpoint is exported.
  http_options: Optional HTTP client options.
  learning_rate: The learning rate for the optimizer.
  learning_rate_multiplier: Multiplier for the learning rate.
  tuned_model_display_name: The display name for the tuned model.
  validation_dataset: The dataset to use for validation.
```

----------------------------------------

TITLE: List Files Configuration and Response Types
DESCRIPTION: Defines the configuration parameters for listing files and the structure of the response, including pagination details.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_272

LANGUAGE: APIDOC
CODE:
```
genai.types.ListFilesConfig
  Attributes:
    page_token (str, optional): Token to retrieve the next page of results.
    page_size (int, optional): The maximum number of items to return per page.
    http_options (genai.types.HttpOptions, optional): Options for the HTTP request.

genai.types.ListFilesConfigDict
  Attributes:
    page_token (str, optional): Token to retrieve the next page of results.
    page_size (int, optional): The maximum number of items to return per page.
    http_options (genai.types.HttpOptions, optional): Options for the HTTP request.

genai.types.ListFilesResponse
  Attributes:
    files (list): A list of file items.
    next_page_token (str, optional): Token to retrieve the next page of results.

genai.types.ListFilesResponseDict
  Attributes:
    files (list): A list of file items.
    next_page_token (str, optional): Token to retrieve the next page of results.
```

----------------------------------------

TITLE: RealtimeInputConfig API
DESCRIPTION: Configuration settings for real-time input processing, including activity handling and automatic detection.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_292

LANGUAGE: APIDOC
CODE:
```
RealtimeInputConfig:
  activity_handling: How to handle user activity.
  automatic_activity_detection: Whether to automatically detect activity.
  turn_coverage: Coverage settings for turns in real-time input.
```

----------------------------------------

TITLE: FunctionDeclarationDict API
DESCRIPTION: A dictionary representation of FunctionDeclaration, used for serialization or data exchange.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_201

LANGUAGE: APIDOC
CODE:
```
FunctionDeclarationDict:
  behavior: Optional[FunctionDeclaration.Behavior]
  description: Optional[str]
  name: str
  parameters: Optional[Dict[str, Any]]
  parameters_json_schema: Optional[Dict[str, Any]]
  response: Optional[Dict[str, Any]]
  response_json_schema: Optional[Dict[str, Any]]
```

----------------------------------------

TITLE: List Files Configuration and Response
DESCRIPTION: Defines the configuration parameters for listing files and the structure of the response. Includes pagination and HTTP options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_181

LANGUAGE: APIDOC
CODE:
```
ListFilesConfig:
  http_options: dict
    Optional HTTP client options for the request.
  page_size: int
    The maximum number of files to return in a single response.
  page_token: str
    A page token received from a previous ListFilesResponse to retrieve the next page of results.
```

LANGUAGE: APIDOC
CODE:
```
ListFilesConfigDict:
  http_options: dict
    Optional HTTP client options for the request.
  page_size: int
    The maximum number of files to return in a single response.
  page_token: str
    A page token received from a previous ListFilesResponse to retrieve the next page of results.
```

LANGUAGE: APIDOC
CODE:
```
ListFilesResponse:
  files: list
    A list of file resources.
  next_page_token: str
    A token to retrieve the next page of results. If empty, there are no more pages.
```

LANGUAGE: APIDOC
CODE:
```
ListFilesResponseDict:
  files: list
    A list of file resources.
  next_page_token: str
    A token to retrieve the next page of results. If empty, there are no more pages.
```

----------------------------------------

TITLE: GenAI ExternalApiSimpleSearchParams
DESCRIPTION: Defines parameters for simple search queries within external API calls.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_98

LANGUAGE: APIDOC
CODE:
```
ExternalApiSimpleSearchParams:
  (Parameters for simple search queries)

ExternalApiSimpleSearchParamsDict:
  (Dictionary representation of ExternalApiSimpleSearchParams)
```

----------------------------------------

TITLE: Python GenAI: CreateFileConfig Fields
DESCRIPTION: Configuration options for file creation operations, including HTTP options and response handling.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_131

LANGUAGE: APIDOC
CODE:
```
CreateFileConfig:
  http_options: HTTP-specific options for the file creation request.
  should_return_http_response: A boolean indicating whether to return the raw HTTP response.
```

----------------------------------------

TITLE: GenAI Caches API
DESCRIPTION: Provides methods for managing caches, including creating, retrieving, updating, and deleting cache entries. Supports both asynchronous and synchronous operations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_72

LANGUAGE: APIDOC
CODE:
```
Caches:
  create(cache_id: str, display_name: str, **kwargs)
    Creates a new cache.
    Parameters:
      cache_id: Unique identifier for the cache.
      display_name: User-friendly name for the cache.
    Returns: Cache object.

  get(cache_id: str)
    Retrieves a specific cache.
    Parameters:
      cache_id: The ID of the cache to retrieve.
    Returns: Cache object.

  list(**kwargs)
    Lists all available caches.
    Returns: List of Cache objects.

  update(cache_id: str, display_name: str, **kwargs)
    Updates an existing cache.
    Parameters:
      cache_id: The ID of the cache to update.
      display_name: The new display name for the cache.
    Returns: Updated Cache object.

  delete(cache_id: str)
    Deletes a specific cache.
    Parameters:
      cache_id: The ID of the cache to delete.
    Returns: None.

AsyncCaches:
  update(cache_id: str, display_name: str, **kwargs)
    Asynchronously updates an existing cache.
    Parameters:
      cache_id: The ID of the cache to update.
      display_name: The new display name for the cache.
    Returns: Coroutine that resolves to the updated Cache object.
```

----------------------------------------

TITLE: MediaResolution Enum API
DESCRIPTION: Enumeration defining the different resolution levels for media.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_247

LANGUAGE: APIDOC
CODE:
```
MediaResolution:
  MEDIA_RESOLUTION_HIGH: str
    Description: High resolution media.
  MEDIA_RESOLUTION_LOW: str
    Description: Low resolution media.
  MEDIA_RESOLUTION_MEDIUM: str
    Description: Medium resolution media.
  MEDIA_RESOLUTION_UNSPECIFIED: str
    Description: Unspecified media resolution.
```

----------------------------------------

TITLE: GenAI Python Library - Data Types
DESCRIPTION: Documentation for key data structures and types used within the genai Python library. This includes configurations for real-time input, schema definitions, and replay file structures.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_312

LANGUAGE: APIDOC
CODE:
```
genai.types.RealtimeInputConfigDict (class)
  Represents the configuration for real-time input streams.
  Attributes:
    - mime_type: The MIME type of the input stream (e.g., 'image/jpeg').
    - data: The actual binary data of the input.

genai.types.Schema (class)
  Represents a schema definition.
  Attributes:
    - ref: A reference identifier for the schema.

genai.types.SchemaDict (class)
  Dictionary representation of a Schema.
  Attributes:
    - ref: A reference identifier for the schema.

genai.types.FinishReason (enum)
  Enumeration for possible finish reasons of a model response.
  Members:
    - RECITATION: Indicates that the response was stopped due to a citation.

genai.types.ControlReferenceImage (class)
  Represents a reference image used for control in generative tasks.
  Attributes:
    - reference_id: A unique identifier for the reference image.
    - reference_image: The image data itself.
    - reference_type: The type of reference image (e.g., 'IMAGE', 'MASK').

genai.types.ControlReferenceImageDict (class)
  Dictionary representation of ControlReferenceImage.
  Attributes:
    - reference_id: A unique identifier for the reference image.
    - reference_image: The image data itself.
    - reference_type: The type of reference image.

genai.types.MaskReferenceImage (class)
  Represents a reference image with a mask.
  Attributes:
    - reference_id: A unique identifier for the reference image.
    - reference_image: The image data.
    - reference_type: The type of reference image.

genai.types.MaskReferenceImageDict (class)
  Dictionary representation of MaskReferenceImage.
  Attributes:
    - reference_id: A unique identifier for the reference image.
    - reference_image: The image data.
    - reference_type: The type of reference image.

genai.types.RawReferenceImage (class)
  Represents a raw reference image.
  Attributes:
    - reference_id: A unique identifier for the reference image.
    - reference_image: The image data.
    - reference_type: The type of reference image.

genai.types.RawReferenceImageDict (class)
  Dictionary representation of RawReferenceImage.
  Attributes:
    - reference_id: A unique identifier for the reference image.
    - reference_image: The image data.
    - reference_type: The type of reference image.

genai.types.StyleReferenceImage (class)
  Represents a reference image for style.
  Attributes:
    - reference_id: A unique identifier for the reference image.
    - reference_image: The image data.
    - reference_type: The type of reference image.

genai.types.StyleReferenceImageDict (class)
  Dictionary representation of StyleReferenceImage.
  Attributes:
    - reference_id: A unique identifier for the reference image.
    - reference_image: The image data.
    - reference_type: The type of reference image.

genai.types.SubjectReferenceImage (class)
  Represents a reference image for a subject.
  Attributes:
    - reference_id: A unique identifier for the reference image.
    - reference_image: The image data.
    - reference_type: The type of reference image.

genai.types.SubjectReferenceImageDict (class)
  Dictionary representation of SubjectReferenceImage.
  Attributes:
    - reference_id: A unique identifier for the reference image.
    - reference_image: The image data.
    - reference_type: The type of reference image.

genai.types.SearchEntryPoint (class)
  Represents an entry point for search results.
  Attributes:
    - rendered_content: The rendered content of the search entry.

genai.types.SearchEntryPointDict (class)
  Dictionary representation of SearchEntryPoint.
  Attributes:
    - rendered_content: The rendered content of the search entry.

genai.client.DebugConfig (class)
  Configuration for debugging purposes.
  Attributes:
    - replay_id: An identifier for replaying a session.

genai.types.ReplayFile (class)
  Represents a file containing replay data.
  Attributes:
    - replay_id: An identifier for replaying a session.

genai.types.ReplayFileDict (class)
  Dictionary representation of ReplayFile.
  Attributes:
    - replay_id: An identifier for replaying a session.

genai.types.ReplayInteractionDict (class)
  Dictionary representation of a single interaction within a replay.

genai.types.ReplayRequestDict (class)
  Dictionary representation of a replay request.

genai.types.ReplayResponseDict (class)
  Dictionary representation of a replay response.

```

----------------------------------------

TITLE: Generate Content with Stdio Client and Function Calling
DESCRIPTION: Demonstrates setting up server parameters for a stdio connection, establishing a client session, and making a content generation request with tool usage for automatic function calling.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_36

LANGUAGE: python
CODE:
```
import asyncio
from datetime import datetime
from aiohttp import ClientSession
from google.generativeai import protos
import google.generativeai as genai

# Assuming StdioServerParameters, stdio_client, and ClientSession are defined elsewhere
# For demonstration, let's mock them or assume their existence.

# Mock classes/functions for demonstration purposes if not provided in context
class StdioServerParameters:
    def __init__(self, command, args, env=None):
        self.command = command
        self.args = args
        self.env = env

async def stdio_client(params):
    # This would typically establish a connection to a server process
    # For this example, we'll yield dummy read/write objects
    class DummyRead:
        async def read(self):
            return b'' # Simulate no data
    class DummyWrite:
        async def write(self, data):
            print(f"[Mock Write]: {data.decode()}")
    
    read_stream = DummyRead()
    write_stream = DummyWrite()
    
    class AsyncContextManager:
        async def __aenter__(self):
            print("[Mock Stdio Client Entered]")
            return read_stream, write_stream
        async def __aexit__(self, exc_type, exc_val, exc_tb):
            print("[Mock Stdio Client Exited]")
            
    return AsyncContextManager()

class ClientSession:
    def __init__(self, read, write):
        self.read = read
        self.write = write
        self.is_initialized = False

    async def initialize(self):
        print("[Mock ClientSession Initialized]")
        self.is_initialized = True

    async def __aenter__(self):
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        print("[Mock ClientSession Exited]")

# --- Actual Code Snippet --- 

# Create server parameters for stdio connection
server_params = StdioServerParameters(
    command="npx",  # Executable
    args=["-y", "@philschmid/weather-mcp"],  # MCP Server
    env=None,  # Optional environment variables
)

async def run():
    # Mocking the genai client for demonstration
    class MockGenAIClient:
        class MockModels:
            class MockGenerateContent:
                async def generate_content(self, model, contents, config):
                    print(f"[Mock GenAI Call] Model: {model}, Contents: {contents}, Config: {config}")
                    # Simulate a response
                    class MockResponse:
                        text = "The weather in London is sunny."
                    return MockResponse()
        models = MockModels()

    client = MockGenAIClient()

    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            # Prompt to get the weather for the current day in London.
            prompt = f"What is the weather in London in {datetime.now().strftime('%Y-%m-%d')}?"

            # Initialize the connection between client and server
            await session.initialize()

            # Send request to the model with MCP function declarations
            response = await client.models.generate_content(
                model="gemini-2.5-flash",
                contents=prompt,
                config=genai.types.GenerateContentConfig(
                    temperature=0,
                    tools=[session],  # uses the session, will automatically call the tool using automatic function calling
                ),
            )
            print(response.text)

# Start the asyncio event loop and run the main function
# asyncio.run(run())

```

----------------------------------------

TITLE: genai.types.SafetyRating Attributes
DESCRIPTION: API documentation for safety rating attributes, including category and probability.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_72

LANGUAGE: APIDOC
CODE:
```
genai.types.SafetyRating.category (attribute)
  - The safety category.
  - Related: genai.types.SafetyRatingDict.category, genai.types.SafetySetting.category, genai.types.SafetySettingDict.category
```

----------------------------------------

TITLE: genai.types.ListTuningJobsConfigDict Attributes
DESCRIPTION: Documentation for attributes within the ListTuningJobsConfigDict type, including pagination tokens.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_291

LANGUAGE: APIDOC
CODE:
```
ListTuningJobsConfigDict:
  page_token: str | None
    The page token to retrieve the next page of results.
```

----------------------------------------

TITLE: DistillationDataStatsDict API
DESCRIPTION: Details the DistillationDataStatsDict type and its 'training_dataset_stats' attribute within the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_154

LANGUAGE: APIDOC
CODE:
```
DistillationDataStatsDict:
  training_dataset_stats: object
    Statistics related to the training dataset.
```

----------------------------------------

TITLE: DistillationDataStats API
DESCRIPTION: Details the DistillationDataStats type and its 'training_dataset_stats' attribute within the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_153

LANGUAGE: APIDOC
CODE:
```
DistillationDataStats:
  training_dataset_stats: object
    Statistics related to the training dataset.
```

----------------------------------------

TITLE: Schema Type API Documentation
DESCRIPTION: Details the attributes and methods available for the Schema type, used for defining data structures and schemas within the GenAI library. Includes methods for JSON schema conversion.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_300

LANGUAGE: APIDOC
CODE:
```
Schema:
  Attributes:
    - defs: Definitions for reusable schema components.
    - description: A description of the schema.
    - enum: A list of allowed values.
    - example: An example value for the schema.
    - format: The format of the data (e.g., 'date-time', 'email').
    - items: Schema for array items.
    - max_items: Maximum number of items in an array.
    - max_length: Maximum length of a string.
    - max_properties: Maximum number of properties in an object.
    - maximum: The maximum allowed value.
    - min_items: Minimum number of items in an array.
    - min_length: Minimum length of a string.
    - min_properties: Minimum number of properties in an object.
    - minimum: The minimum allowed value.
    - nullable: Indicates if the value can be null.
    - pattern: A regular expression pattern for string validation.
    - properties: Properties of an object.
    - property_ordering: Specifies the order of properties.
    - ref: Reference to another schema definition.
    - required: List of required properties.
    - title: A title for the schema.
    - type: The data type (e.g., 'string', 'integer', 'object').

  Methods:
    - from_json_schema(schema_dict: dict) -> Schema:
        Creates a Schema object from a JSON schema dictionary.
        Parameters:
          schema_dict: A dictionary representing the JSON schema.
        Returns:
          A Schema object.

    - json_schema() -> dict:
        Returns the JSON schema representation of the Schema object.
        Returns:
          A dictionary representing the JSON schema.
```

----------------------------------------

TITLE: RagChunkPageSpan API
DESCRIPTION: Defines the page range for a retrieved text chunk in RAG.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_351

LANGUAGE: APIDOC
CODE:
```
RagChunkPageSpan:
  first_page: int
    The starting page number of the chunk.
  last_page: int
    The ending page number of the chunk.
```

----------------------------------------

TITLE: DatasetDistributionDict API
DESCRIPTION: Dictionary representation of dataset distribution statistics. Facilitates data serialization and deserialization.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_139

LANGUAGE: APIDOC
CODE:
```
DatasetDistributionDict:
  buckets: A list of distribution buckets.
  max: The maximum value in the dataset.
  mean: The mean (average) value of the dataset.
  median: The median value of the dataset.
  min: The minimum value in the dataset.
  p5: The 5th percentile value.
  p95: The 95th percentile value.
  sum: The sum of all values in the dataset.
```

----------------------------------------

TITLE: genai.types.JSONSchema Attributes
DESCRIPTION: Documentation for attributes of the JSONSchema type, including pattern.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_301

LANGUAGE: APIDOC
CODE:
```
JSONSchema:
  pattern: str | None
    A regular expression pattern for string validation.
```

LANGUAGE: APIDOC
CODE:
```
Schema:
  pattern: str | None
    A regular expression pattern for string validation.
```

LANGUAGE: APIDOC
CODE:
```
SchemaDict:
  pattern: str | None
    A regular expression pattern for string validation.
```

----------------------------------------

TITLE: genai.types.Checkpoint Attributes
DESCRIPTION: API documentation for checkpoint attributes, including checkpoint ID and model references.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_76

LANGUAGE: APIDOC
CODE:
```
genai.types.Checkpoint.checkpoint_id (attribute)
  - The unique identifier for a model checkpoint.
  - Related: genai.types.CheckpointDict.checkpoint_id, genai.types.TunedModelCheckpoint.checkpoint_id, genai.types.TunedModelCheckpointDict.checkpoint_id
```

----------------------------------------

TITLE: SupervisedTuningDataStatsDict Attributes
DESCRIPTION: Provides statistics related to supervised tuning datasets, including counts of examples, token usage, and truncation details.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_330

LANGUAGE: APIDOC
CODE:
```
SupervisedTuningDataStatsDict:
  dropped_example_reasons: List[str]
    Reasons why examples were dropped during tuning.
  total_billable_character_count: int
    Total character count for billable examples.
  total_billable_token_count: int
    Total token count for billable examples.
  total_truncated_example_count: int
    Total number of examples that were truncated.
  total_tuning_character_count: int
    Total character count used for tuning.
  truncated_example_indices: List[int]
    Indices of examples that were truncated.
  tuning_dataset_example_count: int
    Total number of examples in the tuning dataset.
  tuning_step_count: int
    Number of tuning steps performed.
  user_dataset_examples: List[Any]
    The user-provided dataset examples.
  user_input_token_distribution: SupervisedTuningDatasetDistribution
    Distribution of token counts for user inputs.
  user_message_per_example_distribution: SupervisedTuningDatasetDistribution
    Distribution of message counts per example.
  user_output_token_distribution: SupervisedTuningDatasetDistribution
    Distribution of token counts for user outputs.
```

----------------------------------------

TITLE: SearchEntryPoint Type API Documentation
DESCRIPTION: Details the attributes for SearchEntryPoint, representing an entry point for search operations. Includes fields for rendered content and SDK blob.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_302

LANGUAGE: APIDOC
CODE:
```
SearchEntryPoint:
  Attributes:
    - rendered_content: The rendered content of the search entry point.
    - sdk_blob: Binary data associated with the SDK for this entry point.
```

----------------------------------------

TITLE: MediaModality Enum API
DESCRIPTION: Enumeration defining the different media modalities supported.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_246

LANGUAGE: APIDOC
CODE:
```
MediaModality:
  AUDIO: str
    Description: Represents audio content.
  DOCUMENT: str
    Description: Represents document content.
  IMAGE: str
    Description: Represents image content.
  MODALITY_UNSPECIFIED: str
    Description: Unspecified media modality.
  TEXT: str
    Description: Represents text content.
  VIDEO: str
    Description: Represents video content.
```

----------------------------------------

TITLE: Schema API
DESCRIPTION: Defines the structure for schema definitions, including properties for additional properties, anyOf conditions, and default values.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_299

LANGUAGE: APIDOC
CODE:
```
Schema:
  Represents a data schema definition.
  Attributes:
    additional_properties: Configuration for additional properties.
    any_of: List of schemas that the data must conform to.
    default: The default value for the schema.
```

----------------------------------------

TITLE: FunctionDeclaration API
DESCRIPTION: Represents a declaration of a function that can be called by the model. Includes its name, description, and parameter/response schemas.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_200

LANGUAGE: APIDOC
CODE:
```
FunctionDeclaration:
  behavior: Optional[FunctionDeclaration.Behavior]
  description: Optional[str]
  name: str
  parameters: Optional[Dict[str, Any]]
  parameters_json_schema: Optional[Dict[str, Any]]
  response: Optional[Dict[str, Any]]
  response_json_schema: Optional[Dict[str, Any]]

  from_callable(func: Callable, name: Optional[str] = None, description: Optional[str] = None, ...)
    Creates a FunctionDeclaration from a Python callable.

  from_callable_with_api_option(func: Callable, name: Optional[str] = None, description: Optional[str] = None, ...)
    Creates a FunctionDeclaration from a Python callable with API options.
```

----------------------------------------

TITLE: GenAI Module References
DESCRIPTION: References to various modules within the genai Python library, indicating their presence and potential functionality.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_160

LANGUAGE: APIDOC
CODE:
```
genai.batches (module)
  Module for batch operations.

genai.caches (module)
  Module for caching functionalities.

genai.chats (module)
  Module for chat-related functionalities.

genai.client (module)
  Module for client-side operations and configurations.

genai.files (module)
  Module for file handling and management.

genai.live (module)
  Module for live interaction or real-time features.

genai.models (module)
  Module related to AI models.

genai.tokens (module)
  Module for tokenization and token management.

genai.tunings (module)
  Module for model tuning and customization.

genai.types (module)
  Module containing various data types and structures.
```

----------------------------------------

TITLE: ModalityTokenCount API
DESCRIPTION: Represents the token count associated with a specific media modality.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_249

LANGUAGE: APIDOC
CODE:
```
ModalityTokenCount:
  modality: Modality
    Description: The media modality.
  token_count: int
    Description: The number of tokens for the modality.
```

----------------------------------------

TITLE: RealtimeInputConfigDict API
DESCRIPTION: Dictionary representation for real-time input configuration, covering activity handling and detection.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_293

LANGUAGE: APIDOC
CODE:
```
RealtimeInputConfigDict:
  activity_handling: How to handle user activity.
  automatic_activity_detection: Whether to automatically detect activity.
  turn_coverage: Coverage settings for turns in real-time input.
```

----------------------------------------

TITLE: RagRetrievalConfigHybridSearchDict API
DESCRIPTION: Dictionary representation for RAG hybrid search configuration, including the alpha parameter.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_283

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigHybridSearchDict:
  alpha: The weighting factor for hybrid search (float).
```

----------------------------------------

TITLE: MaskReferenceMode Enum API
DESCRIPTION: Enumeration defining the different modes for mask referencing.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_245

LANGUAGE: APIDOC
CODE:
```
MaskReferenceMode:
  MASK_MODE_BACKGROUND: int
    Description: Masking applied to the background.
  MASK_MODE_DEFAULT: int
    Description: Default masking mode.
  MASK_MODE_FOREGROUND: int
    Description: Masking applied to the foreground.
  MASK_MODE_SEMANTIC: int
    Description: Semantic masking mode.
  MASK_MODE_USER_PROVIDED: int
    Description: Mask provided by the user.
```

----------------------------------------

TITLE: Get Cached Content
DESCRIPTION: Demonstrates retrieving specific cached content using its name.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_66

LANGUAGE: python
CODE:
```
cached_content = client.caches.get(name=cached_content.name)
```

----------------------------------------

TITLE: UsageMetadata and UsageMetadataDict
DESCRIPTION: Provides detailed information about token usage for AI model interactions. Includes counts for prompt, response, cached content, and tool usage, along with detailed breakdowns. UsageMetadataDict represents the same information in a dictionary format.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_427

LANGUAGE: APIDOC
CODE:
```
UsageMetadata:
  cache_tokens_details: Details about tokens used from cache.
  cached_content_token_count: The number of tokens consumed from cached content.
  prompt_token_count: The number of tokens in the input prompt.
  prompt_tokens_details: Detailed breakdown of prompt tokens.
  response_token_count: The number of tokens in the model's response.
  response_tokens_details: Detailed breakdown of response tokens.
  thoughts_token_count: The number of tokens used for internal model thoughts.
  tool_use_prompt_token_count: Tokens used for tool use prompts.
  tool_use_prompt_tokens_details: Detailed breakdown of tool use prompt tokens.
  total_token_count: The total number of tokens processed.
  traffic_type: The type of traffic associated with the usage.

UsageMetadataDict:
  (Dictionary representation of UsageMetadata with the same fields.)
```

----------------------------------------

TITLE: RagRetrievalConfigFilter API
DESCRIPTION: Specifies filters for RAG retrieval, including metadata and vector similarity/distance thresholds.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_353

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigFilter:
  metadata_filter: dict
    A dictionary for filtering based on metadata.
  vector_similarity_threshold: float
    The minimum similarity score required for a result.
  vector_distance_threshold: float
    The maximum distance allowed for a result.
```

----------------------------------------

TITLE: RagRetrievalConfigRanking API
DESCRIPTION: Configuration for ranking retrieved documents in RAG, specifying LLM ranker or a dedicated rank service.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_284

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigRanking:
  llm_ranker: Configuration for using an LLM as a ranker.
  rank_service: Configuration for a dedicated ranking service.
```

----------------------------------------

TITLE: DistillationHyperParameters API
DESCRIPTION: Details the DistillationHyperParameters type and its attributes 'adapter_size', 'epoch_count', and 'learning_rate_multiplier' within the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_155

LANGUAGE: APIDOC
CODE:
```
DistillationHyperParameters:
  adapter_size: int
    The size of the adapter used in distillation.
  epoch_count: int
    The number of epochs for the distillation training.
  learning_rate_multiplier: float
    A multiplier for the learning rate during distillation.
```

----------------------------------------

TITLE: DatasetDistribution API
DESCRIPTION: Provides statistical distribution information for a dataset, including mean, median, percentiles, and bucketed counts.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_138

LANGUAGE: APIDOC
CODE:
```
DatasetDistribution:
  buckets: A list of distribution buckets.
  max: The maximum value in the dataset.
  mean: The mean (average) value of the dataset.
  median: The median value of the dataset.
  min: The minimum value in the dataset.
  p5: The 5th percentile value.
  p95: The 95th percentile value.
  sum: The sum of all values in the dataset.
```

----------------------------------------

TITLE: DeleteResourceJob API
DESCRIPTION: Details the DeleteResourceJob type and its 'name' attribute within the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_151

LANGUAGE: APIDOC
CODE:
```
DeleteResourceJob:
  name: str
    The name of the resource deletion job.
```

----------------------------------------

TITLE: Generate Content with Text and Image
DESCRIPTION: Demonstrates how to construct content for the Gemini API that includes both text and an image URI. The SDK converts this structure into a user role content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_28

LANGUAGE: python
CODE:
```
[
    types.UserContent(
        parts=[
        types.Part.from_text('What is this image about?'),
        types.Part.from_uri(
            file_uri: 'gs://generativeai-downloads/images/scones.jpg',
            mime_type: 'image/jpeg',
        )
        ]
    )
    ]
```

----------------------------------------

TITLE: genai.types.Citation Attributes
DESCRIPTION: Details the attributes for a Citation object, including start and end indices, license, and publication date.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_104

LANGUAGE: APIDOC
CODE:
```
genai.types.Citation:
  end_index: int
  license: str
  publication_date: str
  start_index: int
```

----------------------------------------

TITLE: GenAI Media Creation Methods
DESCRIPTION: Methods for creating media-specific Part objects, such as images and videos, from files.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_155

LANGUAGE: APIDOC
CODE:
```
genai.types.Image.from_file(file_path: str, mime_type: str = None)
  Creates an Image Part from a local file path.
  Parameters:
    file_path: The path to the image file.
    mime_type: The MIME type of the image (e.g., 'image/jpeg', 'image/png').

genai.types.Video.from_file(file_path: str, mime_type: str = None)
  Creates a Video Part from a local file path.
  Parameters:
    file_path: The path to the video file.
    mime_type: The MIME type of the video (e.g., 'video/mp4').
```

----------------------------------------

TITLE: RagRetrievalConfigRankingLlmRankerDict API
DESCRIPTION: Dictionary representation for LLM ranker configuration in RAG, including the model name.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_287

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigRankingLlmRankerDict:
  model_name: The name of the LLM model to use for ranking.
```

----------------------------------------

TITLE: GenAI Type Definitions and Attributes
DESCRIPTION: Documentation for various data types and attributes within the genai.types module. These define the structure for configurations, responses, and hyper-parameters used in the GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_238

LANGUAGE: APIDOC
CODE:
```
genai.types.CreateTuningJobConfig.learning_rate
  - Attribute for learning rate in tuning job configuration.

genai.types.CreateTuningJobConfig.learning_rate_multiplier
  - Attribute for learning rate multiplier in tuning job configuration.

genai.types.CreateTuningJobConfigDict.learning_rate_multiplier
  - Dictionary attribute for learning rate multiplier.

genai.types.DistillationHyperParameters.learning_rate_multiplier
  - Attribute for learning rate multiplier in distillation hyper-parameters.

genai.types.DistillationHyperParametersDict.learning_rate_multiplier
  - Dictionary attribute for learning rate multiplier in distillation hyper-parameters.

genai.types.SupervisedHyperParameters.learning_rate_multiplier
  - Attribute for learning rate multiplier in supervised hyper-parameters.

genai.types.SupervisedHyperParametersDict.learning_rate_multiplier
  - Dictionary attribute for learning rate multiplier in supervised hyper-parameters.

genai.types.DatasetDistributionDistributionBucket.left
  - Attribute representing the left boundary of a dataset distribution bucket.

genai.types.DatasetDistributionDistributionBucketDict.left
  - Dictionary attribute for the left boundary of a dataset distribution bucket.

genai.types.SupervisedTuningDatasetDistributionDatasetBucket.left
  - Attribute for the left boundary of a supervised tuning dataset bucket.

genai.types.SupervisedTuningDatasetDistributionDatasetBucketDict.left
  - Dictionary attribute for the left boundary of a supervised tuning dataset bucket.

genai.types.Citation.license
  - Attribute for the license information of a citation.

genai.types.CitationDict.license
  - Dictionary attribute for the license information of a citation.

genai.types.ListBatchJobsConfigDict
  - Configuration dictionary for listing batch jobs.

genai.types.ListBatchJobsResponseDict
  - Response dictionary for listing batch jobs.

genai.types.ListCachedContentsConfigDict
  - Configuration dictionary for listing cached contents.

genai.types.ListCachedContentsResponseDict
  - Response dictionary for listing cached contents.

genai.types.ListFilesConfigDict
  - Configuration dictionary for listing files.

genai.types.ListFilesResponseDict
  - Response dictionary for listing files.

genai.types.ListModelsConfigDict
  - Configuration dictionary for listing models.

genai.types.ListModelsResponseDict
  - Response dictionary for listing models.

genai.types.ListTuningJobsConfigDict
  - Configuration dictionary for listing tuning jobs.

genai.types.ListTuningJobsResponseDict
  - Response dictionary for listing tuning jobs.

genai.client.AsyncClient.live
  - Property indicating the live status of the asynchronous client.

genai.types.CreateAuthTokenConfig.live_connect_constraints
  - Attribute for live connect constraints in authentication token configuration.

genai.types.CreateAuthTokenConfigDict.live_connect_constraints
  - Dictionary attribute for live connect constraints.

genai.types.LiveClientContentDict
  - Dictionary representing live client content.

genai.types.LiveClientMessageDict
  - Dictionary representing a live client message.

genai.types.LiveClientRealtimeInputDict
  - Dictionary representing live client real-time input.

genai.types.LiveClientSetupDict
  - Dictionary for live client setup configuration.

genai.types.LiveClientToolResponseDict
  - Dictionary representing a live client tool response.

genai.types.LiveConnectConfigDict
  - Dictionary for live connect configuration.

genai.types.LiveConnectConstraintsDict
  - Dictionary representing live connect constraints.

genai.types.LiveConnectParametersDict
  - Dictionary for live connect parameters.

genai.types.LiveMusicClientContentDict
  - Dictionary representing live music client content.

Description: This section details various data structures and attributes used within the genai.types module. These include configurations for creating tuning jobs, hyper-parameters for distillation and supervised tuning, dataset distribution details, citation information, and various list configuration/response dictionaries for managing resources like batch jobs, files, models, and tuning jobs. It also covers live client-related types and configurations.
```

----------------------------------------

TITLE: GenAI Image and Video Save Methods
DESCRIPTION: Documentation for the `save()` method available on Image and Video objects within the genai library, used for persisting media content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_315

LANGUAGE: APIDOC
CODE:
```
genai.types.Image.save()
  - Description: Saves the generated image to a file.
  - Parameters: (Implicitly takes a file path or stream)
  - Related: genai.types.Video.save

genai.types.Video.save()
  - Description: Saves the generated video to a file.
  - Parameters: (Implicitly takes a file path or stream)
  - Related: genai.types.Image.save
```

----------------------------------------

TITLE: GroundingChunkWeb and Dict API
DESCRIPTION: Documents the GroundingChunkWeb and its dictionary representation, GroundingChunkWeb. These structures contain details about a grounding chunk sourced from a web search.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_153

LANGUAGE: APIDOC
CODE:
```
GroundingChunkWeb:
  Information about a grounding chunk obtained from a web search.
  Attributes:
    domain (str | None): The domain name of the website where the content was found.
    title (str | None): The title of the web page.
    uri (str | None): The Uniform Resource Identifier (URI) of the web page.

GroundingChunkWebDict:
  Dictionary representation of GroundingChunkWeb.
  Attributes:
    domain (str | None): Dictionary for the website domain.
    title (str | None): Dictionary for the web page title.
    uri (str | None): Dictionary for the web page URI.
```

----------------------------------------

TITLE: GenAI Numerical and Limit Attributes
DESCRIPTION: Documentation for attributes related to numerical limits and configurations, such as maximum values for items, length, tokens, properties, and search results.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_247

LANGUAGE: APIDOC
CODE:
```
genai.types.DatasetDistribution.max
  Description: Maximum value in a dataset distribution.
  Appears in: genai.types.DatasetDistribution, genai.types.DatasetDistributionDict, genai.types.SupervisedTuningDatasetDistribution, genai.types.SupervisedTuningDatasetDistributionDict

genai.types.HttpRetryOptions.max_delay
  Description: Maximum delay for HTTP retries.
  Appears in: genai.types.HttpRetryOptions, genai.types.HttpRetryOptionsDict

genai.types.JSONSchema.max_items
  Description: Maximum number of items allowed in an array.
  Appears in: genai.types.JSONSchema, genai.types.Schema, genai.types.SchemaDict, genai.types.JSONSchemaDict

genai.types.JSONSchema.max_length
  Description: Maximum length allowed for a string.
  Appears in: genai.types.JSONSchema, genai.types.Schema, genai.types.SchemaDict, genai.types.JSONSchemaDict

genai.types.GenerateContentConfig.max_output_tokens
  Description: Maximum number of output tokens to generate.
  Appears in: genai.types.GenerateContentConfig, genai.types.GenerateContentConfigDict, genai.types.GenerationConfig, genai.types.GenerationConfigDict, genai.types.LiveConnectConfig, genai.types.LiveConnectConfigDict

genai.types.JSONSchema.max_properties
  Description: Maximum number of properties allowed in an object.
  Appears in: genai.types.JSONSchema, genai.types.Schema, genai.types.SchemaDict, genai.types.JSONSchemaDict

genai.types.VertexAISearch.max_results
  Description: Maximum number of results to return from Vertex AI Search.
  Appears in: genai.types.VertexAISearch, genai.types.VertexAISearchDict

genai.types.FinishReason.MAX_TOKENS
  Description: Enum value indicating generation stopped due to token limit.
  Appears in: genai.types.FinishReason

genai.types.JSONSchema.maximum
  Description: The maximum value for a number.
  Appears in: genai.types.JSONSchema, genai.types.Schema, genai.types.SchemaDict, genai.types.JSONSchemaDict

genai.types.AutomaticFunctionCallingConfig.maximum_remote_calls
  Description: Maximum number of remote calls allowed for function calling.
  Appears in: genai.types.AutomaticFunctionCallingConfig, genai.types.AutomaticFunctionCallingConfigDict

genai.types.DatasetDistribution.mean
  Description: The mean value in a dataset distribution.
  Appears in: genai.types.DatasetDistribution, genai.types.DatasetDistributionDict
```

----------------------------------------

TITLE: LiveConnectConfigDict API Reference
DESCRIPTION: Dictionary representation for live connection configuration, covering a wide range of settings from audio to generation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_290

LANGUAGE: APIDOC
CODE:
```
LiveConnectConfigDict:
  context_window_compression: Configuration for context window compression.
  enable_affective_dialog: Enables or disables affective dialog features.
  generation_config: Settings for model generation.
  http_options: HTTP client configuration options.
  input_audio_transcription: Configuration for input audio transcription.
  max_output_tokens: Maximum number of tokens for the output.
  media_resolution: Specifies the resolution for media processing.
  output_audio_transcription: Configuration for output audio transcription.
  proactivity: Controls the proactivity level of the client.
  realtime_input_config: Configuration for real-time input.
  response_modalities: Specifies the allowed response modalities.
  seed: Seed for random number generation.
  session_resumption: Configuration for session resumption.
  speech_config: Configuration for speech processing.
  system_instruction: Sets the system instruction for the model.
  temperature: Controls the randomness of predictions.
  tools: Specifies the tools available to the model.
  top_k: Top-K sampling parameter.
  top_p: Top-P (nucleus) sampling parameter.
```

----------------------------------------

TITLE: genai.types Description Attributes
DESCRIPTION: Documentation for the 'description' attribute across various types in genai.types, including configuration, models, and schemas.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_129

LANGUAGE: APIDOC
CODE:
```
genai.types.CreateTuningJobConfig.description
  - Description: (Details not provided in input)

genai.types.CreateTuningJobConfigDict.description
  - Description: (Details not provided in input)

genai.types.FunctionDeclaration.description
  - Description: (Details not provided in input)

genai.types.FunctionDeclarationDict.description
  - Description: (Details not provided in input)

genai.types.JSONSchema.description
  - Description: (Details not provided in input)

genai.types.Model.description
  - Description: (Details not provided in input)

genai.types.ModelDict.description
  - Description: (Details not provided in input)

genai.types.Schema.description
  - Description: (Details not provided in input)

genai.types.SchemaDict.description
  - Description: (Details not provided in input)

genai.types.TuningJob.description
  - Description: (Details not provided in input)

genai.types.TuningJobDict.description
  - Description: (Details not provided in input)
```

----------------------------------------

TITLE: GenerationConfig API Reference
DESCRIPTION: Configuration options for controlling the generation process, including temperature, token limits, and stop sequences. This object allows fine-tuning model output.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_227

LANGUAGE: APIDOC
CODE:
```
GenerationConfig:
  Attributes:
    audio_timestamp: bool | None
      Whether to include audio timestamps in the output.
    candidate_count: int | None
      The number of candidates to generate.
    enable_affective_dialog: bool | None
      Enables affective dialog features.
    frequency_penalty: float | None
      Controls the penalty for repeating tokens based on their frequency.
    logprobs: bool | None
      Whether to include log probabilities in the output.
    max_output_tokens: int | None
      The maximum number of tokens to generate.
    media_resolution: str | None
      Specifies the desired resolution for media generation.
    model_selection_config: dict | None
      Configuration for model selection logic.
    presence_penalty: float | None
      Controls the penalty for repeating tokens based on their presence.
    response_json_schema: dict | None
      A JSON schema to constrain the model's output.
    response_logprobs: bool | None
      Whether to include log probabilities for the response.
    response_mime_type: str | None
      The desired MIME type for the response.
    response_modalities: list[str] | None
      Specifies the desired modalities for the response.
    response_schema: dict | None
      A schema to structure the model's output.
    routing_config: dict | None
      Configuration for routing requests.
    seed: int | None
      A seed for reproducible generation.
    speech_config: dict | None
      Configuration for speech generation.
    stop_sequences: list[str] | None
      Sequences that will cause the generation to stop.
    temperature: float | None
      Controls the randomness of the output. Higher values mean more random.
    thinking_config: dict | None
      Configuration for the model's thinking process.
    top_k: int | None
      Filters the vocabulary to the top K most likely tokens.
    top_p: float | None
      Filters the vocabulary to the smallest set of tokens whose cumulative probability exceeds P.
```

----------------------------------------

TITLE: genai.types.GenerateContentResponse Attributes
DESCRIPTION: Documentation for attributes of the GenerateContentResponse type, including parsed content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_295

LANGUAGE: APIDOC
CODE:
```
GenerateContentResponse:
  parsed: Any
    The parsed content of the response.
```

----------------------------------------

TITLE: RawReferenceImageDict API
DESCRIPTION: Dictionary representation for a raw reference image, containing its ID, image data, and type.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_291

LANGUAGE: APIDOC
CODE:
```
RawReferenceImageDict:
  reference_id: A unique identifier for the reference image.
  reference_image: The raw image data (e.g., bytes).
  reference_type: The type of reference image (e.g., 'image/jpeg').
```

----------------------------------------

TITLE: Generate Content with Uploaded File
DESCRIPTION: Example of generating content by uploading a file and referencing it in the `contents` argument. The SDK handles the file reference within the content structure.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_14

LANGUAGE: python
CODE:
```
file = client.files.upload(file='a11.txt')
response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents=['Could you summarize this file?', file]
)
print(response.text)
```

----------------------------------------

TITLE: LiveServerContentDict API Reference
DESCRIPTION: A dictionary representation of LiveServerContent, used for data exchange. It mirrors the fields of LiveServerContent for convenience.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_220

LANGUAGE: APIDOC
CODE:
```
LiveServerContentDict:
  generation_complete: Optional[bool]
    Indicates if the generation process is complete.
  grounding_metadata: Optional[Any]
    Metadata related to grounding the response.
  input_transcription: Optional[str]
    The transcribed input from the user.
  interrupted: Optional[bool]
    Indicates if the generation was interrupted.
  model_turn: Optional[bool]
    Indicates if this content is part of the model's turn.
  output_transcription: Optional[str]
    The transcribed output from the model.
  turn_complete: Optional[bool]
    Indicates if the current turn is complete.
  url_context_metadata: Optional[Any]
    Metadata related to URL context.
```

----------------------------------------

TITLE: genai.types.Content Attributes
DESCRIPTION: Documentation for attributes of the Content type, including its parts.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_300

LANGUAGE: APIDOC
CODE:
```
Content:
  parts: list[dict]
    A list of content parts.
```

LANGUAGE: APIDOC
CODE:
```
ContentDict:
  parts: list[dict]
    A list of content parts.
```

LANGUAGE: APIDOC
CODE:
```
ModelContent:
  parts: list[dict]
    A list of content parts from the model.
```

LANGUAGE: APIDOC
CODE:
```
UserContent:
  parts: list[dict]
    A list of content parts from the user.
```

----------------------------------------

TITLE: LiveMusicPlaybackControl API
DESCRIPTION: Enumerates the possible playback control commands for live music generation, such as playing, pausing, or resetting.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_302

LANGUAGE: APIDOC
CODE:
```
LiveMusicPlaybackControl:
  PLAYBACK_CONTROL_UNSPECIFIED: Enum value for unspecified playback control.
  PLAY: Enum value to start or resume music playback.
  PAUSE: Enum value to pause music playback.
  STOP: Enum value to stop music playback.
  RESET_CONTEXT: Enum value to reset the generation context.
```

----------------------------------------

TITLE: SearchEntryPointDict Type API Documentation
DESCRIPTION: Details the attributes for SearchEntryPointDict, a dictionary-based representation of a search entry point. Mirrors the SearchEntryPoint type for data interchange.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_303

LANGUAGE: APIDOC
CODE:
```
SearchEntryPointDict:
  Attributes:
    - rendered_content: The rendered content of the search entry point.
    - sdk_blob: Binary data associated with the SDK for this entry point.
```

----------------------------------------

TITLE: genai.types.ActivityHandling
DESCRIPTION: Defines how activities are handled in the genai library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_8

LANGUAGE: APIDOC
CODE:
```
genai.types.ActivityHandling:
  Class for managing activity handling.
  (Details on methods and attributes are not provided in the source text.)
```

----------------------------------------

TITLE: Generate Images
DESCRIPTION: Provides an example for generating images using the Imagen model. It includes specifying the prompt, number of images, and output format, with support for RAI reasons.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_52

LANGUAGE: python
CODE:
```
from google.genai import types

# Generate Image
response1 = client.models.generate_images(
    model='imagen-3.0-generate-002',
    prompt='An umbrella in the foreground, and a rainy night sky in the background',
    config=types.GenerateImagesConfig(
        number_of_images=1,
        include_rai_reason=True,
        output_mime_type='image/jpeg',
    ),
)
response1.generated_images[0].image.show()
```

----------------------------------------

TITLE: DynamicRetrievalConfig API
DESCRIPTION: Details the DynamicRetrievalConfig type and its 'dynamic_threshold' and 'mode' attributes within the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_161

LANGUAGE: APIDOC
CODE:
```
DynamicRetrievalConfig:
  dynamic_threshold: float
    The threshold for dynamic retrieval.
  mode: DynamicRetrievalConfigMode
    The mode for dynamic retrieval.
```

----------------------------------------

TITLE: genai.types.ListBatchJobsConfig API Reference
DESCRIPTION: Configuration options for listing batch jobs. This includes filtering criteria and HTTP-specific options for the request.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_178

LANGUAGE: APIDOC
CODE:
```
ListBatchJobsConfig:
  filter: str | None
    An optional filter expression to apply when listing jobs.
  http_options: Dict[str, Any] | None
    Additional options to pass to the underlying HTTP request.
```

----------------------------------------

TITLE: genai.batches.Batches.cancel Method
DESCRIPTION: API documentation for the cancel method within the Batches class, used to cancel a batch job.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_66

LANGUAGE: APIDOC
CODE:
```
genai.batches.Batches.cancel()
  - Cancels a batch job.
  - Related: genai.batches.AsyncBatches.cancel
```

----------------------------------------

TITLE: DynamicRetrievalConfigDict API
DESCRIPTION: Details the DynamicRetrievalConfigDict type and its 'dynamic_threshold' and 'mode' attributes within the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_162

LANGUAGE: APIDOC
CODE:
```
DynamicRetrievalConfigDict:
  dynamic_threshold: float
    The threshold for dynamic retrieval.
  mode: DynamicRetrievalConfigMode
    The mode for dynamic retrieval.
```

----------------------------------------

TITLE: DistillationSpec API
DESCRIPTION: Details the DistillationSpec type and its various configuration attributes for distillation tasks in the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_157

LANGUAGE: APIDOC
CODE:
```
DistillationSpec:
  base_teacher_model: str
    The URI of the base teacher model.
  hyper_parameters: DistillationHyperParameters
    Hyperparameters for the distillation process.
  pipeline_root_directory: str
    The root directory for the distillation pipeline.
  student_model: str
    The URI of the student model.
  training_dataset_uri: str
    The URI of the training dataset.
  tuned_teacher_model_source: str
    The source of the tuned teacher model.
  validation_dataset_uri: str
    The URI of the validation dataset.
```

----------------------------------------

TITLE: genai.types.TuningJob Attributes
DESCRIPTION: Documentation for attributes of the TuningJob type, including partner model tuning specifications.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_298

LANGUAGE: APIDOC
CODE:
```
TuningJob:
  partner_model_tuning_spec: dict | None
    Specifications for tuning a partner model.
```

LANGUAGE: APIDOC
CODE:
```
TuningJobDict:
  partner_model_tuning_spec: dict | None
    Specifications for tuning a partner model.
```

----------------------------------------

TITLE: MaskReferenceImageDict API
DESCRIPTION: Dictionary representation for a mask reference image, mirroring the MaskReferenceImage structure.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_244

LANGUAGE: APIDOC
CODE:
```
MaskReferenceImageDict:
  config: MaskReferenceConfigDict
    Description: Configuration settings for the mask reference.
  reference_id: str
    Description: Unique identifier for the reference image.
  reference_image: bytes
    Description: The actual image data as bytes.
  reference_type: str
    Description: Type of the reference image.
```

----------------------------------------

TITLE: File Upload (Console)
DESCRIPTION: Commands to upload files to Google Cloud Storage (GCS) using gsutil, which can then be referenced by the Gemini Developer API.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_63

LANGUAGE: console
CODE:
```
gsutil cp gs://cloud-samples-data/generative-ai/pdf/2312.11805v3.pdf .
gsutil cp gs://cloud-samples-data/generative-ai/pdf/2403.05530.pdf .
```

----------------------------------------

TITLE: Image Generation Methods (genai.models)
DESCRIPTION: Enables the generation of images based on textual prompts using generative AI models. Supports asynchronous operations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_163

LANGUAGE: APIDOC
CODE:
```
genai.models.Models.generate_images(model_name: str, prompt: Union[str, Dict], generation_config: Optional[Dict] = None, safety_settings: Optional[Dict] = None, **kwargs) -> GenerateImagesResponse
  - Generates images from a text prompt.
  - Parameters:
    - model_name: The name of the image generation model.
    - prompt: The text description for the image.
    - generation_config: Configuration for image generation (e.g., number of images, size).
    - safety_settings: Configuration for safety filters.
  - Returns: A GenerateImagesResponse object containing generated images.
```

----------------------------------------

TITLE: Upload Files
DESCRIPTION: Uploads local files to the Gemini Developer API for use in generative tasks. Requires files to be present locally or accessible via cloud storage URIs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_50

LANGUAGE: python
CODE:
```
file1 = client.files.upload(file='2312.11805v3.pdf')
file2 = client.files.upload(file='2403.05530.pdf')

print(file1)
print(file2)
```

----------------------------------------

TITLE: GroundingMetadata and Dict API
DESCRIPTION: Details the GroundingMetadata and its dictionary counterpart, GroundingMetadataDict. These structures aggregate information about the grounding process, including chunks, supports, and retrieval queries.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_154

LANGUAGE: APIDOC
CODE:
```
GroundingMetadata:
  Aggregates information related to the grounding of a model response.
  Attributes:
    grounding_chunks (list[GroundingChunk] | None): A list of grounding chunks used.
    grounding_supports (list[GroundingSupport] | None): A list of grounding supports, indicating how chunks support the response.
    retrieval_metadata (any | None): Metadata related to the retrieval process.
    retrieval_queries (list[str] | None): The queries used for retrieval.
    search_entry_point (str | None): The entry point for the search.
    web_search_queries (list[str] | None): Queries specifically used for web searches.

GroundingMetadataDict:
  Dictionary representation of GroundingMetadata.
  Attributes:
    grounding_chunks (list[GroundingChunkDict] | None): Dictionary list of grounding chunks.
    grounding_supports (list[GroundingSupportDict] | None): Dictionary list of grounding supports.
    retrieval_metadata (any | None): Dictionary for retrieval metadata.
    retrieval_queries (list[str] | None): Dictionary list of retrieval queries.
    search_entry_point (str | None): Dictionary for the search entry point.
    web_search_queries (list[str] | None): Dictionary list of web search queries.
```

----------------------------------------

TITLE: genai.types.CancelBatchJobConfigDict
DESCRIPTION: API documentation for the CancelBatchJobConfigDict type, representing configuration for cancelling a batch job.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_67

LANGUAGE: APIDOC
CODE:
```
genai.types.CancelBatchJobConfigDict (class)
  - Represents configuration options for cancelling a batch job.
```

----------------------------------------

TITLE: GenAI Schema Creation Method
DESCRIPTION: Method for creating a Schema Part from a JSON schema definition.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_156

LANGUAGE: APIDOC
CODE:
```
genai.types.Schema.from_json_schema(json_schema: dict)
  Creates a Schema Part from a JSON schema dictionary.
  Parameters:
    json_schema: A dictionary representing the JSON schema.
```

----------------------------------------

TITLE: DistillationHyperParametersDict API
DESCRIPTION: Details the DistillationHyperParametersDict type and its attributes 'adapter_size', 'epoch_count', and 'learning_rate_multiplier' within the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_156

LANGUAGE: APIDOC
CODE:
```
DistillationHyperParametersDict:
  adapter_size: int
    The size of the adapter used in distillation.
  epoch_count: int
    The number of epochs for the distillation training.
  learning_rate_multiplier: float
    A multiplier for the learning rate during distillation.
```

----------------------------------------

TITLE: GenerateImagesResponseDict API
DESCRIPTION: A dictionary representation of the image generation response. This structure mirrors GenerateImagesResponse and is commonly used for data interchange.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_126

LANGUAGE: APIDOC
CODE:
```
GenerateImagesResponseDict:
  Dictionary representation of the image generation response.

  Attributes:
    generated_images (list[GeneratedImageDict]): A list of generated images.
    positive_prompt_safety_attributes (SafetyAttributesDict): Safety attributes related to the positive prompt.
```

----------------------------------------

TITLE: GenerateContentResponseUsageMetadataDict API
DESCRIPTION: Provides a dictionary-like interface for token usage metadata, mirroring the structure and information found in GenerateContentResponseUsageMetadata. This is useful for accessing token counts and details in a flexible, key-value format.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_215

LANGUAGE: APIDOC
CODE:
```
GenerateContentResponseUsageMetadataDict:
  Attributes:
    - cache_tokens_details: Details about tokens used for caching.
    - cached_content_token_count: Total token count for cached content.
    - candidates_token_count: Total token count for generated candidates.
    - candidates_tokens_details: Details about tokens used for candidates.
    - prompt_token_count: Total token count for the input prompt.
    - prompt_tokens_details: Details about tokens used for the prompt.
    - thoughts_token_count: Total token count for internal thoughts/reasoning.
    - tool_use_prompt_token_count: Total token count for tool use prompts.
    - tool_use_prompt_tokens_details: Details about tokens used for tool use prompts.
    - total_token_count: The overall total token count for the request.
    - traffic_type: Indicates the type of traffic (e.g., 'PROMPT_COMPLETION').
```

----------------------------------------

TITLE: GenerateContentResponseUsageMetadata API
DESCRIPTION: Details the token usage metadata for content generation responses. This structure provides granular counts for various components of the generation process, including cached content, candidates, prompts, thoughts, and tool use, along with detailed breakdowns for each.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_214

LANGUAGE: APIDOC
CODE:
```
GenerateContentResponseUsageMetadata:
  Attributes:
    - cache_tokens_details: Details about tokens used for caching.
    - cached_content_token_count: Total token count for cached content.
    - candidates_token_count: Total token count for generated candidates.
    - candidates_tokens_details: Details about tokens used for candidates.
    - prompt_token_count: Total token count for the input prompt.
    - prompt_tokens_details: Details about tokens used for the prompt.
    - thoughts_token_count: Total token count for internal thoughts/reasoning.
    - tool_use_prompt_token_count: Total token count for tool use prompts.
    - tool_use_prompt_tokens_details: Details about tokens used for tool use prompts.
    - total_token_count: The overall total token count for the request.
    - traffic_type: Indicates the type of traffic (e.g., 'PROMPT_COMPLETION').
```

----------------------------------------

TITLE: LiveMusicGenerationConfigDict API
DESCRIPTION: Defines the dictionary representation for live music generation configuration, allowing for easy data handling and interchange.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_301

LANGUAGE: APIDOC
CODE:
```
LiveMusicGenerationConfigDict:
  bpm: int
    Description: Beats per minute for the music generation.
  brightness: float
    Description: Controls the brightness or intensity of the music.
  density: float
    Description: Controls the density or complexity of the music.
  guidance: float
    Description: Guidance scale for the generation process.
  mute_bass: bool
    Description: If true, the bass track will be muted.
  mute_drums: bool
    Description: If true, the drums track will be muted.
  only_bass_and_drums: bool
    Description: If true, generation will focus only on bass and drums.
  scale: str
    Description: The musical scale to use for generation (e.g., 'C Major', 'A Minor').
  seed: int
    Description: Seed for reproducible generation.
  temperature: float
    Description: Controls the randomness of the generation.
  top_k: int
    Description: Top-K sampling parameter for controlling token selection.
```

----------------------------------------

TITLE: GenerateImagesResponse API
DESCRIPTION: Represents the response received after generating images. It contains the generated images themselves and associated safety attributes.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_125

LANGUAGE: APIDOC
CODE:
```
GenerateImagesResponse:
  Response object for image generation.

  Attributes:
    generated_images (list[GeneratedImageDict]): A list of generated images.
    positive_prompt_safety_attributes (SafetyAttributesDict): Safety attributes related to the positive prompt.
```

----------------------------------------

TITLE: genai.types.RealtimeInputConfig Attributes
DESCRIPTION: Documentation for configuration attributes related to real-time input.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_4

LANGUAGE: APIDOC
CODE:
```
genai.types.RealtimeInputConfig:
  activity_handling: ActivityHandling
    Specifies how activities are handled.
```

LANGUAGE: APIDOC
CODE:
```
genai.types.RealtimeInputConfigDict:
  activity_handling: ActivityHandling
    Specifies how activities are handled.
```

----------------------------------------

TITLE: FinishReason.UNEXPECTED_TOOL_CALL API
DESCRIPTION: Documentation for the `FinishReason.UNEXPECTED_TOOL_CALL` enum member, indicating the model stopped due to an unexpected tool call.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_114

LANGUAGE: APIDOC
CODE:
```
FinishReason.UNEXPECTED_TOOL_CALL:
  The model stopped because of an unexpected tool call.
  This indicates an issue where the model attempted to call a tool that was not configured or expected.
```

----------------------------------------

TITLE: List Models with Pagination (Synchronous)
DESCRIPTION: Demonstrates paginating through the list of models using the synchronous client, setting a page size and accessing subsequent pages.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_25

LANGUAGE: Python
CODE:
```
pager = client.models.list(config={'page_size': 10})
print(pager.page_size)
print(pager[0])
pager.next_page()
print(pager[0])
```

----------------------------------------

TITLE: RagRetrievalConfigFilter API
DESCRIPTION: Specifies filtering options for RAG retrieval, including metadata filters and vector similarity/distance thresholds.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_280

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigFilter:
  metadata_filter: A filter for metadata.
  vector_distance_threshold: The threshold for vector distance.
  vector_similarity_threshold: The threshold for vector similarity.
```

----------------------------------------

TITLE: Traffic Type Enumeration
DESCRIPTION: Defines the possible types of traffic for API requests, including an unspecified default.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_356

LANGUAGE: APIDOC
CODE:
```
genai.types.TrafficType.TRAFFIC_TYPE_UNSPECIFIED
  - Description: Default unspecified traffic type.

genai.types.TrafficType (class in genai.types)
  - Description: Enumeration for traffic types.
```

----------------------------------------

TITLE: MaskReferenceConfigDict API
DESCRIPTION: Defines the configuration dictionary for mask references, including dilation and segmentation settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_242

LANGUAGE: APIDOC
CODE:
```
MaskReferenceConfigDict:
  mask_dilation: float
    Description: Controls the dilation of the mask.
  mask_mode: MaskReferenceMode
    Description: Specifies the mode for mask reference.
  segmentation_classes: list[str]
    Description: A list of segmentation class names.
```

----------------------------------------

TITLE: Dataset Statistics and Distribution Structures
DESCRIPTION: Documents data structures related to dataset statistics and distribution, including overall statistics and bucket-specific distribution information.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_118

LANGUAGE: APIDOC
CODE:
```
DatasetDistributionDict (class in genai.types)
  - Dictionary representing the distribution of a dataset.

DatasetDistributionDistributionBucketDict (class in genai.types)
  - Dictionary representing a bucket within a dataset's distribution.

DatasetStatsDict (class in genai.types)
  - Dictionary containing statistics for a dataset.
```

----------------------------------------

TITLE: RagRetrievalConfigRankingDict API
DESCRIPTION: Dictionary representation for RAG ranking configuration, detailing LLM ranker or rank service settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_285

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigRankingDict:
  llm_ranker: Configuration for using an LLM as a ranker.
  rank_service: Configuration for a dedicated ranking service.
```

----------------------------------------

TITLE: SafetySetting and SafetySettingDict API
DESCRIPTION: Defines how safety settings are configured, specifying the category, method, and threshold for safety filtering.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_297

LANGUAGE: APIDOC
CODE:
```
SafetySetting:
  Configures safety settings for content generation.
  Attributes:
    category: The safety category to configure.
    method: The method of filtering (e.g., BLOCK_ONLY_HIGH).
    threshold: The safety threshold level.

SafetySettingDict:
  Dictionary representation of SafetySetting.
  Attributes:
    category: The safety category.
    method: The filtering method.
    threshold: The safety threshold.
```

----------------------------------------

TITLE: LiveClientSetup Configuration
DESCRIPTION: Configuration options for setting up the GenAI client, including model selection, generation parameters, and input/output handling. This allows customization of the client's behavior.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_191

LANGUAGE: APIDOC
CODE:
```
LiveClientSetup:
  context_window_compression: Configuration for context window compression.
  generation_config: Settings for controlling response generation.
  input_audio_transcription: Configuration for input audio transcription.
  model: Specifies the AI model to be used.
  output_audio_transcription: Configuration for output audio transcription.
  proactivity: Settings related to the client's proactivity.
  session_resumption: Configuration for resuming previous sessions.
  system_instruction: Defines the system's guiding instructions.
  tools: Specifies the tools available for the client.

LiveClientSetupDict:
  context_window_compression: Configuration for context window compression.
  generation_config: Settings for controlling response generation.
  input_audio_transcription: Configuration for input audio transcription.
  model: Specifies the AI model to be used.
  output_audio_transcription: Configuration for output audio transcription.
  proactivity: Settings related to the client's proactivity.
  session_resumption: Configuration for resuming previous sessions.
  system_instruction: Defines the system's guiding instructions.
  tools: Specifies the tools available for the client.
```

----------------------------------------

TITLE: GeneratedVideo API Reference
DESCRIPTION: Represents a video generated by the model. It contains the video data itself. This is a wrapper for the video content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_225

LANGUAGE: APIDOC
CODE:
```
GeneratedVideo:
  Attributes:
    video: bytes
      The generated video data.
```

----------------------------------------

TITLE: GenAI Model and Vertex AI Integration
DESCRIPTION: Details related to model versions and integration points with Google Cloud Vertex AI services, including search and RAG stores.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_374

LANGUAGE: APIDOC
CODE:
```
genai.types.Model.version
  - Type: str
  - Description: The version identifier of the model.

genai.types.ModelDict.version
  - Type: str
  - Description: The version identifier of the model.

genai.types.Retrieval.vertex_ai_search
  - Type: Union[genai.types.VertexAISearch, genai.types.VertexAISearchDict]
  - Description: Configuration for Vertex AI Search integration.

genai.types.RetrievalDict.vertex_ai_search
  - Type: Union[genai.types.VertexAISearch, genai.types.VertexAISearchDict]
  - Description: Configuration for Vertex AI Search integration.

genai.types.Retrieval.vertex_rag_store
  - Type: Union[genai.types.VertexRagStore, genai.types.VertexRagStoreDict]
  - Description: Configuration for Vertex AI RAG store integration.

genai.types.RetrievalDict.vertex_rag_store
  - Type: Union[genai.types.VertexRagStore, genai.types.VertexRagStoreDict]
  - Description: Configuration for Vertex AI RAG store integration.

genai.client.Client.vertexai
  - Type: genai.VertexAI
  - Description: An instance of the VertexAI client for interacting with Vertex AI models.

VertexAISearchDataStoreSpecDict (class in genai.types)
  - Description: Dictionary structure for specifying Vertex AI Search Data Store configuration.

VertexAISearchDict (class in genai.types)
  - Description: Dictionary structure for Vertex AI Search configuration.

VertexRagStoreDict (class in genai.types)
  - Description: Dictionary structure for Vertex AI RAG store configuration.

VertexRagStoreRagResourceDict (class in genai.types)
  - Description: Dictionary structure for Vertex AI RAG store resource configuration.
```

----------------------------------------

TITLE: List Methods in Python GenAI
DESCRIPTION: Provides the 'list' method available across various asynchronous and synchronous modules within the Python GenAI library. This method is used to retrieve collections of resources such as batches, caches, files, models, and tunings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_237

LANGUAGE: APIDOC
CODE:
```
genai.batches.AsyncBatches.list()
  - Retrieves a list of asynchronous batch jobs.

genai.batches.Batches.list()
  - Retrieves a list of synchronous batch jobs.

genai.caches.AsyncCaches.list()
  - Retrieves a list of asynchronous cache entries.

genai.caches.Caches.list()
  - Retrieves a list of synchronous cache entries.

genai.files.AsyncFiles.list()
  - Retrieves a list of asynchronous files.

genai.files.Files.list()
  - Retrieves a list of synchronous files.

genai.models.AsyncModels.list()
  - Retrieves a list of asynchronous models.

genai.models.Models.list()
  - Retrieves a list of synchronous models.

genai.tunings.AsyncTunings.list()
  - Retrieves a list of asynchronous tuning jobs.

genai.tunings.Tunings.list()
  - Retrieves a list of synchronous tuning jobs.

Description: The 'list' method is a common interface for retrieving collections of resources. It is implemented for both asynchronous and synchronous versions of modules dealing with batches, caches, files, models, and tunings. Specific parameters and return types may vary slightly depending on the module context, but generally, they return a list of relevant objects or dictionaries representing the resources.
```

----------------------------------------

TITLE: RagRetrievalConfigHybridSearch API
DESCRIPTION: Configuration details for hybrid search within RAG, including the alpha parameter for balancing search methods.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_282

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigHybridSearch:
  alpha: The weighting factor for hybrid search (float).
```

----------------------------------------

TITLE: LiveServerMessageDict API Reference
DESCRIPTION: A dictionary representation of LiveServerMessage, used for data exchange. It encapsulates different types of server messages.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_224

LANGUAGE: APIDOC
CODE:
```
LiveServerMessageDict:
  go_away: Optional[LiveServerGoAwayDict]
    Indicates the server is disconnecting.
  server_content: Optional[LiveServerContentDict]
    Content generated by the server.
  session_resumption_update: Optional[Any]
    Information about session resumption.
  setup_complete: Optional[bool]
    Indicates that the server setup is complete.
  tool_call: Optional[Any]
    Details about a tool call requested by the model.
  tool_call_cancellation: Optional[Any]
    Details about a tool call cancellation.
  usage_metadata: Optional[Any]
    Metadata related to usage statistics.
  data: Optional[bytes]
    Raw data payload.
  text: Optional[str]
    Plain text message.
```

----------------------------------------

TITLE: Python GenAI: CreateAuthTokenParameters Fields
DESCRIPTION: Defines the parameters for creating authentication tokens, primarily referencing a configuration object.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_126

LANGUAGE: APIDOC
CODE:
```
CreateAuthTokenParameters:
  config: An object containing configuration details for token creation (e.g., CreateAuthTokenConfigDict).
```

----------------------------------------

TITLE: DynamicRetrievalConfigMode API
DESCRIPTION: Details the DynamicRetrievalConfigMode type and its 'MODE_DYNAMIC' constant within the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_163

LANGUAGE: APIDOC
CODE:
```
DynamicRetrievalConfigMode:
  MODE_DYNAMIC: str
    Represents the dynamic mode for retrieval.
```

----------------------------------------

TITLE: Generate Content (Asynchronous Non-Streaming)
DESCRIPTION: Provides an example of asynchronous content generation using the `client.aio` interface. This allows non-blocking calls for improved application responsiveness.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_45

LANGUAGE: python
CODE:
```
response = await client.aio.models.generate_content(
    model='gemini-2.0-flash-001', contents='Tell me a story in 300 words.'
)

print(response.text)
```

----------------------------------------

TITLE: List Batch Jobs
DESCRIPTION: Shows how to list batch prediction jobs using the Google GenAI Python client, including examples with a pager to handle multiple pages of results.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_66

LANGUAGE: python
CODE:
```
from google.genai import types

for job in client.batches.list(config=types.ListBatchJobsConfig(page_size=10)):
    print(job)

pager = client.batches.list(config=types.ListBatchJobsConfig(page_size=10))
print(pager.page_size)
print(pager[0])
pager.next_page()
print(pager[0])
```

----------------------------------------

TITLE: ListTuningJobsConfigDict Attributes
DESCRIPTION: Details the configuration options for listing tuning jobs, including HTTP options and pagination parameters.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_275

LANGUAGE: APIDOC
CODE:
```
ListTuningJobsConfigDict:
  http_options: Configuration for HTTP requests.
  page_size: The maximum number of tuning jobs to return per page.
  page_token: The page token to retrieve the next page of results.
```

----------------------------------------

TITLE: MaskReferenceImage API
DESCRIPTION: Represents a reference image used for masking, including its configuration and associated metadata.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_243

LANGUAGE: APIDOC
CODE:
```
MaskReferenceImage:
  config: MaskReferenceConfigDict
    Description: Configuration settings for the mask reference.
  mask_image_config: MaskReferenceConfigDict
    Description: Specific configuration for the mask image.
  reference_id: str
    Description: Unique identifier for the reference image.
  reference_image: bytes
    Description: The actual image data as bytes.
  reference_type: str
    Description: Type of the reference image.
```

----------------------------------------

TITLE: FunctionResponse API
DESCRIPTION: Represents a response from a function call made by the model, including the function name, arguments, and continuation status.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_202

LANGUAGE: APIDOC
CODE:
```
FunctionResponse:
  id: str
  name: str
  response: Dict[str, Any]
  scheduling: Optional[FunctionResponseScheduling]
  will_continue: bool

  from_mcp_response(mcp_response: Dict[str, Any])
    Creates a FunctionResponse from a MCP (Model Communication Protocol) response.
```

----------------------------------------

TITLE: CountTokensConfig and Dict Types
DESCRIPTION: Configuration settings for the CountTokens API, allowing specification of generation configuration, HTTP options, system instructions, and tools.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_56

LANGUAGE: APIDOC
CODE:
```
CountTokensConfig:
  Attributes:
    generation_config: dict | None
      Configuration for token counting, potentially related to generation parameters.
    http_options: dict | None
      HTTP-specific options for the request.
    system_instruction: str | dict | None
      System instruction to be included in the token count.
    tools: list[dict] | None
      A list of tools to be considered for token counting.

CountTokensConfigDict:
  Attributes:
    generation_config: dict | None
      Configuration for token counting, potentially related to generation parameters.
    http_options: dict | None
      HTTP-specific options for the request.
    system_instruction: str | dict | None
      System instruction to be included in the token count.
    tools: list[dict] | None
      A list of tools to be considered for token counting.
```

----------------------------------------

TITLE: GenerationConfigDict API Reference
DESCRIPTION: Dictionary representation of generation configuration options. This mirrors GenerationConfig and is used for passing parameters as a dictionary.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_228

LANGUAGE: APIDOC
CODE:
```
GenerationConfigDict:
  Attributes:
    audio_timestamp: bool | None
      Whether to include audio timestamps in the output.
    candidate_count: int | None
      The number of candidates to generate.
    enable_affective_dialog: bool | None
      Enables affective dialog features.
    frequency_penalty: float | None
      Controls the penalty for repeating tokens based on their frequency.
    logprobs: bool | None
      Whether to include log probabilities in the output.
    max_output_tokens: int | None
      The maximum number of tokens to generate.
    media_resolution: str | None
      Specifies the desired resolution for media generation.
    model_selection_config: dict | None
      Configuration for model selection logic.
    presence_penalty: float | None
      Controls the penalty for repeating tokens based on their presence.
    response_json_schema: dict | None
      A JSON schema to constrain the model's output.
    response_logprobs: bool | None
      Whether to include log probabilities for the response.
    response_mime_type: str | None
      The desired MIME type for the response.
    response_modalities: list[str] | None
      Specifies the desired modalities for the response.
    response_schema: dict | None
      A schema to structure the model's output.
    routing_config: dict | None
      Configuration for routing requests.
    seed: int | None
      A seed for reproducible generation.
    speech_config: dict | None
      Configuration for speech generation.
    stop_sequences: list[str] | None
      Sequences that will cause the generation to stop.
    temperature: float | None
      Controls the randomness of the output. Higher values mean more random.
    thinking_config: dict | None
      Configuration for the model's thinking process.
    top_k: int | None
      Filters the vocabulary to the top K most likely tokens.
    top_p: float | None
      Filters the vocabulary to the smallest set of tokens whose cumulative probability exceeds P.
```

----------------------------------------

TITLE: Upload Files with Python SDK
DESCRIPTION: Uploads local files to the Gemini Developer API. This involves copying files to the local environment first, then using the client.files.upload method.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_62

LANGUAGE: cmd
CODE:
```
!gsutil cp gs://cloud-samples-data/generative-ai/pdf/2312.11805v3.pdf .
!gsutil cp gs://cloud-samples-data/generative-ai/pdf/2403.05530.pdf .
```

LANGUAGE: python
CODE:
```
file1 = client.files.upload(file='2312.11805v3.pdf')
file2 = client.files.upload(file='2403.05530.pdf')

print(file1)
print(file2)
```

----------------------------------------

TITLE: Generate Content (Streaming)
DESCRIPTION: Demonstrates streaming content generation using the Gemini API. It reads image bytes and sends them along with a text prompt to the model for analysis.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_47

LANGUAGE: python
CODE:
```
YOUR_IMAGE_MIME_TYPE = 'your_image_mime_type'
with open(YOUR_IMAGE_PATH, 'rb') as f:
    image_bytes = f.read()

for chunk in client.models.generate_content_stream(
    model='gemini-2.0-flash-001',
    contents=[
        'What is this image about?',
        types.Part.from_bytes(data=image_bytes, mime_type=YOUR_IMAGE_MIME_TYPE),
    ],
):
    print(chunk.text, end='')
```

----------------------------------------

TITLE: UsageMetadata and UsageMetadataDict Attributes
DESCRIPTION: Details the various token usage metrics available in UsageMetadata and its dictionary representation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_365

LANGUAGE: APIDOC
CODE:
```
UsageMetadata:
  cache_tokens_details: Detailed breakdown of cache token usage. (List[TokenCountDetails])
  cached_content_token_count: Total tokens used for cached content. (int)
  prompt_token_count: Total tokens used in the prompt. (int)
  prompt_tokens_details: Detailed breakdown of prompt token usage. (List[TokenCountDetails])
  response_token_count: Total tokens used in the response. (int)
  response_tokens_details: Detailed breakdown of response token usage. (List[TokenCountDetails])
  thoughts_token_count: Total tokens used for model thoughts. (int)
  tool_use_prompt_token_count: Total tokens used for tool use prompts. (int)
  tool_use_prompt_tokens_details: Detailed breakdown of tool use prompt token usage. (List[TokenCountDetails])
  total_token_count: The overall total token count. (int)
  traffic_type: The type of traffic contributing to usage. (TrafficType)
```

LANGUAGE: APIDOC
CODE:
```
UsageMetadataDict:
  cache_tokens_details: Detailed breakdown of cache token usage. (List[TokenCountDetailsDict])
  cached_content_token_count: Total tokens used for cached content. (int)
  prompt_token_count: Total tokens used in the prompt. (int)
  prompt_tokens_details: Detailed breakdown of prompt token usage. (List[TokenCountDetailsDict])
  response_token_count: Total tokens used in the response. (int)
  response_tokens_details: Detailed breakdown of response token usage. (List[TokenCountDetailsDict])
  thoughts_token_count: Total tokens used for model thoughts. (int)
  tool_use_prompt_token_count: Total tokens used for tool use prompts. (int)
  tool_use_prompt_tokens_details: Detailed breakdown of tool use prompt token usage. (List[TokenCountDetailsDict])
  total_token_count: The overall total token count. (int)
  traffic_type: The type of traffic contributing to usage. (TrafficType)
```

----------------------------------------

TITLE: LiveMusicServerMessage API
DESCRIPTION: Defines the structure for messages received from the live music server, which can include filtered prompts, generated content, or status updates.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_305

LANGUAGE: APIDOC
CODE:
```
LiveMusicServerMessage:
  filtered_prompt: LiveMusicFilteredPrompt | None
    Description: Information about a filtered prompt, if applicable.
  server_content: LiveMusicServerContent | None
    Description: The actual generated content from the server, such as audio.
  setup_complete: bool
    Description: Indicates whether the initial server setup is complete.
```

----------------------------------------

TITLE: genai.types.FunctionDeclaration.from_callable_with_api_option
DESCRIPTION: Creates a FunctionDeclaration object from a Python callable, allowing specification of API options. This method provides more control over how the function is exposed to the model.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_151

LANGUAGE: APIDOC
CODE:
```
FunctionDeclaration.from_callable_with_api_option(func: callable, api_option: str) -> FunctionDeclaration
  Creates a FunctionDeclaration from a Python callable with an API option.
  Parameters:
    func: The Python function to convert.
    api_option: A string specifying how the function should be exposed or used via an API.
  Returns:
    A FunctionDeclaration object.
```

----------------------------------------

TITLE: GenAI File Methods: download
DESCRIPTION: Method for downloading files asynchronously or synchronously from the GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_138

LANGUAGE: APIDOC
CODE:
```
genai.files.AsyncFiles.download()
  Description: Asynchronously downloads a file.
  Returns: Acoroutine

genai.files.Files.download()
  Description: Synchronously downloads a file.
  Returns: None
```

----------------------------------------

TITLE: Generate Videos
DESCRIPTION: Demonstrates how to generate videos using the Gemini API. It includes creating a video generation operation, polling its status, and accessing the generated video.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_58

LANGUAGE: python
CODE:
```
operation = client.models.generate_videos(
        model='veo-2.0-generate-001',
        prompt='A neon hologram of a cat driving at top speed',
        config=types.GenerateVideosConfig(
            number_of_videos=1,
            fps=24,
            duration_seconds=5,
            enhance_prompt=True,
        ),
    )

    # Poll operation
    while not operation.done:
        time.sleep(20)
        operation = client.operations.get(operation)

    video = operation.result.generated_videos[0].video
    video.show()
```

----------------------------------------

TITLE: GroundingSupport and Dict API
DESCRIPTION: Documents the GroundingSupport and its dictionary representation, GroundingSupportDict. These structures describe how specific segments of a response are supported by grounding chunks.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_155

LANGUAGE: APIDOC
CODE:
```
GroundingSupport:
  Indicates how a segment of the response is supported by grounding chunks.
  Attributes:
    confidence_scores (list[float] | None): Confidence scores for each supporting chunk.
    grounding_chunk_indices (list[int] | None): Indices of the grounding chunks that support this segment.
    segment (str | None): The segment of the response text that is supported.

GroundingSupportDict:
  Dictionary representation of GroundingSupport.
  Attributes:
    confidence_scores (list[float] | None): Dictionary list of confidence scores.
    grounding_chunk_indices (list[int] | None): Dictionary list of grounding chunk indices.
    segment (str | None): Dictionary for the supported response segment.
```

----------------------------------------

TITLE: ListBatchJobsResponse and ListBatchJobsResponseDict
DESCRIPTION: Response structure for listing batch jobs, containing a list of jobs and a token for the next page of results.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_269

LANGUAGE: APIDOC
CODE:
```
ListBatchJobsResponse:
  Response from listing batch jobs.
  Attributes:
    batch_jobs: A list of BatchJob objects.
    next_page_token: A token to retrieve the next page of results.

ListBatchJobsResponseDict:
  A dictionary representation of ListBatchJobsResponse.
  Attributes:
    batch_jobs: A list of BatchJob dictionaries.
    next_page_token: A token for the next page.
```

----------------------------------------

TITLE: Async Tunings List
DESCRIPTION: Iterates through a list of tuning jobs asynchronously using the client's asynchronous API. It demonstrates fetching jobs with a specified page size.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_80

LANGUAGE: python
CODE:
```
async for job in await client.aio.tunings.list(config={'page_size': 10}):
    print(job)
```

----------------------------------------

TITLE: List Models with Pagination (Asynchronous)
DESCRIPTION: Demonstrates paginating through the list of models using the asynchronous client, setting a page size and accessing subsequent pages asynchronously.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_27

LANGUAGE: Python
CODE:
```
async_pager = await client.aio.models.list(config={'page_size': 10})
print(async_pager.page_size)
print(async_pager[0])
await async_pager.next_page()
print(async_pager[0])
```

----------------------------------------

TITLE: DistillationSpecDict API
DESCRIPTION: Details the DistillationSpecDict type and its various configuration attributes for distillation tasks in the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_158

LANGUAGE: APIDOC
CODE:
```
DistillationSpecDict:
  base_teacher_model: str
    The URI of the base teacher model.
  hyper_parameters: DistillationHyperParametersDict
    Hyperparameters for the distillation process.
  pipeline_root_directory: str
    The root directory for the distillation pipeline.
  student_model: str
    The URI of the student model.
  training_dataset_uri: str
    The URI of the training dataset.
  tuned_teacher_model_source: str
    The source of the tuned teacher model.
  validation_dataset_uri: str
    The URI of the validation dataset.
```

----------------------------------------

TITLE: GroundingChunk and GroundingChunkDict API
DESCRIPTION: Documents the GroundingChunk and its dictionary representation, GroundingChunkDict. These structures hold information about retrieved contexts or web search results used for grounding model responses.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_151

LANGUAGE: APIDOC
CODE:
```
GroundingChunk:
  Represents a piece of content used for grounding.
  Attributes:
    retrieved_context (GroundingChunkRetrievedContext | None): Information about a retrieved context chunk.
    web (GroundingChunkWeb | None): Information about a web search result chunk.

GroundingChunkDict:
  Dictionary representation of GroundingChunk.
  Attributes:
    retrieved_context (GroundingChunkRetrievedContextDict | None): Dictionary for retrieved context chunk.
    web (GroundingChunkWebDict | None): Dictionary for web search result chunk.
```

----------------------------------------

TITLE: Structure Contents with types.Content Instance
DESCRIPTION: Provides an example of manually creating a `types.Content` instance with a specific role and parts. This is the canonical way to structure the contents argument, allowing for precise control over the input.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_15

LANGUAGE: python
CODE:
```
from google.genai import types

contents = types.Content(
  role='user',
  parts=[types.Part.from_text(text='Why is the sky blue?')]
)

# SDK converts this to:
# [
#   types.Content(
#     role='user',
#     parts=[types.Part.from_text(text='Why is the sky blue?')]
#   )
# ]
```

----------------------------------------

TITLE: RagRetrievalConfig API
DESCRIPTION: Configuration options for Retrieval Augmented Generation (RAG) retrieval process, including filtering, search methods, and ranking.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_352

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfig:
  top_k: int
    The number of top results to retrieve.
  filter: RagRetrievalConfigFilter
    Filters to apply to the retrieval results.
  hybrid_search: RagRetrievalConfigHybridSearch
    Configuration for hybrid search.
  ranking: dict
    Parameters for ranking retrieved documents.
```

----------------------------------------

TITLE: Delete File
DESCRIPTION: Deletes a previously uploaded file from the Gemini Developer API. This action is irreversible.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_52

LANGUAGE: python
CODE:
```
file3 = client.files.upload(file='2312.11805v3.pdf')

client.files.delete(name=file3.name)
```

----------------------------------------

TITLE: Declare and Use Function Tool for GenAI
DESCRIPTION: This example demonstrates how to manually declare a function with its schema and pass it as a tool to the GenAI model. The model will then return a function call part in the response.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_37

LANGUAGE: python
CODE:
```
from google.genai import types

function = types.FunctionDeclaration(
    name='get_current_weather',
    description='Get the current weather in a given location',
    parameters=types.Schema(
        type='OBJECT',
        properties={
            'location': types.Schema(
                type='STRING',
                description='The city and state, e.g. San Francisco, CA',
            ),
        },
        required=['location'],
    ),
)

tool = types.Tool(function_declarations=[function])

response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents='What is the weather like in Boston?',
    config=types.GenerateContentConfig(
        tools=[tool],
    ),
)
print(response.function_calls[0])
```

----------------------------------------

TITLE: LiveMusicGenerationConfig API
DESCRIPTION: Specifies configuration parameters for generating live music, controlling aspects like tempo, mood, instrumentation, and randomness.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_300

LANGUAGE: APIDOC
CODE:
```
LiveMusicGenerationConfig:
  bpm: int
    Description: Beats per minute for the music generation.
  brightness: float
    Description: Controls the brightness or intensity of the music.
  density: float
    Description: Controls the density or complexity of the music.
  guidance: float
    Description: Guidance scale for the generation process.
  mute_bass: bool
    Description: If true, the bass track will be muted.
  mute_drums: bool
    Description: If true, the drums track will be muted.
  only_bass_and_drums: bool
    Description: If true, generation will focus only on bass and drums.
  scale: str
    Description: The musical scale to use for generation (e.g., 'C Major', 'A Minor').
  seed: int
    Description: Seed for reproducible generation.
  temperature: float
    Description: Controls the randomness of the generation.
  top_k: int
    Description: Top-K sampling parameter for controlling token selection.
```

----------------------------------------

TITLE: genai.types.AdapterSize
DESCRIPTION: Enumerates possible adapter sizes for tuning jobs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_10

LANGUAGE: APIDOC
CODE:
```
genai.types.AdapterSize:
  Enum for specifying adapter sizes.
  Members:
    ADAPTER_SIZE_EIGHT
    ADAPTER_SIZE_FOUR
    ADAPTER_SIZE_ONE
    ADAPTER_SIZE_SIXTEEN
    ADAPTER_SIZE_THIRTY_TWO
    ADAPTER_SIZE_TWO
    ADAPTER_SIZE_UNSPECIFIED
  (Further details on usage are not provided in the source text.)
```

----------------------------------------

TITLE: genai.client.AsyncClient and Client Properties
DESCRIPTION: Accesses batch-related functionalities through the 'batches' property on client instances.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_39

LANGUAGE: APIDOC
CODE:
```
genai.client.AsyncClient.batches
  - Description: Property to access batch functionalities asynchronously.
  - Related: genai.client.Client.batches
```

LANGUAGE: APIDOC
CODE:
```
genai.client.Client.batches
  - Description: Property to access batch functionalities synchronously.
```

----------------------------------------

TITLE: GeneratedVideoDict API Reference
DESCRIPTION: Defines the structure for video generation results, similar to GeneratedVideo but as a dictionary. It holds the video data.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_226

LANGUAGE: APIDOC
CODE:
```
GeneratedVideoDict:
  Attributes:
    video: bytes
      The generated video data.
```

----------------------------------------

TITLE: genai.types.HttpResponse and HttpResponseDict Members
DESCRIPTION: Details the attributes available for HttpResponse and HttpResponseDict, which represent HTTP responses from the API. These include the response body and headers.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_163

LANGUAGE: APIDOC
CODE:
```
HttpResponse:
  body: The response body content.
  headers: A dictionary of HTTP response headers.

HttpResponseDict:
  body: The response body content.
  headers: A dictionary of HTTP response headers.
```

----------------------------------------

TITLE: General Authentication Configuration
DESCRIPTION: Provides a comprehensive structure for various authentication methods, including API keys, service accounts, OAuth, and OIDC.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_16

LANGUAGE: APIDOC
CODE:
```
AuthConfig:
  api_key_config: ApiKeyConfig
    Configuration for API key authentication.
  auth_type: str
    The type of authentication to use (e.g., 'API_KEY', 'GOOGLE_SERVICE_ACCOUNT').
  google_service_account_config: AuthConfigGoogleServiceAccountConfig
    Configuration for Google Service Account authentication.
  http_basic_auth_config: AuthConfigHttpBasicAuthConfig
    Configuration for HTTP Basic Authentication.
  oauth_config: AuthConfigOauthConfig
    Configuration for OAuth authentication.
  oidc_config: AuthConfigOidcConfig
    Configuration for OpenID Connect authentication.

AuthConfigDict:
  api_key_config: ApiKeyConfigDict
    Configuration for API key authentication.
  auth_type: str
    The type of authentication to use (e.g., 'API_KEY', 'GOOGLE_SERVICE_ACCOUNT').
  google_service_account_config: AuthConfigGoogleServiceAccountConfigDict
    Configuration for Google Service Account authentication.
  http_basic_auth_config: AuthConfigHttpBasicAuthConfigDict
    Configuration for HTTP Basic Authentication.
  oauth_config: AuthConfigOauthConfigDict
    Configuration for OAuth authentication.
  oidc_config: AuthConfigOidcConfigDict
    Configuration for OpenID Connect authentication.
```

----------------------------------------

TITLE: Authentication Configuration Types
DESCRIPTION: Provides a comprehensive set of types for configuring authentication methods, including API keys, service accounts, OAuth, and basic HTTP authentication.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_83

LANGUAGE: APIDOC
CODE:
```
AuthConfig:
  auth_type: AuthType
    Specifies the type of authentication to use.
  api_key_config: ApiKeyConfig | None
    Configuration for API key authentication.
  google_service_account_config: AuthConfigGoogleServiceAccountConfig | None
    Configuration for Google service account authentication.
  http_basic_auth_config: AuthConfigHttpBasicAuthConfig | None
    Configuration for HTTP basic authentication.
  oauth_config: AuthConfigOauthConfig | None
    Configuration for OAuth authentication.
  oidc_config: AuthConfigOidcConfig | None
    Configuration for OpenID Connect authentication.

AuthConfigDict:
  auth_type: AuthType
    Specifies the type of authentication to use.
  api_key_config: ApiKeyConfigDict | None
    Configuration for API key authentication.
  google_service_account_config: AuthConfigGoogleServiceAccountConfigDict | None
    Configuration for Google service account authentication.
  http_basic_auth_config: AuthConfigHttpBasicAuthConfigDict | None
    Configuration for HTTP basic authentication.
  oauth_config: AuthConfigOauthConfigDict | None
    Configuration for OAuth authentication.
  oidc_config: AuthConfigOidcConfigDict | None
    Configuration for OpenID Connect authentication.

AuthConfigGoogleServiceAccountConfig:
  service_account: str
    The service account credentials (e.g., path to JSON key file or content).

AuthConfigGoogleServiceAccountConfigDict:
  service_account: str
    The service account credentials (e.g., path to JSON key file or content).

AuthConfigHttpBasicAuthConfig:
  credential_secret: str
    The secret credential for HTTP basic authentication.

AuthConfigHttpBasicAuthConfigDict:
  credential_secret: str
    The secret credential for HTTP basic authentication.

AuthConfigOauthConfig:
  access_token: str
    The OAuth access token.
  service_account: str | None
    Optional service account identifier for OAuth.

AuthConfigOauthConfigDict:
  access_token: str
    The OAuth access token.
  service_account: str | None
    Optional service account identifier for OAuth.

AuthConfigOidcConfig:
  id_token: str
    The OpenID Connect ID token.
  service_account: str | None
    Optional service account identifier for OIDC.

AuthConfigOidcConfigDict:
  id_token: str
    The OpenID Connect ID token.
  service_account: str | None
    Optional service account identifier for OIDC.
```

----------------------------------------

TITLE: HarmBlockMethod Enum API
DESCRIPTION: Details the HarmBlockMethod enum, which specifies different methods for blocking harmful content in model responses.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_156

LANGUAGE: APIDOC
CODE:
```
HarmBlockMethod:
  Enum for methods to block harmful content.
  Members:
    HARM_BLOCK_METHOD_UNSPECIFIED:
      Default value. This value is not used.
    PROBABILITY:
      Block based on probability thresholds for harmful content.
```

----------------------------------------

TITLE: Generate Images
DESCRIPTION: Shows how to generate images using the Gemini API's image generation capabilities. This feature is behind an allowlist and requires specifying a model, prompt, and configuration options like output format and number of images.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_54

LANGUAGE: python
CODE:
```
from google.genai import types

# Generate Image
response1 = client.models.generate_images(
    model='imagen-3.0-generate-002',
    prompt='An umbrella in the foreground, and a rainy night sky in the background',
    config=types.GenerateImagesConfig(
        number_of_images=1,
        include_rai_reason=True,
        output_mime_type='image/jpeg',
    ),
)
response1.generated_images[0].image.show()
```

----------------------------------------

TITLE: LiveServerGoAwayDict API Reference
DESCRIPTION: A dictionary representation of LiveServerGoAway, used for data exchange. It contains the time left before server disconnection.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_222

LANGUAGE: APIDOC
CODE:
```
LiveServerGoAwayDict:
  time_left: Optional[float]
    The amount of time left before the server disconnects.
```

----------------------------------------

TITLE: SupervisedTuningDataStats Structure
DESCRIPTION: Provides statistics related to supervised tuning data. It includes counts for dropped examples, character and token counts, truncation information, and dataset statistics.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_386

LANGUAGE: APIDOC
CODE:
```
SupervisedTuningDataStats:
  Statistics related to supervised tuning data.
  Attributes:
    dropped_example_reasons (list[str]): Reasons why examples were dropped.
    total_billable_character_count (int): Total billable characters in the tuning dataset.
    total_billable_token_count (int): Total billable tokens in the tuning dataset.
    total_truncated_example_count (int): Count of examples that were truncated.
    total_tuning_character_count (int): Total characters used for tuning.
    truncated_example_indices (list[int]): Indices of truncated examples.
    tuning_dataset_example_count (int): Total number of examples in the tuning dataset.
    tuning_step_count (int): The number of tuning steps performed.
    user_dataset_examples (list[dict]): Examples from the user dataset.
    user_input_token_distribution (dict): Distribution of input tokens per user message.
    user_message_per_example_distribution (dict): Distribution of user messages per example.
    user_output_token_distribution (dict): Distribution of output tokens per user message.
```

----------------------------------------

TITLE: List Models Configuration
DESCRIPTION: Defines configuration options for listing available models. Includes parameters for pagination, filtering, and HTTP request options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_183

LANGUAGE: APIDOC
CODE:
```
ListModelsConfigDict:
  http_options: dict | None
    Optional HTTP options for the request.
  page_size: int | None
    The maximum number of models to return in the response.
  page_token: str | None
    A page token, received from a previous ListModelsResponse, to retrieve the next page of results.
  query_base: str | None
    A base query string to append to the request URL.
```

----------------------------------------

TITLE: Configure HTTP Options for GenAI Operations
DESCRIPTION: Details the common `http_options` attribute found across various configuration types in the `genai.types` module. This attribute allows customization of HTTP requests for specific API calls.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_187

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerateImagesConfig.http_options
(and similar for GenerateVideosConfig, GetBatchJobConfig, GetCachedContentConfig, GetFileConfig, GetModelConfig, GetOperationConfig, GetTuningJobConfig, ListBatchJobsConfig, ListCachedContentsConfig, ListFilesConfig, ListModelsConfig, ListTuningJobsConfig, LiveConnectConfig, UpdateCachedContentConfig, UpdateModelConfig, UploadFileConfig, UpscaleImageConfig)

- Represents HTTP request options for specific API calls.
- Allows customization of parameters like timeouts, headers, and other request-specific settings.
- Often mirrors a corresponding Dict type (e.g., GenerateImagesConfigDict).
```

----------------------------------------

TITLE: CreateAuthToken Configuration
DESCRIPTION: Defines the configuration parameters for creating authentication tokens, including expiration times and HTTP options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_59

LANGUAGE: APIDOC
CODE:
```
CreateAuthTokenConfig:
  expire_time: datetime | None
    The expiration time for the token.
  http_options: HTTPOptions | None
    Custom HTTP options for the request.
  live_connect_constraints: LiveConnectConstraints | None
    Constraints for live connections.
  lock_additional_fields: bool | None
    Whether to lock additional fields.
  new_session_expire_time: timedelta | None
    The expiration time for a new session.
  uses: int | None
    The number of uses for the token.

CreateAuthTokenConfigDict:
  expire_time: datetime | None
    The expiration time for the token.
  http_options: HTTPOptions | None
    Custom HTTP options for the request.
  live_connect_constraints: LiveConnectConstraints | None
    Constraints for live connections.
  lock_additional_fields: bool | None
    Whether to lock additional fields.
  new_session_expire_time: timedelta | None
    The expiration time for a new session.
  uses: int | None
    The number of uses for the token.

CreateAuthTokenParameters:
  config: CreateAuthTokenConfig | None
    The configuration for creating the auth token.

CreateAuthTokenParametersDict:
  config: CreateAuthTokenConfigDict | None
    The configuration for creating the auth token.
```

----------------------------------------

TITLE: genai.types.TestTableFile Attributes
DESCRIPTION: Documentation for attributes of the TestTableFile type, specifically parameter names.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_292

LANGUAGE: APIDOC
CODE:
```
TestTableFile:
  parameter_names: list[str]
    A list of parameter names.
```

LANGUAGE: APIDOC
CODE:
```
TestTableFileDict:
  parameter_names: list[str]
    A list of parameter names.
```

----------------------------------------

TITLE: Create Vertex AI Client
DESCRIPTION: Initializes a client for the Vertex AI API, requiring a Google Cloud project ID and location. This client connects to Google Cloud's managed AI services.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_3

LANGUAGE: python
CODE:
```
from google import genai

# Only run this block for Vertex AI API
client = genai.Client(
    vertexai=True, project='your-project-id', location='us-central1'
)
```

----------------------------------------

TITLE: LiveServerMessage API Reference
DESCRIPTION: A general message structure for communication with the live server. It can contain various types of server content or control signals.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_223

LANGUAGE: APIDOC
CODE:
```
LiveServerMessage:
  go_away: Optional[LiveServerGoAway]
    Indicates the server is disconnecting.
  server_content: Optional[LiveServerContent]
    Content generated by the server.
  session_resumption_update: Optional[Any]
    Information about session resumption.
  setup_complete: Optional[bool]
    Indicates that the server setup is complete.
  tool_call: Optional[Any]
    Details about a tool call requested by the model.
  tool_call_cancellation: Optional[Any]
    Details about a tool call cancellation.
  usage_metadata: Optional[Any]
    Metadata related to usage statistics.
  data: Optional[bytes]
    Raw data payload.
  text: Optional[str]
    Plain text message.
```

----------------------------------------

TITLE: RawReferenceImage API
DESCRIPTION: Represents a raw reference image used in the GenAI context, including its ID, image data, and type.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_290

LANGUAGE: APIDOC
CODE:
```
RawReferenceImage:
  reference_id: A unique identifier for the reference image.
  reference_image: The raw image data (e.g., bytes).
  reference_type: The type of reference image (e.g., 'image/jpeg').
```

----------------------------------------

TITLE: PartnerModelTuningSpec Type Members
DESCRIPTION: Details the configuration options for tuning partner models, including hyperparameters and dataset URIs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_266

LANGUAGE: APIDOC
CODE:
```
PartnerModelTuningSpec:
  hyper_parameters: dict
    A dictionary of hyperparameters for model tuning.

  training_dataset_uri: str
    The URI pointing to the training dataset.

  validation_dataset_uri: str
    The URI pointing to the validation dataset.
```

----------------------------------------

TITLE: Python GenAI: DatasetStats and DatasetStatsDict
DESCRIPTION: Provides statistics for a dataset, including character counts, example counts, and token distributions. DatasetStatsDict is the dictionary representation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_142

LANGUAGE: APIDOC
CODE:
```
DatasetStats / DatasetStatsDict:
  Contains statistics related to a dataset, such as character counts and token distributions.
  Attributes:
    total_billable_character_count: (int) Total billable characters in the dataset.
    total_tuning_character_count: (int) Total characters used for tuning.
    tuning_dataset_example_count: (int) Number of examples used for tuning.
    tuning_step_count: (int) Number of tuning steps performed.
    user_dataset_examples: (int) Number of user-provided dataset examples.
    user_input_token_distribution: (DatasetDistributionDistributionBucketDict) Distribution of user input tokens.
    user_message_per_example_distribution: (DatasetDistributionDistributionBucketDict) Distribution of user messages per example.
    user_output_token_distribution: (DatasetDistributionDistributionBucketDict) Distribution of user output tokens.
```

----------------------------------------

TITLE: RagRetrievalConfigDict API
DESCRIPTION: Defines the structure for Retrieval Augmented Generation (RAG) configuration, including hybrid search, ranking, and top-k parameters.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_279

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigDict:
  hybrid_search: Configuration for hybrid search.
  ranking: Configuration for ranking results.
  top_k: The number of top results to retrieve.
```

----------------------------------------

TITLE: GenAI Data Structures and Attributes
DESCRIPTION: Documentation for various data structures (Dict types) and attributes within the genai.types module. These define the configuration and data formats used by the library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_319

LANGUAGE: APIDOC
CODE:
```
genai.types.SearchEntryPointDict
  Represents an entry point for search functionality.

genai.types.EditImageConfig.seed
  An integer attribute used for seeding random number generation in image editing configurations.

genai.types.EditImageConfigDict.seed
  Dictionary representation of the seed attribute for image editing.

genai.types.GenerateContentConfig.seed
  An integer attribute for seeding content generation.

genai.types.GenerateContentConfigDict.seed
  Dictionary representation of the seed attribute for content generation.

genai.types.GenerateImagesConfig.seed
  An integer attribute for seeding image generation.

genai.types.GenerateImagesConfigDict.seed
  Dictionary representation of the seed attribute for image generation.

genai.types.GenerateVideosConfig.seed
  An integer attribute for seeding video generation.

genai.types.GenerateVideosConfigDict.seed
  Dictionary representation of the seed attribute for video generation.

genai.types.GenerationConfig.seed
  An integer attribute for seeding general generation tasks.

genai.types.GenerationConfigDict.seed
  Dictionary representation of the seed attribute for general generation.

genai.types.LiveConnectConfig.seed
  An integer attribute for seeding live connection processes.

genai.types.LiveConnectConfigDict.seed
  Dictionary representation of the seed attribute for live connection.

genai.types.LiveMusicGenerationConfig.seed
  An integer attribute for seeding live music generation.

genai.types.LiveMusicGenerationConfigDict.seed
  Dictionary representation of the seed attribute for live music generation.

genai.types.GroundingSupport.segment
  Represents a segment of grounding support data.

genai.types.GroundingSupportDict.segment
  Dictionary representation of a grounding support segment.

genai.types.MaskReferenceConfig.segmentation_classes
  Defines the classes for segmentation masks.

genai.types.MaskReferenceConfigDict.segmentation_classes
  Dictionary representation of segmentation classes.

genai.types.SegmentDict
  Represents a segment of data.

genai.types.LiveMusicServerMessage.server_content
  Content sent from the server in a live music message.

genai.types.LiveMusicServerMessageDict.server_content
  Dictionary representation of server content in a live music message.

genai.types.LiveServerMessage.server_content
  Generic server content for live messages.

genai.types.LiveServerMessageDict.server_content
  Dictionary representation of generic server content.

genai.types.AuthConfigGoogleServiceAccountConfig.service_account
  Configuration for Google service account authentication.

genai.types.AuthConfigGoogleServiceAccountConfigDict.service_account
  Dictionary representation of Google service account configuration.

genai.types.AuthConfigOauthConfig.service_account
  Configuration for OAuth service account authentication.

genai.types.AuthConfigOauthConfigDict.service_account
  Dictionary representation of OAuth service account configuration.

genai.types.AuthConfigOidcConfig.service_account
  Configuration for OIDC service account authentication.

genai.types.AuthConfigOidcConfigDict.service_account
  Dictionary representation of OIDC service account configuration.

genai.types.TuningJob.service_account
  Service account details for a tuning job.

genai.types.TuningJobDict.service_account
  Dictionary representation of service account details for a tuning job.

genai.types.LiveServerSetupComplete.session_id
  Identifier for a completed live session.

genai.types.LiveServerSetupCompleteDict.session_id
  Dictionary representation of a live session identifier.

genai.types.LiveClientSetup.session_resumption
  Configuration for resuming a live client session.

genai.types.LiveClientSetupDict.session_resumption
  Dictionary representation of session resumption configuration.
```

----------------------------------------

TITLE: GenAI Tunings Module and Client Property
DESCRIPTION: Documents the `Tunings` class and the `tunings` property available on GenAI client objects, which likely provides access to tuning-related functionalities.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_365

LANGUAGE: APIDOC
CODE:
```
genai.tunings.Tunings (class)
  - Description: Represents functionalities for managing model tunings.

genai.client.AsyncClient.tunings (property)
  - Description: Access point for asynchronous tuning operations.
  - Type: Tunings

genai.client.Client.tunings (property)
  - Description: Access point for synchronous tuning operations.
  - Type: Tunings
```

----------------------------------------

TITLE: LiveMusicFilteredPrompt API
DESCRIPTION: Defines the structure for a filtered prompt, including the reason for filtering and the prompt text itself. Used for providing feedback on prompt processing.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_298

LANGUAGE: APIDOC
CODE:
```
LiveMusicFilteredPrompt:
  filtered_reason: str
    Description: The reason why the prompt was filtered or modified.
  text: str
    Description: The actual text of the prompt after filtering.
```

----------------------------------------

TITLE: Generate Content with Text
DESCRIPTION: Example of generating content using the `generate_content` method with plain text input. The SDK converts the string into a `types.UserContent` object.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_12

LANGUAGE: python
CODE:
```
response = client.models.generate_content(
    model='gemini-2.0-flash-001', contents='Why is the sky blue?'
)
print(response.text)
```

----------------------------------------

TITLE: genai.batches.AsyncBatches.cancel Method
DESCRIPTION: API documentation for the cancel method within the AsyncBatches class, used to cancel an asynchronous batch job.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_65

LANGUAGE: APIDOC
CODE:
```
genai.batches.AsyncBatches.cancel()
  - Cancels an asynchronous batch job.
  - Related: genai.batches.Batches.cancel
```

----------------------------------------

TITLE: APIDOC: UploadFileConfig and UploadFileConfigDict
DESCRIPTION: Details the configuration for uploading files. This includes parameters for the display name, MIME type, file name, and any associated HTTP options for the upload process.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_354

LANGUAGE: APIDOC
CODE:
```
UploadFileConfig:
  display_name: str | None
    The display name for the uploaded file.
  http_options: dict | None
    Custom HTTP options to be used for the request.
  mime_type: str | None
    The MIME type of the file.
  name: str | None
    The name of the file.

UploadFileConfigDict:
  display_name: str | None
    The display name for the uploaded file.
  http_options: dict | None
    Custom HTTP options to be used for the request.
  mime_type: str | None
    The MIME type of the file.
  name: str | None
    The name of the file.
```

----------------------------------------

TITLE: DatasetDistributionDistributionBucket API
DESCRIPTION: Represents a single bucket within a dataset's distribution, detailing the count of items within a specific range.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_140

LANGUAGE: APIDOC
CODE:
```
DatasetDistributionDistributionBucket:
  count: The number of data points in this bucket.
  left: The lower bound of the bucket (inclusive).
  right: The upper bound of the bucket (exclusive).
```

----------------------------------------

TITLE: CitationMetadata and CitationMetadataDict
DESCRIPTION: Defines the CitationMetadata and CitationMetadataDict structures for holding a collection of citations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_44

LANGUAGE: APIDOC
CODE:
```
CitationMetadata:
  citations: list[Citation]
    A list of Citation objects.

CitationMetadataDict:
  citations: list[CitationDict]
    A list of CitationDict objects.
```

----------------------------------------

TITLE: File Configuration
DESCRIPTION: Configuration for file-related operations, including HTTP options for requests.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_141

LANGUAGE: APIDOC
CODE:
```
GetFileConfig:
  http_options: dict
    Description: Options for the HTTP request.

GetFileConfigDict:
  http_options: dict
    Description: Options for the HTTP request.
```

----------------------------------------

TITLE: GenAI Part Creation Methods
DESCRIPTION: Methods for creating Part objects, which represent different types of content in a multimodal prompt. These include code execution results, executable code, function calls, function responses, text, and URIs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_154

LANGUAGE: APIDOC
CODE:
```
genai.types.Part.from_code_execution_result(code_output: genai.types.CodeExecutionResult)
  Creates a Part from a code execution result.

genai.types.Part.from_executable_code(code: str, language: str = 'python')
  Creates a Part from executable code.
  Parameters:
    code: The code string.
    language: The programming language of the code (default: 'python').

genai.types.Part.from_function_call(function_call: genai.types.FunctionCall)
  Creates a Part from a function call.

genai.types.Part.from_function_response(function_response: genai.types.FunctionResponse)
  Creates a Part from a function response.

genai.types.Part.from_text(text: str)
  Creates a Part from plain text.

genai.types.Part.from_uri(uri: str, mime_type: str = None)
  Creates a Part from a URI.
  Parameters:
    uri: The URI of the content.
    mime_type: The MIME type of the content (optional).
```

----------------------------------------

TITLE: List Models Configuration and Response Types
DESCRIPTION: Defines the configuration parameters for listing available models and the structure of the response, including pagination details.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_273

LANGUAGE: APIDOC
CODE:
```
genai.types.ListModelsConfig
  Attributes:
    page_token (str, optional): Token to retrieve the next page of results.
    page_size (int, optional): The maximum number of items to return per page.
    filter (str, optional): Filter to apply to the list of models.
    query_base (str, optional): Base query for model listing.
    http_options (genai.types.HttpOptions, optional): Options for the HTTP request.

genai.types.ListModelsConfigDict
  Attributes:
    page_token (str, optional): Token to retrieve the next page of results.
    page_size (int, optional): The maximum number of items to return per page.
    filter (str, optional): Filter to apply to the list of models.
    query_base (str, optional): Base query for model listing.
    http_options (genai.types.HttpOptions, optional): Options for the HTTP request.

genai.types.ListModelsResponse
  Attributes:
    models (list): A list of model items.
    next_page_token (str, optional): Token to retrieve the next page of results.

genai.types.ListModelsResponseDict
  Attributes:
    models (list): A list of model items.
    next_page_token (str, optional): Token to retrieve the next page of results.
```

----------------------------------------

TITLE: Get Tuned Model Details
DESCRIPTION: Retrieves detailed information about a specific tuned model using its model identifier.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_72

LANGUAGE: python
CODE:
```
tuned_model = client.models.get(model=tuning_job.tuned_model.model)
print(tuned_model)
```

----------------------------------------

TITLE: genai.types.ListFilesResponse Attributes
DESCRIPTION: Attributes for the response when listing files, including pagination tokens.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_270

LANGUAGE: APIDOC
CODE:
```
ListFilesResponse:
  next_page_token: Token to retrieve the next page of results.
```

----------------------------------------

TITLE: GenerateImagesConfigDict API
DESCRIPTION: A dictionary representation of image generation configuration. This structure mirrors GenerateImagesConfig and is often used for passing configuration data.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_124

LANGUAGE: APIDOC
CODE:
```
GenerateImagesConfigDict:
  Dictionary representation of image generation configuration.

  Attributes:
    add_watermark (bool): Whether to add a watermark to the generated images.
    aspect_ratio (str): The desired aspect ratio for the generated images (e.g., '1:1', '16:9').
    enhance_prompt (bool): Whether to enhance the prompt for better image quality.
    guidance_scale (float): Controls how closely the image generation follows the prompt.
    http_options (dict): Optional HTTP client options.
    include_rai_reason (bool): Whether to include reasoning for safety attributes.
    include_safety_attributes (bool): Whether to include safety attributes in the response.
    language (str): The language for the prompt and generated content.
    negative_prompt (str): A prompt describing what to avoid in the generated image.
    number_of_images (int): The number of images to generate.
    output_compression_quality (int): Compression quality for output images (0-100).
    output_gcs_uri (str): Google Cloud Storage URI for saving generated images.
    output_mime_type (str): MIME type for the output images (e.g., 'image/png').
    person_generation (str): Configuration for person generation (e.g., 'PERSON_GENERATION_ENABLED').
    safety_filter_level (str): The level of safety filtering to apply.
    seed (int): A seed for reproducible image generation.
```

----------------------------------------

TITLE: SafetyFilterLevel API
DESCRIPTION: Enumerates the levels for safety filtering, specifying thresholds for blocking content based on its safety rating.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_295

LANGUAGE: APIDOC
CODE:
```
SafetyFilterLevel:
  Enumerates safety filter levels.
  Members:
    BLOCK_LOW_AND_ABOVE: Blocks content with low safety ratings and above.
    BLOCK_MEDIUM_AND_ABOVE: Blocks content with medium safety ratings and above.
    BLOCK_NONE: No safety filtering is applied.
    BLOCK_ONLY_HIGH: Blocks only content with high safety ratings.
```

----------------------------------------

TITLE: LiveMusic Client Content
DESCRIPTION: Represents client-provided content for Live Music generation, including weighted prompts.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_294

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientContent:
  weighted_prompts: A list of prompts with associated weights for music generation.
```

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientContentDict:
  weighted_prompts: A list of prompts with associated weights for music generation.
```

----------------------------------------

TITLE: GenAI Video Generation Response API
DESCRIPTION: Details the response from a video generation request, including generated video URIs, counts of filtered media, and reasons for filtering.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_222

LANGUAGE: APIDOC
CODE:
```
GenerateVideosResponse:
  generated_videos: A list of generated video objects or URIs.
  rai_media_filtered_count: The number of media items filtered by RAI (Responsible AI).
  rai_media_filtered_reasons: Reasons why media items were filtered by RAI.

GenerateVideosResponseDict:
  generated_videos: A list of generated video objects or URIs.
  rai_media_filtered_count: The number of media items filtered by RAI (Responsible AI).
  rai_media_filtered_reasons: Reasons why media items were filtered by RAI.
```

----------------------------------------

TITLE: Generate Content with Uploaded File
DESCRIPTION: Generate content by uploading a file and referencing it in the `generate_content` method. This is supported for the Gemini Developer API. The file is first uploaded using `client.files.upload`.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_11

LANGUAGE: bash
CODE:
```
# Download a sample file
!wget -q https://storage.googleapis.com/generativeai-downloads/data/a11.txt
```

LANGUAGE: python
CODE:
```
from google.genai import Client

# Assuming 'client' is an initialized genai.Client instance
# Upload the file first
file = client.files.upload(file='a11.txt')

# Generate content referencing the uploaded file
response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents=['Could you summarize this file?', file]
)
print(response.text)
```

----------------------------------------

TITLE: Google GenAI Types Definitions
DESCRIPTION: Defines various data structures, enums, and types used within the Google Generative AI Python SDK for representing API inputs, outputs, and configurations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_80

LANGUAGE: APIDOC
CODE:
```
Types Definitions:

  ActivityEnd:
    Represents the end of an activity.

  ActivityEndDict:
    Dictionary representation of ActivityEnd.

  ActivityHandling:
    Enum for activity handling preferences.
    Members:
      ACTIVITY_HANDLING_UNSPECIFIED: Unspecified activity handling.
      NO_INTERRUPTION: No interruption for activity.
      START_OF_ACTIVITY_INTERRUPTS: Interrupts at the start of an activity.

  ActivityStart:
    Represents the start of an activity.

  ActivityStartDict:
    Dictionary representation of ActivityStart.

  AdapterSize:
    Enum for adapter size configurations.
    Members:
      ADAPTER_SIZE_UNSPECIFIED: Unspecified adapter size.
      ADAPTER_SIZE_ONE: Adapter size of 1.
      ADAPTER_SIZE_TWO: Adapter size of 2.
      ADAPTER_SIZE_FOUR: Adapter size of 4.
      ADAPTER_SIZE_EIGHT: Adapter size of 8.
      ADAPTER_SIZE_SIXTEEN: Adapter size of 16.
      ADAPTER_SIZE_THIRTY_TWO: Adapter size of 32.

  ApiAuth:
    Represents authentication configuration for the API.
    Attributes:
      api_key_config: Configuration for API key authentication.

  ApiAuthApiKeyConfig:
    Configuration for API key authentication.
    Attributes:
      api_key_string: The API key string.
      api_key_secret_version: The version of the API key secret.

  ApiAuthApiKeyConfigDict:
    Dictionary representation of ApiAuthApiKeyConfig.

  ApiAuthDict:
    Dictionary representation of ApiAuth.

  ApiKeyConfig:
    Configuration for API key authentication.
    Attributes:
      api_key_string: The API key string.

  ApiKeyConfigDict:
    Dictionary representation of ApiKeyConfig.

  ApiSpec:
    Enum for specifying API specifications.
    Members:
      API_SPEC_UNSPECIFIED: Unspecified API specification.
      SIMPLE_SEARCH: Simple search API.
      ELASTIC_SEARCH: Elastic search API.

  AudioChunk:
    Represents a chunk of audio data.
    Attributes:
      data: The audio data bytes.
      mime_type: The MIME type of the audio data.
      source_metadata: Metadata about the audio source.
```

----------------------------------------

TITLE: genai.types.LiveMusicClientMessage Attributes
DESCRIPTION: Documentation for attributes of LiveMusicClientMessage, including playback control.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_308

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientMessage:
  playback_control: dict | None
    Control information for music playback.
```

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientMessageDict:
  playback_control: dict | None
    Control information for music playback.
```

----------------------------------------

TITLE: Google GenAI Types and Enums
DESCRIPTION: Defines various data structures, types, and enumerations used within the Google Generative AI Python library for representing API responses, configurations, and model parameters.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_11

LANGUAGE: APIDOC
CODE:
```
Types and Enums:

ActivityEnd:
  Represents the end of an activity.

ActivityEndDict:
  Dictionary representation of ActivityEnd.

ActivityHandling:
  Enum for handling activity interruptions.
  - ACTIVITY_HANDLING_UNSPECIFIED: Default, unspecified handling.
  - NO_INTERRUPTION: No interruption is allowed.
  - START_OF_ACTIVITY_INTERRUPTS: Interruptions are allowed at the start of an activity.

ActivityStart:
  Represents the start of an activity.

ActivityStartDict:
  Dictionary representation of ActivityStart.

AdapterSize:
  Enum for specifying adapter sizes.
  - ADAPTER_SIZE_UNSPECIFIED: Unspecified adapter size.
  - ADAPTER_SIZE_ONE: Adapter size of 1.
  - ADAPTER_SIZE_TWO: Adapter size of 2.
  - ADAPTER_SIZE_FOUR: Adapter size of 4.
  - ADAPTER_SIZE_EIGHT: Adapter size of 8.
  - ADAPTER_SIZE_SIXTEEN: Adapter size of 16.
  - ADAPTER_SIZE_THIRTY_TWO: Adapter size of 32.

ApiAuth:
  Represents API authentication configuration.
  - api_key_config: Configuration for API key authentication.

ApiAuthApiKeyConfig:
  Configuration for API key authentication.
  - api_key_secret_version: The version of the API key secret.
```

----------------------------------------

TITLE: Create Vertex AI Client
DESCRIPTION: Initializes a client for the Vertex AI API, specifying your Google Cloud project ID and location. This client is used for accessing Gemini models via Vertex AI.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_3

LANGUAGE: python
CODE:
```
from google import genai

# Only run this block for Vertex AI API
client = genai.Client(
    vertexai=True, project='your-project-id', location='us-central1'
)
```

----------------------------------------

TITLE: GenAI Chats API
DESCRIPTION: Enables interaction with chat models, allowing users to send messages and receive responses, including streaming capabilities. Supports asynchronous and synchronous chat sessions.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_73

LANGUAGE: APIDOC
CODE:
```
Chat:
  send_message(message: str, **kwargs)
    Sends a message to the chat model and returns the response.
    Parameters:
      message: The user's message content.
    Returns: Chat response object.

  send_message_stream(message: str, **kwargs)
    Sends a message and streams the response chunks.
    Parameters:
      message: The user's message content.
    Returns: Iterator yielding response chunks.

Chats:
  create(**kwargs)
    Creates a new chat session.
    Returns: Chat session object.

AsyncChat:
  send_message(message: str, **kwargs)
    Asynchronously sends a message to the chat model.
    Parameters:
      message: The user's message content.
    Returns: Coroutine that resolves to the chat response object.

  send_message_stream(message: str, **kwargs)
    Asynchronously sends a message and streams the response chunks.
    Parameters:
      message: The user's message content.
    Returns: Async iterator yielding response chunks.

AsyncChats:
  create(**kwargs)
    Asynchronously creates a new chat session.
    Returns: Coroutine that resolves to an AsyncChat session object.
```

----------------------------------------

TITLE: Get Tuned Model Details
DESCRIPTION: Fetches detailed information about a specific tuned model using its model identifier.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_58

LANGUAGE: Python
CODE:
```
tuned_model = client.models.get(model=tuning_job.tuned_model.model)
print(tuned_model)
```

----------------------------------------

TITLE: Tuning Job Configuration Types
DESCRIPTION: Defines types for configuring tuning jobs, including HTTP options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_236

LANGUAGE: APIDOC
CODE:
```
GetTuningJobConfig:
  Represents configuration for getting a tuning job.
  Attributes:
    http_options: Configuration for HTTP requests.

GetTuningJobConfigDict:
  Dictionary representation of GetTuningJobConfig.
  Attributes:
    http_options: Configuration for HTTP requests.
```

----------------------------------------

TITLE: LiveClientSetup Attributes
DESCRIPTION: Defines the setup configuration for a live client session, including model, generation configuration, and transcription settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_284

LANGUAGE: APIDOC
CODE:
```
LiveClientSetup:
  context_window_compression: Configuration for context window compression.
  generation_config: Configuration for model generation parameters.
  input_audio_transcription: Settings for transcribing input audio.
  model: The generative model to use.
  output_audio_transcription: Settings for transcribing output audio.
```

----------------------------------------

TITLE: CountTokensResponse Type
DESCRIPTION: Response structure for the CountTokens API, providing the total token count and the count of cached tokens.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_57

LANGUAGE: APIDOC
CODE:
```
CountTokensResponse:
  Attributes:
    cached_content_token_count: int
      The number of tokens from cached content.
```

----------------------------------------

TITLE: HttpOptionsDict Type
DESCRIPTION: Dictionary representation of HttpOptions for configuration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_246

LANGUAGE: APIDOC
CODE:
```
HttpOptionsDict:
  - api_version: str
  - async_client_args: dict
  - base_url: str
  - client_args: dict
  - extra_body: dict
  - headers: dict
  - retry_options: HttpRetryOptionsDict
  - timeout: int
```

----------------------------------------

TITLE: GeneratedImageDict API Reference
DESCRIPTION: Defines the structure for image generation results, including enhanced prompts, image data, and safety attributes. This dictionary is returned by image generation functions.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_224

LANGUAGE: APIDOC
CODE:
```
GeneratedImageDict:
  Attributes:
    enhanced_prompt: str | None
      The prompt that was used to generate the image, potentially modified by the model.
    image: bytes
      The generated image data, typically in PNG format.
    rai_filtered_reason: str | None
      Reason why the image was filtered by safety settings, if applicable.
    safety_attributes: dict | None
      Detailed safety attributes associated with the generated image.
```

----------------------------------------

TITLE: GenAI Tuning Job Listing and Types
DESCRIPTION: Details attributes and classes related to listing tuning jobs and various dictionary representations for tuning-related data structures.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_364

LANGUAGE: APIDOC
CODE:
```
genai.types.ListTuningJobsResponse.tuning_jobs
  - Description: A list of tuning jobs.
  - Type: list[TuningJob]

genai.types.ListTuningJobsResponseDict.tuning_jobs
  - Description: A list of tuning jobs.
  - Type: list[TuningJobDict]

# Classes related to tuning data structures:
TunedModelCheckpointDict (class in genai.types)
  - Description: Dictionary representation for a tuned model checkpoint.
TunedModelDict (class in genai.types)
  - Description: Dictionary representation for a tuned model.
TunedModelInfoDict (class in genai.types)
  - Description: Dictionary representation for tuned model information.
TuningDatasetDict (class in genai.types)
  - Description: Dictionary representation for a tuning dataset.
TuningDataStatsDict (class in genai.types)
  - Description: Dictionary representation for tuning data statistics.
TuningExampleDict (class in genai.types)
  - Description: Dictionary representation for a tuning example.
TuningJobDict (class in genai.types)
  - Description: Dictionary representation for a tuning job.
TuningValidationDatasetDict (class in genai.types)
  - Description: Dictionary representation for a tuning validation dataset.
```

----------------------------------------

TITLE: DatasetStats Type Attributes
DESCRIPTION: Details the DatasetStats type, providing comprehensive statistics for a dataset, including character counts, example counts, and token distributions.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_66

LANGUAGE: APIDOC
CODE:
```
DatasetStats:
  total_billable_character_count: int
    - Total billable characters in the dataset.
  total_tuning_character_count: int
    - Total characters used for tuning.
  tuning_dataset_example_count: int
    - The number of examples in the tuning dataset.
  tuning_step_count: int
    - The number of tuning steps.
  user_dataset_examples: int
    - The number of user-provided dataset examples.
  user_input_token_distribution: DatasetDistribution
    - Distribution of input tokens per user message.
  user_message_per_example_distribution: DatasetDistribution
    - Distribution of user messages per example.
  user_output_token_distribution: DatasetDistribution
    - Distribution of output tokens per user message.
```

----------------------------------------

TITLE: GenAI Session Sending Methods
DESCRIPTION: Methods for sending data and messages within a live or chat session using the genai library. These methods facilitate real-time interaction with generative AI models.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_320

LANGUAGE: APIDOC
CODE:
```
genai.live.AsyncSession.send()
  Sends data or a request within an asynchronous live session.
  
  genai.live.AsyncSession.send_client_content()
  Sends client-generated content within an asynchronous live session.
  
  genai.chats.AsyncChat.send_message()
  Sends a message in an asynchronous chat session.
  
  genai.chats.Chat.send_message()
  Sends a message in a synchronous chat session.
  
  genai.chats.AsyncChat.send_message_stream()
  Sends a message and streams the response in an asynchronous chat session.
  
  genai.chats.Chat.send_message_stream()
  Sends a message and streams the response in a synchronous chat session.
  
  genai.live.AsyncSession.send_realtime_input()
  Sends real-time input data within an asynchronous live session.
  
  genai.live.AsyncSession.send_tool_response()
  Sends a response from a tool within an asynchronous live session.
```

----------------------------------------

TITLE: Upload File and Generate Content
DESCRIPTION: Illustrates uploading a local file using client.files.upload and then generating content by referencing the uploaded file in the contents argument. The response text is then printed.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_14

LANGUAGE: python
CODE:
```
file = client.files.upload(file='a11.txt')
response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents=['Could you summarize this file?', file]
)
print(response.text)
```

----------------------------------------

TITLE: Structure Contents: List of function call parts
DESCRIPTION: Example of providing multiple function calls as a list of `types.Part` objects. The SDK groups these into a single `types.ModelContent` object.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_23

LANGUAGE: python
CODE:
```
from google.genai import types

contents = [
    types.Part.from_function_call(
        name='get_weather_by_location',
        args={'location': 'Boston'}
    ),
    types.Part.from_function_call(
        name='get_weather_by_location',
        args={'location': 'New York'}
    ),
]
```

----------------------------------------

TITLE: Structure Contents: Canonical list[types.Content]
DESCRIPTION: Demonstrates providing content as a `list[types.Content]`, which is the canonical way and requires no SDK conversion. This example shows a single `types.Content` instance with a text part.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_15

LANGUAGE: python
CODE:
```
from google.genai import types

contents = types.Content(
    role='user',
    parts=[types.Part.from_text(text='Why is the sky blue?')]
)
```

----------------------------------------

TITLE: List Tuning Jobs Configuration and Response Types
DESCRIPTION: Defines the configuration parameters for listing tuning jobs and the structure of the response, including pagination details.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_274

LANGUAGE: APIDOC
CODE:
```
genai.types.ListTuningJobsConfig
  Attributes:
    page_token (str, optional): Token to retrieve the next page of results.
    page_size (int, optional): The maximum number of items to return per page.
    filter (str, optional): Filter to apply to the list of tuning jobs.
    http_options (genai.types.HttpOptions, optional): Options for the HTTP request.

genai.types.ListTuningJobsConfigDict
  Attributes:
    page_token (str, optional): Token to retrieve the next page of results.
    page_size (int, optional): The maximum number of items to return per page.
    filter (str, optional): Filter to apply to the list of tuning jobs.
    http_options (genai.types.HttpOptions, optional): Options for the HTTP request.
```

----------------------------------------

TITLE: List Base Models (Synchronous)
DESCRIPTION: Shows how to list available base models using the synchronous client. It includes iterating through the models and using a pager object to manage pagination, demonstrating `page_size` and accessing individual items.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_20

LANGUAGE: python
CODE:
```
for model in client.models.list():
    print(model)

pager = client.models.list(config={'page_size': 10})
print(pager.page_size)
print(pager[0])
pager.next_page()
print(pager[0])
```

----------------------------------------

TITLE: genai.types.FunctionDeclaration Attributes
DESCRIPTION: Documentation for attributes related to function declarations, including parameters and JSON schema.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_293

LANGUAGE: APIDOC
CODE:
```
FunctionDeclaration:
  parameters: dict | None
    A dictionary representing the function's parameters.
  parameters_json_schema: dict | None
    A dictionary representing the JSON schema for the function's parameters.
```

LANGUAGE: APIDOC
CODE:
```
FunctionDeclarationDict:
  parameters: dict | None
    A dictionary representing the function's parameters.
  parameters_json_schema: dict | None
    A dictionary representing the JSON schema for the function's parameters.
```

----------------------------------------

TITLE: Generate Videos
DESCRIPTION: Demonstrates how to generate videos using the Vertex AI or Gemini Developer API. This feature requires an allowlist. The code shows how to create a video generation operation and poll it until completion.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_45

LANGUAGE: python
CODE:
```
from google.genai import types
import time

# Create operation
operation = client.models.generate_videos(
    model='veo-2.0-generate-001',
    prompt='A neon hologram of a cat driving at top speed',
    config=types.GenerateVideosConfig(
        number_of_videos=1,
        fps=24,
        duration_seconds=5,
        enhance_prompt=True,
    ),
)

# Poll operation
while not operation.done:
    time.sleep(20)
    operation = client.operations.get(operation)

video = operation.result.generated_videos[0].video
video.show()
```

----------------------------------------

TITLE: Schema Configuration for Model Generation
DESCRIPTION: API documentation detailing how to configure the `generate_content` method for structured output. This includes specifying `response_mime_type` for JSON or Enum outputs and providing a `response_schema` (either a dictionary, Pydantic model, or Enum) for validation and parsing.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_40

LANGUAGE: APIDOC
CODE:
```
generate_content(model: str, contents: Union[str, List[str], Dict], config: GenerateContentConfig) -> GenerateContentResponse

  Generates content based on the provided model, prompt, and configuration.

  Parameters:
    model (str): The name of the model to use (e.g., 'gemini-2.5-flash').
    contents (Union[str, List[str], Dict]): The input prompt or conversation history.
    config (GenerateContentConfig):
      An object containing generation configuration parameters.
      Key parameters for structured output:
        response_mime_type (str):
          Specifies the desired MIME type for the response.
          Common values:
            - 'text/plain' (default)
            - 'application/json'
            - 'text/x.enum'
        response_schema (Union[Dict, BaseModel, Enum]):
          Defines the expected structure or allowed values for the response.
          - For 'application/json': Provide a JSON schema (as a Python dict) or a Pydantic BaseModel.
          - For 'text/x.enum': Provide an Enum class.
          The model will attempt to conform to this schema.

  Returns:
    GenerateContentResponse:
      An object containing the model's response.
      - response.text: The raw text response.
      - response.parsed: If a schema was provided and parsing was successful, this attribute contains the structured data (e.g., dict, Pydantic object, Enum member).

  Examples:
    1. JSON response with JSON schema:
       config = types.GenerateContentConfig(
           response_mime_type='application/json',
           response_json_schema={'type': 'object', 'properties': {'name': {'type': 'string'}}}
       )
       response = client.models.generate_content(model='gemini-1.5-flash', contents='User info', config=config)
       print(response.parsed) # Access structured JSON data

    2. JSON response with Pydantic schema:
       class User(BaseModel):
           name: str
           age: int
       config = types.GenerateContentConfig(
           response_mime_type='application/json',
           response_schema=User
       )
       response = client.models.generate_content(model='gemini-1.5-flash', contents='User info', config=config)
       print(response.parsed) # Access Pydantic object

    3. Enum response:
       class Color(Enum):
           RED = 'Red'
           BLUE = 'Blue'
       config = types.GenerateContentConfig(
           response_mime_type='text/x.enum',
           response_schema=Color
       )
       response = client.models.generate_content(model='gemini-1.5-flash', contents='Favorite color?', config=config)
       print(response.parsed) # Access Enum member

  Error Conditions:
    - If the model cannot conform to the schema, an error may be raised or the response may be malformed.
    - Invalid schema format will lead to errors.

```

----------------------------------------

TITLE: DeleteResourceJobDict API
DESCRIPTION: Details the DeleteResourceJobDict type and its attributes 'done', 'error', and 'name' within the Python GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_152

LANGUAGE: APIDOC
CODE:
```
DeleteResourceJobDict:
  done: bool
    Indicates if the deletion job is completed.
  error: object | None
    Details of any error that occurred during the job.
  name: str
    The name of the resource deletion job.
```

----------------------------------------

TITLE: genai.types.ListTuningJobsResponse Attributes
DESCRIPTION: Attributes for the response when listing tuning jobs, including pagination tokens.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_272

LANGUAGE: APIDOC
CODE:
```
ListTuningJobsResponse:
  next_page_token: Token to retrieve the next page of results.
```

----------------------------------------

TITLE: StartSensitivity Enumeration
DESCRIPTION: References to the enumeration values for StartSensitivity, indicating different levels of sensitivity for starting speech recognition.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_375

LANGUAGE: APIDOC
CODE:
```
StartSensitivity:
  START_SENSITIVITY_HIGH: StartSensitivity
    High sensitivity setting.
  START_SENSITIVITY_LOW: StartSensitivity
    Low sensitivity setting.
  START_SENSITIVITY_UNSPECIFIED: StartSensitivity
    Unspecified sensitivity setting.
```

----------------------------------------

TITLE: genai.types.FileState Attributes
DESCRIPTION: Documentation for attributes related to file states within the FileState type.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_1

LANGUAGE: APIDOC
CODE:
```
genai.types.FileState:
  ACTIVE: FileState
    Represents an active file state.
```

----------------------------------------

TITLE: LiveServerGoAway API Reference
DESCRIPTION: Represents a message indicating the server is going away. It includes information about the remaining time.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_221

LANGUAGE: APIDOC
CODE:
```
LiveServerGoAway:
  time_left: Optional[float]
    The amount of time left before the server disconnects.
```

----------------------------------------

TITLE: Structure Contents: Single function call part
DESCRIPTION: Example of providing a function call as a `types.Part` to the `contents` argument. The SDK converts this into a `types.ModelContent` object.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_21

LANGUAGE: python
CODE:
```
from google.genai import types

contents = types.Part.from_function_call(
    name='get_weather_by_location',
    args={'location': 'Boston'}
)
```

----------------------------------------

TITLE: SchemaDict Type API Documentation
DESCRIPTION: Details the attributes for SchemaDict, a dictionary-based representation of schemas, often used for configuration or data interchange. Includes common JSON schema properties.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_301

LANGUAGE: APIDOC
CODE:
```
SchemaDict:
  Attributes:
    - additional_properties: Schema for additional properties not explicitly defined.
    - any_of: A list of schemas where the data must match at least one.
    - default: The default value for the schema.
    - defs: Definitions for reusable schema components.
    - description: A description of the schema.
    - enum: A list of allowed values.
    - example: An example value for the schema.
    - format: The format of the data (e.g., 'date-time', 'email').
    - max_items: Maximum number of items in an array.
    - max_length: Maximum length of a string.
    - max_properties: Maximum number of properties in an object.
    - maximum: The maximum allowed value.
    - min_items: Minimum number of items in an array.
    - min_length: Minimum length of a string.
    - min_properties: Minimum number of properties in an object.
    - minimum: The minimum allowed value.
    - nullable: Indicates if the value can be null.
    - pattern: A regular expression pattern for string validation.
    - properties: Properties of an object.
    - property_ordering: Specifies the order of properties.
    - ref: Reference to another schema definition.
    - required: List of required properties.
    - title: A title for the schema.
    - type: The data type (e.g., 'string', 'integer', 'object').
```

----------------------------------------

TITLE: GenAI Video Generation Operation API
DESCRIPTION: Represents the status and results of an asynchronous video generation operation. Includes fields for completion status, errors, and the final response.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_221

LANGUAGE: APIDOC
CODE:
```
GenerateVideosOperation:
  done: Boolean indicating if the operation has completed.
  error: An error object if the operation failed.
  metadata: Operation metadata, such as progress updates.
  name: The unique name of the operation.
  response: The actual response object once the operation is done.
  result: The result of the operation, typically the generated video data.

GenerateVideosOperationDict:
  done: Boolean indicating if the operation has completed.
  error: An error object if the operation failed.
  metadata: Operation metadata, such as progress updates.
  name: The unique name of the operation.
  response: The actual response object once the operation is done.
  result: The result of the operation, typically the generated video data.
```

----------------------------------------

TITLE: Cache Get
DESCRIPTION: Retrieves an existing cache by its name. This allows you to inspect or reuse previously created cached content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_68

LANGUAGE: python
CODE:
```
cached_content = client.caches.get(name=cached_content.name)
```

----------------------------------------

TITLE: List Tuning Jobs Configuration
DESCRIPTION: Specifies configuration parameters for listing tuning jobs. Supports filtering, pagination, and custom HTTP options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_185

LANGUAGE: APIDOC
CODE:
```
ListTuningJobsConfigDict:
  filter: str | None
    A filter for the tuning jobs, e.g., 'state=RUNNING'.
  http_options: dict | None
    Optional HTTP options for the request.
  page_size: int | None
    The maximum number of tuning jobs to return.
  page_token: str | None
    A page token, received from a previous ListTuningJobsResponse, to retrieve the next page of results.
```

----------------------------------------

TITLE: LiveMusicFilteredPromptDict API
DESCRIPTION: Defines the dictionary representation for a filtered prompt, mirroring the LiveMusicFilteredPrompt structure. Useful for data serialization and deserialization.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_299

LANGUAGE: APIDOC
CODE:
```
LiveMusicFilteredPromptDict:
  filtered_reason: str
    Description: The reason why the prompt was filtered or modified.
  text: str
    Description: The actual text of the prompt after filtering.
```

----------------------------------------

TITLE: Create Tuning Job
DESCRIPTION: Demonstrates how to create a new tuning job using the Generative AI client. It requires specifying the base model and the training dataset configuration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_71

LANGUAGE: python
CODE:
```
from google.genai import types

tuning_job = client.tunings.tune(
    base_model=model,
    training_dataset=training_dataset,
    config=types.CreateTuningJobConfig(
        epoch_count=1, tuned_model_display_name='test_dataset_examples model'
    )
)
print(tuning_job)
```

----------------------------------------

TITLE: Get Tuning Job Status
DESCRIPTION: Retrieves the current status of a tuning job by its name and polls until the job is no longer running.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_70

LANGUAGE: python
CODE:
```
import time

running_states = set(
    [
        'JOB_STATE_PENDING',
        'JOB_STATE_RUNNING',
    ]
)

tuning_job = client.tunings.get(name=tuning_job.name)

while tuning_job.state in running_states:
    print(tuning_job.state)
    tuning_job = client.tunings.get(name=tuning_job.name)
    time.sleep(10)
```

----------------------------------------

TITLE: LiveMusic Connect Parameters
DESCRIPTION: Defines parameters for connecting to Live Music services, including model selection.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_297

LANGUAGE: APIDOC
CODE:
```
LiveMusicConnectParameters:
  model: The music generation model to use.
```

LANGUAGE: APIDOC
CODE:
```
LiveMusicConnectParametersDict:
  model: The music generation model to use.
```

----------------------------------------

TITLE: genai.types.AuthConfigOauthConfig Attributes
DESCRIPTION: Documentation for attributes related to OAuth configuration within the AuthConfig type.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
genai.types.AuthConfigOauthConfig:
  access_token: str
    The OAuth access token for authentication.
```

LANGUAGE: APIDOC
CODE:
```
genai.types.AuthConfigOauthConfigDict:
  access_token: str
    The OAuth access token for authentication.
```

----------------------------------------

TITLE: APIDOC: UpscaleImageParametersDict
DESCRIPTION: A dictionary representation of parameters for image upscaling. This structure mirrors UpscaleImageParameters, allowing for flexible input of image data, model, upscale factor, and configuration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_357

LANGUAGE: APIDOC
CODE:
```
UpscaleImageParametersDict:
  config: UpscaleImageConfigDict | None
    Configuration settings for the upscaling operation.
  image: bytes | PIL.Image.Image
    The image data to be upscaled, either as bytes or a PIL Image object.
  model: str
    The name of the model to use for upscaling.
  upscale_factor: int
    The factor by which to upscale the image.
```

----------------------------------------

TITLE: Video Generation Methods (genai.models)
DESCRIPTION: Facilitates the creation of video content from textual descriptions. This functionality is typically asynchronous and may return operation objects.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_164

LANGUAGE: APIDOC
CODE:
```
genai.models.Models.generate_videos(model_name: str, prompt: Union[str, Dict], generation_config: Optional[Dict] = None, safety_settings: Optional[Dict] = None, **kwargs) -> GenerateVideosOperation
  - Initiates video generation from a text prompt.
  - Parameters:
    - model_name: The name of the video generation model.
    - prompt: The text description for the video.
    - generation_config: Configuration for video generation (e.g., duration, aspect ratio).
    - safety_settings: Configuration for safety filters.
  - Returns: A GenerateVideosOperation object representing the ongoing video generation task.
```

----------------------------------------

TITLE: GenAI Model Tuning Data Structures
DESCRIPTION: Provides detailed documentation for the Python data structures used to define, manage, and monitor model tuning jobs. This includes attributes for checkpoints, datasets, and job configurations, essential for fine-tuning generative AI models.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_344

LANGUAGE: APIDOC
CODE:
```
TunedModelCheckpoint:
  Attributes:
    step: The training step number.

TunedModelCheckpointDict:
  Attributes:
    checkpoint_id: The unique identifier for the checkpoint.
    endpoint: The endpoint associated with the checkpoint.
    epoch: The epoch number for the checkpoint.
    step: The training step number.

TunedModelDict:
  Attributes:
    checkpoints: A list of TunedModelCheckpointDict objects.
    endpoint: The endpoint of the tuned model.
    model: The base model name.

TunedModelInfo:
  Attributes:
    base_model: The name of the base model.
    create_time: The timestamp when the model was created.
    update_time: The timestamp when the model was last updated.

TunedModelInfoDict:
  Attributes:
    base_model: The name of the base model.
    create_time: The timestamp when the model was created.
    update_time: The timestamp when the model was last updated.

TuningDataStats:
  Attributes:
    distillation_data_stats: Statistics for distillation data.
    supervised_tuning_data_stats: Statistics for supervised tuning data.

TuningDataStatsDict:
  Attributes:
    distillation_data_stats: Statistics for distillation data.
    supervised_tuning_data_stats: Statistics for supervised tuning data.

TuningDataset:
  Attributes:
    examples: A list of TuningExample objects.
    gcs_uri: The Google Cloud Storage URI for the dataset.
    vertex_dataset_resource: The Vertex AI dataset resource name.

TuningDatasetDict:
  Attributes:
    examples: A list of TuningExampleDict objects.
    gcs_uri: The Google Cloud Storage URI for the dataset.
    vertex_dataset_resource: The Vertex AI dataset resource name.

TuningExample:
  Attributes:
    output: The desired output for the tuning example.
    text_input: The input text for the tuning example.

TuningExampleDict:
  Attributes:
    output: The desired output for the tuning example.
    text_input: The input text for the tuning example.

TuningJob:
  Attributes:
    base_model: The name of the base model used for tuning.
    create_time: The timestamp when the tuning job was created.
    description: A description of the tuning job.
    distillation_spec: Specification for distillation tuning.
    encryption_spec: Specification for encryption.
    end_time: The timestamp when the tuning job ended.
    error: Information about any errors encountered.
    experiment: The experiment associated with the tuning job.
    labels: Key-value pairs for labeling the tuning job.
    name: The name of the tuning job.
    partner_model_tuning_spec: Specification for partner model tuning.
    pipeline_job: The associated pipeline job.
    satisfies_pzi: Indicates if the job satisfies PZI requirements.
    satisfies_pzs: Indicates if the job satisfies PZS requirements.
    service_account: The service account used for the tuning job.
    start_time: The timestamp when the tuning job started.
```

----------------------------------------

TITLE: Data Structures for Generation Responses
DESCRIPTION: Represents the structured output from content, image, and video generation requests. Includes details about generated content, metadata, and feedback.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_166

LANGUAGE: APIDOC
CODE:
```
GenerateContentResponseDict: Dict
  - Contains the generated text content, prompt feedback, and usage metadata.

GeneratedImageDict: Dict
  - Represents a single generated image, typically including a URL or binary data.

GenerateImagesResponseDict: Dict
  - Holds a list of GeneratedImageDict objects and associated metadata.

GeneratedVideoDict: Dict
  - Represents a single generated video, typically including a URL or identifier.

GenerateVideosResponseDict: Dict
  - Contains a list of GeneratedVideoDict objects and operation status.
```

----------------------------------------

TITLE: Async Count Tokens
DESCRIPTION: Provides an asynchronous example for counting tokens using `client.aio.models.count_tokens`. This allows token counting operations to be performed without blocking the main thread in async applications. Requires the 'google-generativeai' library and an async event loop.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_39

LANGUAGE: python
CODE:
```
response = await client.aio.models.count_tokens(
    model='gemini-2.0-flash-001',
    contents='why is the sky blue?',
)
print(response)
```

----------------------------------------

TITLE: genai.types.GenerateImagesResponse Attributes
DESCRIPTION: Documentation for attributes of GenerateImagesResponse, including safety attributes.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_309

LANGUAGE: APIDOC
CODE:
```
GenerateImagesResponse:
  positive_prompt_safety_attributes: dict | None
    Safety attributes related to the positive prompt.
```

LANGUAGE: APIDOC
CODE:
```
GenerateImagesResponseDict:
  positive_prompt_safety_attributes: dict | None
    Safety attributes related to the positive prompt.
```

----------------------------------------

TITLE: Get Tuned Model Details
DESCRIPTION: Retrieves detailed information about a specific tuned model using its model identifier.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_75

LANGUAGE: python
CODE:
```
tuned_model = client.models.get(model=tuning_job.tuned_model.model)
print(tuned_model)
```

----------------------------------------

TITLE: CountTokensResponse Type
DESCRIPTION: Response object from the CountTokens API. It provides the total number of tokens and the count of tokens from cached content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_121

LANGUAGE: APIDOC
CODE:
```
CountTokensResponse:
  description: Response from the CountTokens API.
  fields:
    cached_content_token_count: Token count from cached content.
    total_tokens: The total number of tokens counted.
```

----------------------------------------

TITLE: genai.types.Scale Attributes
DESCRIPTION: Documentation for attributes representing musical scales.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_6

LANGUAGE: APIDOC
CODE:
```
genai.types.Scale:
  A_FLAT_MAJOR_F_MINOR: Scale
    Represents the A-flat Major / F Minor scale.
  A_MAJOR_G_FLAT_MINOR: Scale
    Represents the A Major / G-flat Minor scale.
```

----------------------------------------

TITLE: genai.types.ActivityHandling Constants
DESCRIPTION: Defines how activities should be handled.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_274

LANGUAGE: APIDOC
CODE:
```
ActivityHandling:
  NO_INTERRUPTION: Specifies that activities should not be interrupted.
```

----------------------------------------

TITLE: List Tuning Jobs (Async)
DESCRIPTION: Demonstrates asynchronous listing of tuning jobs with the Google GenAI Python client. It covers iterating through an async pager and retrieving job details.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_64

LANGUAGE: python
CODE:
```
async for job in await client.aio.tunings.list(config={'page_size': 10}):
    print(job)

async_pager = await client.aio.tunings.list(config={'page_size': 10})
print(async_pager.page_size)
print(async_pager[0])
await async_pager.next_page()
print(async_pager[0])
```

----------------------------------------

TITLE: Get File Information
DESCRIPTION: Retrieves metadata and information about an uploaded file. Requires the file to have been previously uploaded using `client.files.upload`.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_51

LANGUAGE: python
CODE:
```
file1 = client.files.upload(file='2312.11805v3.pdf')
file_info = client.files.get(name=file1.name)
```

----------------------------------------

TITLE: Structure Contents: Non-function call part (URI)
DESCRIPTION: Example of providing a non-function call part, such as a file URI, to the `contents` argument. The SDK converts this into a `types.UserContent` object.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_25

LANGUAGE: python
CODE:
```
from google.genai import types

contents = types.Part.from_uri(
    file_uri='gs://generativeai-downloads/images/scones.jpg',
    mime_type='image/jpeg',
)
```

----------------------------------------

TITLE: List Models Configuration
DESCRIPTION: Defines the configuration parameters for listing available models. Supports pagination, filtering, and query base options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_182

LANGUAGE: APIDOC
CODE:
```
ListModelsConfig:
  filter: str
    An optional filter to apply to the listing of models.
  http_options: dict
    Optional HTTP client options for the request.
  page_size: int
    The maximum number of models to return in a single response.
  page_token: str
    A page token received from a previous ListModelsResponse to retrieve the next page of results.
  query_base: str
    An optional base URL for querying models.
```

LANGUAGE: APIDOC
CODE:
```
ListModelsConfigDict:
  filter: str
    An optional filter to apply to the listing of models.
  http_options: dict
    Optional HTTP client options for the request.
  page_size: int
    The maximum number of models to return in a single response.
  page_token: str
    A page token received from a previous ListModelsResponse to retrieve the next page of results.
  query_base: str
    An optional base URL for querying models.
```

----------------------------------------

TITLE: ToolCodeExecution and ToolCodeExecutionDict
DESCRIPTION: Specific types for configuring code execution tools.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_338

LANGUAGE: APIDOC
CODE:
```
ToolCodeExecution:
  (No specific attributes detailed in input)
```

LANGUAGE: APIDOC
CODE:
```
ToolCodeExecutionDict:
  (No specific attributes detailed in input)
```

----------------------------------------

TITLE: Generate Content with System Instruction
DESCRIPTION: Demonstrates generating content using the `generate_content` method with a system instruction to guide the model's behavior. It shows how to set `max_output_tokens` and `temperature` for response control.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_18

LANGUAGE: python
CODE:
```
from google.genai import types

response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents='high',
    config=types.GenerateContentConfig(
        system_instruction='I say high, you say low',
        max_output_tokens=3,
        temperature=0.3,
    ),
)
print(response.text)
```

----------------------------------------

TITLE: Manually Declare and Invoke Function
DESCRIPTION: Illustrates the process of manually declaring a function's schema (name, description, parameters) using `types.FunctionDeclaration` and `types.Schema` for tool use with the Gemini API. It then shows how to invoke the function with arguments received from the model and pass the function's response back to the model for further processing.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_25

LANGUAGE: python
CODE:
```
from google.genai import types

function = types.FunctionDeclaration(
    name='get_current_weather',
    description='Get the current weather in a given location',
    parameters=types.Schema(
        type='OBJECT',
        properties={
            'location': types.Schema(
                type='STRING',
                description='The city and state, e.g. San Francisco, CA',
            ),
        },
        required=['location'],
    ),
)

tool = types.Tool(function_declarations=[function])

response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents='What is the weather like in Boston?',
    config=types.GenerateContentConfig(
        tools=[tool],
    ),
)
print(response.function_calls[0])
```

LANGUAGE: python
CODE:
```
from google.genai import types

user_prompt_content = types.Content(
    role='user',
    parts=[types.Part.from_text(text='What is the weather like in Boston?')]
)
function_call_part = response.function_calls[0]
function_call_content = response.candidates[0].content

try:
    function_result = get_current_weather(
        **function_call_part.function_call.args
    )
    function_response = {'result': function_result}
except (
    Exception
) as e:  # instead of raising the exception, you can let the model handle it
    function_response = {'error': str(e)}

function_response_part = types.Part.from_function_response(
    name=function_call_part.name,
    response=function_response,
)
function_response_content = types.Content(
    role='tool', parts=[function_response_part]
)

response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents=[
        user_prompt_content,
        function_call_content,
        function_response_content,
    ],
    config=types.GenerateContentConfig(
        tools=[tool],
    ),
)

print(response.text)
```

----------------------------------------

TITLE: genai.types.LatLngDict API Reference
DESCRIPTION: A dictionary representation of a LatLng object. This structure is useful for passing geographical coordinates in a dictionary format.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_177

LANGUAGE: APIDOC
CODE:
```
LatLngDict:
  latitude: float
    The latitude, in degrees. Must be between -90 and 90.
  longitude: float
    The longitude, in degrees. Must be between -180 and 180.
```

----------------------------------------

TITLE: Python GenAI: CreateFileResponse Fields
DESCRIPTION: Represents the response structure for file creation operations, including SDK-specific HTTP response details.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_133

LANGUAGE: APIDOC
CODE:
```
CreateFileResponse:
  sdk_http_response: The HTTP response object as handled by the SDK.
```

----------------------------------------

TITLE: genai.types.JSONSchema API Reference
DESCRIPTION: Defines the structure and constraints for JSON data. This type allows specifying various properties like data types, formats, validation rules, and descriptive metadata for JSON objects.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_170

LANGUAGE: APIDOC
CODE:
```
JSONSchema:
  any_of: List[JSONSchema] | None
    A list of schemas, where the data must match at least one schema.
  default: Any | None
    The default value for the schema.
  description: str | None
    A description of the schema.
  enum: List[Any] | None
    A list of allowed values for the schema.
  format: str | None
    The format of the data (e.g., 'date-time', 'email').
  items: JSONSchema | List[JSONSchema] | None
    Defines the schema for array items.
  max_items: int | None
    The maximum number of items allowed in an array.
  max_length: int | None
    The maximum length of a string.
  max_properties: int | None
    The maximum number of properties allowed in an object.
  maximum: float | int | None
    The maximum numeric value allowed.
  min_items: int | None
    The minimum number of items allowed in an array.
  min_length: int | None
    The minimum length of a string.
  min_properties: int | None
    The minimum number of properties allowed in an object.
  minimum: float | int | None
    The minimum numeric value allowed.
  pattern: str | None
    A regular expression pattern that the string must match.
  properties: Dict[str, JSONSchema] | None
    An object where keys are property names and values are their schemas.
  required: List[str] | None
    A list of property names that are required.
  title: str | None
    A title for the schema.
  type: JSONSchemaType | List[JSONSchemaType] | None
    The data type(s) allowed for the schema.
```

----------------------------------------

TITLE: Structure Contents: List of non-function call parts
DESCRIPTION: Example of providing a list of non-function call parts, such as text and file URIs, to the `contents` argument. The SDK groups these into a single `types.UserContent` object.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_27

LANGUAGE: python
CODE:
```
from google.genai import types

contents = [
    types.Part.from_text('What is this image about?'),
    types.Part.from_uri(

```

----------------------------------------

TITLE: Count Tokens (Asynchronous)
DESCRIPTION: Provides an example of counting tokens asynchronously using the client.aio interface. This allows token counting operations to be performed without blocking the event loop.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_52

LANGUAGE: python
CODE:
```
response = await client.aio.models.count_tokens(
    model='gemini-2.0-flash-001',
    contents='why is the sky blue?',
)
print(response)
```

----------------------------------------

TITLE: Configure Async Client with Aiohttp
DESCRIPTION: Demonstrates how to configure the client to use aiohttp for faster asynchronous operations. Additional client session arguments can be passed through async_client_args.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_9

LANGUAGE: python
CODE:
```
from google.genai import types
from google.genai import Client

http_options = types.HttpOptions(
    async_client_args={'cookies': ..., 'ssl': ...},
)

client=Client(..., http_options=http_options)
```

----------------------------------------

TITLE: Google GenAI Video Generation Configuration
DESCRIPTION: Defines configuration parameters for generating videos using the Google Generative AI API. This covers aspects like aspect ratio, duration, and audio generation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_219

LANGUAGE: APIDOC
CODE:
```
GenerateVideosConfig:
  __init__(self, **kwargs)
    Represents configuration for video generation.

  aspect_ratio: str
    The aspect ratio of the generated video (e.g., '16:9').
  compression_quality: int
    The compression quality for the output video (0-100).
  duration_seconds: int
    The duration of the generated video in seconds.
  enhance_prompt: bool
    Whether to enhance the prompt for better results.
  fps: int
    Frames per second for the generated video.
  generate_audio: bool
    Whether to generate audio for the video.
  http_options: dict
    HTTP client options for the request.
  last_frame: str
    Specifies the content of the last frame.
  negative_prompt: str
    A prompt describing what to avoid in the generated video.
  number_of_videos: int
    The number of videos to generate.
  output_gcs_uri: str
    Google Cloud Storage URI for the output video.
  person_generation: str
    Specifies the type of person generation allowed.
  pubsub_topic: str
    Pub/Sub topic for notifications about video generation status.
```

----------------------------------------

TITLE: Log Probability and Generation Configuration
DESCRIPTION: Covers attributes related to log probabilities and generation configuration, including detailed log probability results and settings for enabling logprobs during content generation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_242

LANGUAGE: APIDOC
CODE:
```
LogprobsResultCandidate.log_probability:
  The log probability associated with a candidate.

LogprobsResultCandidateDict.log_probability:
  The log probability associated with a candidate (dictionary format).

GenerateContentConfig.logprobs:
  Enables or configures logprobs for content generation.

GenerateContentConfigDict.logprobs:
  Enables or configures logprobs for content generation (dictionary format).

GenerationConfig.logprobs:
  Enables or configures logprobs for content generation.

GenerationConfigDict.logprobs:
  Enables or configures logprobs for content generation (dictionary format).

Candidate.logprobs_result:
  The result of log probability calculations for a candidate.

CandidateDict.logprobs_result:
  The result of log probability calculations for a candidate (dictionary format).

LogprobsResultCandidateDict:
  Dictionary structure for a candidate with log probability results.

LogprobsResultDict:
  Dictionary structure for log probability results.

LogprobsResultTopCandidatesDict:
  Dictionary structure for top candidates in log probability results.
```

----------------------------------------

TITLE: Async Generate Content (Non-Streaming)
DESCRIPTION: Provides an example of asynchronous content generation using the `client.aio` interface. This allows non-blocking calls to the model, suitable for asynchronous applications. Requires the 'google-generativeai' library and an async event loop.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_35

LANGUAGE: python
CODE:
```
response = await client.aio.models.generate_content(
    model='gemini-2.0-flash-001', contents='Tell me a story in 300 words.'
)

print(response.text)
```

----------------------------------------

TITLE: List Tuning Jobs Response
DESCRIPTION: Defines the structure of the response when listing tuning jobs. Includes the list of tuning jobs and a token for pagination.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_186

LANGUAGE: APIDOC
CODE:
```
ListTuningJobsResponseDict:
  next_page_token: str | None
    A token to retrieve the next page of tuning jobs. If empty, there are no more pages.
  tuning_jobs: list[TuningJob]
    A list of TuningJob objects.
```

----------------------------------------

TITLE: Type Enum Values
DESCRIPTION: Enumerates the possible data types supported by the API, used for schema definitions or data validation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_412

LANGUAGE: APIDOC
CODE:
```
Type:
  ARRAY: Represents an array data type.
  BOOLEAN: Represents a boolean data type.
  INTEGER: Represents an integer data type.
  NULL: Represents a null value.
  NUMBER: Represents a numeric data type (float or integer).
  OBJECT: Represents an object or dictionary data type.
  STRING: Represents a string data type.
  TYPE_UNSPECIFIED: Default, unspecified type.
```

----------------------------------------

TITLE: Part Attributes and Factory Methods
DESCRIPTION: Details the various types of content a Part can represent and methods for creating Part objects.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_263

LANGUAGE: APIDOC
CODE:
```
Part:
  Attributes:
    code_execution_result: CodeExecutionResult | None
      Result of a code execution.
    executable_code: ExecutableCode | None
      Code that can be executed.
    file_data: FileData | None
      Data from a file.
    function_call: FunctionCall | None
      A call to a function.
    function_response: FunctionResponse | None
      A response from a function.
    inline_data: InlineData | None
      Inline data, such as images.
    text: str | None
      Plain text content.
    thought: Thought | None
      Information about the model's thought process.
    thought_signature: ThoughtSignature | None
      Signature of the model's thought process.
    video_metadata: VideoMetadata | None
      Metadata for video content.

  Factory Methods:
    from_bytes(mime_type: str, data: bytes) -> Part
      Creates a Part from raw bytes.
    from_code_execution_result(code: str, output: str, ...)
      Creates a Part from code execution results.
    from_executable_code(code: str, language: str)
      Creates a Part representing executable code.
```

----------------------------------------

TITLE: genai.types.Interval and IntervalDict Members
DESCRIPTION: Defines a time interval with start and end times, typically used for logging or tracking temporal data.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_169

LANGUAGE: APIDOC
CODE:
```
Interval:
  end_time: The timestamp marking the end of the interval.
  start_time: The timestamp marking the start of the interval.

IntervalDict:
  end_time: The timestamp marking the end of the interval.
  start_time: The timestamp marking the start of the interval.
```

----------------------------------------

TITLE: Async Client Configuration (Aiohttp)
DESCRIPTION: Enhance performance by using aiohttp for async client operations. Pass additional arguments for `aiohttp.ClientSession.request` via `async_client_args` in `HttpOptions`.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_8

LANGUAGE: python
CODE:
```
from google.genai import types
from google.genai import Client

# Install with: pip install google-genai[aiohttp]

http_options = types.HttpOptions(
    async_client_args={'cookies': ..., 'ssl': ...} # Example args for aiohttp.ClientSession.request
)

client = Client(..., http_options=http_options)
```

----------------------------------------

TITLE: Live Client Real-time Input
DESCRIPTION: Details real-time input data for a live client, including text, audio, media chunks, and activity timestamps.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_189

LANGUAGE: APIDOC
CODE:
```
LiveClientRealtimeInput:
  activity_end: datetime | None
    Timestamp when the activity ended.
  activity_start: datetime | None
    Timestamp when the activity started.
  audio: bytes | None
    Raw audio data.
  audio_stream_end: bool | None
    Flag indicating the end of an audio stream.
  media_chunks: list[MediaChunk] | None
    A list of media data chunks.
  text: str | None
    Textual input data.
```

----------------------------------------

TITLE: Configure Safety Settings
DESCRIPTION: Example of setting safety thresholds for specific harm categories during content generation using `types.SafetySetting`.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_33

LANGUAGE: python
CODE:
```
from google.genai import types

response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents='Say something bad.',
    config=types.GenerateContentConfig(
        safety_settings=[
            types.SafetySetting(
                category='HARM_CATEGORY_HATE_SPEECH',
                threshold='BLOCK_ONLY_HIGH',
            )
        ]
    ),
)
print(response.text)
```

----------------------------------------

TITLE: FileSource Enumeration
DESCRIPTION: Defines the possible sources for a file within the GenAI system.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_189

LANGUAGE: APIDOC
CODE:
```
FileSource:
  GENERATED: Indicates the file was generated by the model.
  SOURCE_UNSPECIFIED: Placeholder for an unspecified file source.
  UPLOADED: Indicates the file was uploaded by the user.
```

----------------------------------------

TITLE: genai.types.JobErrorDict API Reference
DESCRIPTION: A dictionary representation of a JobError. This structure is often used for serialization or when receiving error information in a dictionary format.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_173

LANGUAGE: APIDOC
CODE:
```
JobErrorDict:
  code: str
    An error code indicating the type of error.
  details: str | None
    Additional details or context about the error.
  message: str
    A human-readable message describing the error.
```

----------------------------------------

TITLE: File and FileData types
DESCRIPTION: Structures for representing file metadata and data, including upload details, timestamps, and content identifiers.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_187

LANGUAGE: APIDOC
CODE:
```
File:
  create_time: Timestamp when the file was created.
  display_name: A user-friendly name for the file.
  download_uri: URI to download the file content.
  error: Information about any errors encountered during file processing.
  expiration_time: Timestamp when the file will expire.
  mime_type: The MIME type of the file (e.g., 'image/jpeg').
  name: The system-generated name or identifier for the file.
  sha256_hash: SHA256 hash of the file content.
  size_bytes: The size of the file in bytes.
  source: The source of the file (e.g., user upload, external URL).
  state: The current state of the file (e.g., processing, ready).
  update_time: Timestamp when the file was last updated.
  uri: The primary URI associated with the file.
  video_metadata: Metadata specific to video files.

FileData:
  display_name: A user-friendly name for the file data.
  file_uri: The URI pointing to the file content.
  mime_type: The MIME type of the file data.

FileDataDict:
  display_name: Dictionary representation of the display name.
  file_uri: Dictionary representation of the file URI.
  mime_type: Dictionary representation of the MIME type.

FileDict:
  create_time: Dictionary representation of the creation timestamp.
```

----------------------------------------

TITLE: SegmentDict Type API Documentation
DESCRIPTION: Details the attributes for SegmentDict, a dictionary-based representation of a text segment. Useful for data serialization and deserialization.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_305

LANGUAGE: APIDOC
CODE:
```
SegmentDict:
  Attributes:
    - end_index: The ending index of the segment.
    - part_index: The index of the part this segment belongs to.
    - start_index: The starting index of the segment.
    - text: The text content of the segment.
```

----------------------------------------

TITLE: Authentication and Token Handling
DESCRIPTION: Attributes related to authentication configurations, specifically focusing on OpenID Connect (OIDC) and ID tokens.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_194

LANGUAGE: APIDOC
CODE:
```
genai.types.AuthConfigOidcConfig.id_token
  Description: The ID token used for OIDC authentication.
  Type: str

genai.types.AuthConfigOidcConfigDict.id_token
  Description: Dictionary representation of the OIDC ID token.
  Type: str
```

----------------------------------------

TITLE: Paginate Tuning Jobs (Synchronous)
DESCRIPTION: Demonstrates iterating through a list of tuning jobs using a pager object, including accessing elements and fetching the next page.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_79

LANGUAGE: python
CODE:
```
pager = client.tunings.list(config={'page_size': 10})
print(pager.page_size)
print(pager[0])
pager.next_page()
print(pager[0])
```

----------------------------------------

TITLE: List Tuned Models (Async)
DESCRIPTION: Demonstrates how to asynchronously list tuned models using the Google GenAI Python client. It shows iterating through a pager and accessing job details.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_61

LANGUAGE: python
CODE:
```
async for job in await client.aio.models.list(config={'page_size': 10, 'query_base': False}}):
    print(job)

async_pager = await client.aio.models.list(config={'page_size': 10, 'query_base': False}})
print(async_pager.page_size)
print(async_pager[0])
await async_pager.next_page()
print(async_pager[0])
```

----------------------------------------

TITLE: Get Batch Prediction Job
DESCRIPTION: Retrieves a specific batch prediction job by its name. It then accesses the job's current state.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_83

LANGUAGE: python
CODE:
```
# Get a job by name
job = client.batches.get(name=job.name)

job.state
```

----------------------------------------

TITLE: APIDOC: UpscaleImageParameters
DESCRIPTION: Represents the parameters required for an image upscaling operation. It includes the image data, the model to use, the desired upscale factor, and associated configuration settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_356

LANGUAGE: APIDOC
CODE:
```
UpscaleImageParameters:
  config: UpscaleImageConfig | None
    Configuration settings for the upscaling operation.
  image: bytes | PIL.Image.Image
    The image data to be upscaled, either as bytes or a PIL Image object.
  model: str
    The name of the model to use for upscaling.
  upscale_factor: int
    The factor by which to upscale the image.
```

----------------------------------------

TITLE: GenAI EnterpriseWebSearch Types
DESCRIPTION: Documentation for EnterpriseWebSearch and its dictionary representation, likely used for configuring or representing enterprise-specific web search functionalities.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_93

LANGUAGE: APIDOC
CODE:
```
EnterpriseWebSearch:
  (Represents enterprise web search configuration)

EnterpriseWebSearchDict:
  (Dictionary representation of EnterpriseWebSearch)
```

----------------------------------------

TITLE: ToolConfig and ToolConfigDict
DESCRIPTION: Configuration settings for tools, including function calling and retrieval.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_340

LANGUAGE: APIDOC
CODE:
```
ToolConfig:
  function_calling_config: Configuration for function calling.
  retrieval_config: Configuration for retrieval.
```

LANGUAGE: APIDOC
CODE:
```
ToolConfigDict:
  function_calling_config: Configuration for function calling.
  retrieval_config: Configuration for retrieval.
```

----------------------------------------

TITLE: GenAI Generated Image API
DESCRIPTION: Represents a single generated image, including its content, safety attributes, and any enhancement or filtering information.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_223

LANGUAGE: APIDOC
CODE:
```
GeneratedImage:
  enhanced_prompt: The prompt after potential enhancements.
  image: The generated image data or reference.
  rai_filtered_reason: The reason if the image was filtered by RAI.
  safety_attributes: Attributes related to the safety assessment of the image.
```

----------------------------------------

TITLE: RagChunk API
DESCRIPTION: Represents a chunk of text retrieved during a Retrieval Augmented Generation (RAG) process, including its content and page span.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_350

LANGUAGE: APIDOC
CODE:
```
RagChunk:
  text: str
    The actual text content of the chunk.
  page_span: RagChunkPageSpan
    Information about the page range this chunk originates from.
```

----------------------------------------

TITLE: genai.types.Schema and SchemaDict Attributes
DESCRIPTION: Documentation for the 'default' and 'defs' attributes found in genai.types.Schema and genai.types.SchemaDict.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_119

LANGUAGE: APIDOC
CODE:
```
genai.types.Schema.default
  - Description: (Details not provided in input)

genai.types.Schema.defs
  - Description: (Details not provided in input)

genai.types.SchemaDict.default
  - Description: (Details not provided in input)

genai.types.SchemaDict.defs
  - Description: (Details not provided in input)
```

----------------------------------------

TITLE: File Get
DESCRIPTION: Retrieves information about an uploaded file using its name. This is useful for verifying file status or obtaining its URI.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_65

LANGUAGE: python
CODE:
```
file1 = client.files.upload(file='2312.11805v3.pdf')
file_info = client.files.get(name=file1.name)
```

----------------------------------------

TITLE: ComputeTokensConfig and ComputeTokensConfigDict
DESCRIPTION: Defines configuration options for computing tokens, including HTTP options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_46

LANGUAGE: APIDOC
CODE:
```
ComputeTokensConfig:
  http_options: object
    Optional HTTP client options.

ComputeTokensConfigDict:
  http_options: object
    Optional HTTP client options.
```

----------------------------------------

TITLE: genai.types.DistillationSpec Attributes
DESCRIPTION: Documentation for attributes of DistillationSpec, including pipeline root directory.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_307

LANGUAGE: APIDOC
CODE:
```
DistillationSpec:
  pipeline_root_directory: str
    The root directory for the distillation pipeline.
```

LANGUAGE: APIDOC
CODE:
```
DistillationSpecDict:
  pipeline_root_directory: str
    The root directory for the distillation pipeline.
```

----------------------------------------

TITLE: UrlContextMetadata and UrlContextMetadataDict Structure
DESCRIPTION: Defines the structure for URL context metadata and its dictionary representation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_362

LANGUAGE: APIDOC
CODE:
```
UrlContextMetadata:
  url_metadata: Metadata related to the URL. (UrlMetadata)
```

LANGUAGE: APIDOC
CODE:
```
UrlContextMetadataDict:
  url_metadata: Metadata related to the URL. (UrlMetadataDict)
```

----------------------------------------

TITLE: Get Tuning Job Status
DESCRIPTION: Retrieves the status of a specific tuning job by its name. This is useful for monitoring the progress of a tuning operation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_72

LANGUAGE: python
CODE:
```
tuning_job = client.tunings.get(name=tuning_job.name)
print(tuning_job)
```

----------------------------------------

TITLE: genai.types.ReplayRequest Attributes
DESCRIPTION: References for method and safety settings within replay requests.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_258

LANGUAGE: APIDOC
CODE:
```
ReplayRequest:
  method: The HTTP method used for the replay request.
SafetySetting:
  method: Specifies the method or category for safety settings.
```

----------------------------------------

TITLE: GenAI Retry and Realtime Input Attributes
DESCRIPTION: References to attributes related to HTTP retry options and realtime input for live client interactions, including attempts, audio, and audio stream end.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_30

LANGUAGE: APIDOC
CODE:
```
HttpRetryOptions:
  attempts: The number of retry attempts for HTTP requests.

HttpRetryOptionsDict:
  attempts: The number of retry attempts for HTTP requests in a dictionary.

LiveClientRealtimeInput:
  audio: Represents audio input for realtime client.

LiveClientRealtimeInputDict:
  audio: Represents audio input for realtime client in a dictionary.

LiveSendRealtimeInputParameters:
  audio: Parameters related to audio input for sending realtime data.

LiveSendRealtimeInputParametersDict:
  audio: Parameters related to audio input for sending realtime data in a dictionary.

LiveClientRealtimeInput:
  audio_stream_end: Signal indicating the end of an audio stream.

LiveClientRealtimeInputDict:
  audio_stream_end: Signal indicating the end of an audio stream in a dictionary.
```

----------------------------------------

TITLE: Model Configuration
DESCRIPTION: Configuration for model operations, specifying HTTP options for the request.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_142

LANGUAGE: APIDOC
CODE:
```
GetModelConfig:
  http_options: dict
    Description: Options for the HTTP request.

GetModelConfigDict:
  http_options: dict
    Description: Options for the HTTP request.
```

----------------------------------------

TITLE: BatchJobDestination Type Documentation
DESCRIPTION: Defines the structure for specifying the destination of batch job outputs. Supports BigQuery, GCS URIs, and file names, along with response formatting options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_32

LANGUAGE: APIDOC
CODE:
```
BatchJobDestination:
  Attributes:
    bigquery_uri: The BigQuery dataset and table URI where results should be stored.
    file_name: The name for output files if storing in a file-based destination.
    format: The desired output format for the batch job results (e.g., JSON, CSV).
    gcs_uri: The Google Cloud Storage URI where results should be stored.
    inlined_responses: Boolean flag to indicate if responses should be inlined within the output.
```

----------------------------------------

TITLE: SafetyRating and SafetyRatingDict API
DESCRIPTION: Defines the structure for safety ratings of content, including whether content is blocked, its category, probability, and severity scores.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_296

LANGUAGE: APIDOC
CODE:
```
SafetyRating:
  Represents the safety rating of a piece of content.
  Attributes:
    blocked: Boolean indicating if the content was blocked.
    category: The safety category (e.g., HARM_CATEGORY_SEXUALLY_EXPLICIT).
    overwritten_threshold: Boolean indicating if the threshold was overwritten.
    probability: The probability of the content belonging to the category.
    probability_score: A numerical score representing the probability.
    severity: The severity level of the content.
    severity_score: A numerical score representing the severity.

SafetyRatingDict:
  Dictionary representation of SafetyRating.
  Attributes:
    blocked: Boolean indicating if the content was blocked.
    category: The safety category.
    overwritten_threshold: Boolean indicating if the threshold was overwritten.
    probability: The probability of the category.
    probability_score: Numerical score for probability.
    severity: The severity level.
    severity_score: Numerical score for severity.
```

----------------------------------------

TITLE: Content and ContentDict
DESCRIPTION: Details the Content and ContentDict structures, representing a piece of content with a role and parts.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_48

LANGUAGE: APIDOC
CODE:
```
Content:
  parts: list
    A list of content parts (e.g., text, images).
  role: str
    The role associated with the content (e.g., 'user', 'model').

ContentDict:
  parts: list
    A list of content parts (e.g., text, images).
  role: str
    The role associated with the content (e.g., 'user', 'model').
```

----------------------------------------

TITLE: TuningDataStats Attributes
DESCRIPTION: Details the attributes for TuningDataStats, which provides statistics related to distillation and supervised tuning data.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_404

LANGUAGE: APIDOC
CODE:
```
TuningDataStats:
  distillation_data_stats: Statistics for distillation tuning.
  supervised_tuning_data_stats: Statistics for supervised tuning.

TuningDataStatsDict:
  distillation_data_stats: Statistics for distillation tuning (dictionary representation).
  supervised_tuning_data_stats: Statistics for supervised tuning (dictionary representation).
```

----------------------------------------

TITLE: GenAI Type and Class References
DESCRIPTION: References to various data types and classes within the genai.types module, such as ApiAuthApiKeyConfigDict, ApiAuthDict, ApiKeyConfigDict, ApiSpec, and FunctionCall.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_27

LANGUAGE: APIDOC
CODE:
```
ApiAuthApiKeyConfigDict (class in genai.types): Represents an API authentication configuration with an API key.

ApiAuthDict (class in genai.types): Represents a general API authentication configuration.

ApiKeyConfigDict (class in genai.types): Represents an API key configuration.

ApiSpec (class in genai.types): Represents an API specification.

FunctionCall:
  args: Attribute representing the arguments for a function call.

FunctionCallDict:
  args: Attribute representing the arguments for a function call in a dictionary.
```

----------------------------------------

TITLE: GenerateContentConfig Parameters for Python GenAI
DESCRIPTION: Details the configuration parameters available for controlling content generation in the Python GenAI library. This includes settings for logging, output tokens, media resolution, penalties, and more.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_206

LANGUAGE: APIDOC
CODE:
```
GenerateContentConfig:
  logprobs: bool
    Enable log probabilities for the response.
  max_output_tokens: int
    The maximum number of tokens to generate in the output.
  media_resolution: str
    Specifies the resolution for media content.
  model_selection_config: object
    Configuration for model selection.
  presence_penalty: float
    Penalty for repeating tokens.
  response_json_schema: str
    Schema for JSON response.
  response_logprobs: bool
    Enable log probabilities for the response.
  response_mime_type: str
    MIME type for the response.
  response_modalities: list[str]
    Modalities expected in the response.
  response_schema: str
    Schema for the response.
  routing_config: object
    Configuration for routing.
  safety_settings: object
    Settings for safety filters.
  seed: int
    Seed for reproducible generation.
  speech_config: object
    Configuration for speech synthesis.
  stop_sequences: list[str]
    Sequences that stop generation.
  system_instruction: object
    System-level instructions for the model.
  temperature: float
    Controls randomness in generation.
  thinking_config: object
    Configuration for thinking process.
  tool_config: object
    Configuration for tools.
  tools: list[object]
    List of tools available to the model.
  top_k: int
    Top-K sampling parameter.
  top_p: float
    Top-P (nucleus) sampling parameter.
```

----------------------------------------

TITLE: List Models Response
DESCRIPTION: Represents the response structure when listing models. Contains a list of models and a token for fetching subsequent pages.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_184

LANGUAGE: APIDOC
CODE:
```
ListModelsResponseDict:
  models: list[Model]
    A list of Model objects.
  next_page_token: str | None
    A token to retrieve the next page of models. If empty, there are no more pages.
```

----------------------------------------

TITLE: genai.types.LatLng API Reference
DESCRIPTION: Represents a geographical location with latitude and longitude coordinates. This type is used for specifying points on the Earth's surface.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_176

LANGUAGE: APIDOC
CODE:
```
LatLng:
  latitude: float
    The latitude, in degrees. Must be between -90 and 90.
  longitude: float
    The longitude, in degrees. Must be between -180 and 180.
```

----------------------------------------

TITLE: genai.types.GenerateContentResponseUsageMetadata Attributes
DESCRIPTION: References to usage metadata attributes for content generation, including cached tokens.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_57

LANGUAGE: APIDOC
CODE:
```
GenerateContentResponseUsageMetadata:
  cache_tokens_details: Details about tokens used from cache.
  cached_content_token_count: Count of tokens from cached content.
```

----------------------------------------

TITLE: genai.types.JobError API Reference
DESCRIPTION: Represents an error encountered during a job execution. It provides details about the error, including a code, a message, and additional context.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_172

LANGUAGE: APIDOC
CODE:
```
JobError:
  code: str
    An error code indicating the type of error.
  details: str | None
    Additional details or context about the error.
  message: str
    A human-readable message describing the error.
```

----------------------------------------

TITLE: Python GenAI: CreateFileResponseDict Fields
DESCRIPTION: Dictionary-based representation of the file creation response, mirroring CreateFileResponse fields.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_134

LANGUAGE: APIDOC
CODE:
```
CreateFileResponseDict:
  sdk_http_response: The HTTP response object as handled by the SDK.
```

----------------------------------------

TITLE: Install Google Gen AI SDK (Python)
DESCRIPTION: Installs the google-genai Python package using pip. This is the first step to use the SDK.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_0

LANGUAGE: shell
CODE:
```
pip install google-genai
```

----------------------------------------

TITLE: Get Batch Prediction Job Status
DESCRIPTION: Retrieves the status of a specific batch prediction job by its name. Useful for monitoring job progress.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_87

LANGUAGE: python
CODE:
```
# Get a job by name
job = client.batches.get(name=job.name)

job.state
```

----------------------------------------

TITLE: GenAI ExternalApiElasticSearchParams
DESCRIPTION: Defines parameters for configuring Elasticsearch searches within external API calls, including index, number of hits, and search templates.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_97

LANGUAGE: APIDOC
CODE:
```
ExternalApiElasticSearchParams:
  index: string
    The Elasticsearch index to search.
  num_hits: integer
    The maximum number of hits to return.
  search_template: string
    The Elasticsearch search template to use.

ExternalApiElasticSearchParamsDict:
  index: string
    The Elasticsearch index to search.
  num_hits: integer
    The maximum number of hits to return.
  search_template: string
    The Elasticsearch search template to use.
```

----------------------------------------

TITLE: LiveConnect Parameters
DESCRIPTION: Specifies parameters for LiveConnect, including configuration and model selection.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_293

LANGUAGE: APIDOC
CODE:
```
LiveConnectParameters:
  config: Configuration object for LiveConnect.
  model: Specifies the model to be used with LiveConnect.
```

LANGUAGE: APIDOC
CODE:
```
LiveConnectParametersDict:
  config: Configuration dictionary for LiveConnect.
  model: Specifies the model to be used with LiveConnect.
```

----------------------------------------

TITLE: Tuning Job Configuration
DESCRIPTION: Configuration for tuning job operations, including HTTP options for the request.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_144

LANGUAGE: APIDOC
CODE:
```
GetTuningJobConfig:
  http_options: dict
    Description: Options for the HTTP request.

GetTuningJobConfigDict:
  http_options: dict
    Description: Options for the HTTP request.
```

----------------------------------------

TITLE: Grounding Metadata Web Search Queries
DESCRIPTION: Details the attribute for web search queries within GroundingMetadata objects.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_383

LANGUAGE: APIDOC
CODE:
```
genai.types.GroundingMetadata.web_search_queries
  Description: List of web search queries performed for grounding.
  Type: list[str]

genai.types.GroundingMetadataDict.web_search_queries
  Description: Dictionary key for the list of web search queries.
  Type: list[str]
```

----------------------------------------

TITLE: GenAI Class Definitions
DESCRIPTION: Lists key class definitions from the genai.types module, providing structure for various data entities.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_146

LANGUAGE: APIDOC
CODE:
```
genai.types.FileDataDict
  Description: Dictionary representation for file data.

genai.types.FileDict
  Description: Dictionary representation for file metadata.

genai.types.FileSource
  Description: Represents the source of a file.

genai.types.FileState
  Description: Enum representing the state of a file.

genai.types.Files
  Description: Represents a collection of files.

genai.types.ExternalApiDict
  Description: Dictionary representation for external API configuration.

genai.types.ExternalApiElasticSearchParamsDict
  Description: Dictionary representation for Elasticsearch search parameters.

genai.types.ExternalApiSimpleSearchParamsDict
  Description: Dictionary representation for simple search parameters.

genai.types.FeatureSelectionPreference
  Description: Enum for feature selection preferences.
```

----------------------------------------

TITLE: GenerateContentConfig Parameters
DESCRIPTION: Lists configurable parameters for generating content, covering aspects like model behavior, output constraints, and safety settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_117

LANGUAGE: APIDOC
CODE:
```
Type: GenerateContentConfig
Parameters:
  audio_timestamp: (Optional[Timestamp]) - Timestamp for audio content.
  automatic_function_calling: (Optional[bool]) - Enable automatic function calling.
  cached_content: (Optional[str]) - Content to be cached.
  candidate_count: (Optional[int]) - Number of candidates to generate.
  frequency_penalty: (Optional[float]) - Controls frequency penalty.
  http_options: (Optional[HttpOptions]) - HTTP request options.
  labels: (Optional[Dict[str, str]]) - Custom labels for the request.
  logprobs: (Optional[bool]) - Whether to include log probabilities.
  max_output_tokens: (Optional[int]) - Maximum number of tokens for the output.
  media_resolution: (Optional[MediaResolution]) - Resolution for media content.
  model_selection_config: (Optional[ModelSelectionConfig]) - Configuration for model selection.
  presence_penalty: (Optional[float]) - Controls presence penalty.
  response_json_schema: (Optional[str]) - JSON schema for the response.
  response_logprobs: (Optional[bool]) - Whether to include log probabilities in the response.
  response_mime_type: (Optional[str]) - MIME type for the response.
  response_modalities: (Optional[List[str]]) - List of expected response modalities.
  response_schema: (Optional[str]) - Schema for the response.
  routing_config: (Optional[RoutingConfig]) - Configuration for routing.
  safety_settings: (Optional[List[SafetySetting]]) - Safety settings for content generation.
  seed: (Optional[int]) - Seed for reproducible generation.
  speech_config: (Optional[SpeechConfig]) - Configuration for speech output.
  stop_sequences: (Optional[List[str]]) - Sequences that stop generation.
  system_instruction: (Optional[str]) - System instruction for the model.
  temperature: (Optional[float]) - Controls randomness of output.
  thinking_config: (Optional[ThinkingConfig]) - Configuration for thinking process.
  tool_config: (Optional[ToolConfig]) - Configuration for tools.
  tools: (Optional[List[Tool]]) - List of tools to use.
  top_k: (Optional[int]) - Controls sampling by top-k.
  top_p: (Optional[float]) - Controls sampling by top-p.
```

----------------------------------------

TITLE: CountTokensResponseDict Type
DESCRIPTION: Dictionary representation of the CountTokens API response. This structure contains the total token count and the count of tokens derived from cached content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_122

LANGUAGE: APIDOC
CODE:
```
CountTokensResponseDict:
  description: Dictionary response from the CountTokens API.
  fields:
    cached_content_token_count: Token count from cached content.
    total_tokens: The total number of tokens counted.
```

----------------------------------------

TITLE: Live Connect Parameters (Class/Dict)
DESCRIPTION: Defines parameters for establishing a Live Connect session, including model and configuration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_196

LANGUAGE: APIDOC
CODE:
```
LiveConnectParameters / LiveConnectParametersDict:
  Parameters for initiating a Live Connect session.

  Attributes:
    config (Optional[LiveConnectConfig]): Configuration for the connection.
    model (Optional[str]): The name of the model to connect to.
```

----------------------------------------

TITLE: DatasetStatsDict Type Attributes
DESCRIPTION: Details the DatasetStatsDict type, a dictionary representation of dataset statistics, including character counts, example counts, and token distributions.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_67

LANGUAGE: APIDOC
CODE:
```
DatasetStatsDict:
  total_billable_character_count: int
    - Total billable characters in the dataset.
  total_tuning_character_count: int
    - Total characters used for tuning.
  tuning_dataset_example_count: int
    - The number of examples in the tuning dataset.
  tuning_step_count: int
    - The number of tuning steps.
  user_dataset_examples: int
    - The number of user-provided dataset examples.
  user_input_token_distribution: DatasetDistributionDict
    - Distribution of input tokens per user message.
  user_message_per_example_distribution: DatasetDistributionDict
    - Distribution of user messages per example.
  user_output_token_distribution: DatasetDistributionDict
    - Distribution of output tokens per user message.
```

----------------------------------------

TITLE: Structuring Contents Argument
DESCRIPTION: Demonstrates various ways to structure the `contents` argument for `generate_content`. The SDK converts inputs into `list[types.Content]`. Supported formats include a list of `types.Content` objects, a single `types.Content` instance, or a simple string.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_12

LANGUAGE: python
CODE:
```
from google.genai import types

# Canonical way: list[types.Content]
contents_list = [
    types.Content(
        role='user',
        parts=[types.Part.from_text(text='Why is the sky blue?')]
    )
]

# Single types.Content instance
contents_instance = types.Content(
    role='user',
    parts=[types.Part.from_text(text='Why is the sky blue?')]
)
# SDK converts this to: [types.Content(role='user', parts=[types.Part.from_text(text='Why is the sky blue?')])]

# Simple string (assumed as text part, role defaults to 'user')
contents_string = 'Why is the sky blue?'
# SDK converts this to: [types.UserContent(parts=[types.Part.from_text(text='Why is the sky blue?')])]
```

----------------------------------------

TITLE: GroundingChunkRetrievedContext and Dict API
DESCRIPTION: Details the GroundingChunkRetrievedContext and its dictionary counterpart, GroundingChunkRetrievedContextDict. These structures specify information about a chunk retrieved from a retrieval-augmented generation (RAG) system.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_152

LANGUAGE: APIDOC
CODE:
```
GroundingChunkRetrievedContext:
  Information about a grounding chunk obtained from retrieval.
  Attributes:
    rag_chunk (str | None): The actual text content of the retrieved chunk.
    text (str | None): Alias for rag_chunk.
    title (str | None): The title of the document or source from which the chunk was retrieved.
    uri (str | None): The Uniform Resource Identifier (URI) of the source document.

GroundingChunkRetrievedContextDict:
  Dictionary representation of GroundingChunkRetrievedContext.
  Attributes:
    rag_chunk (str | None): Dictionary for the retrieved chunk text.
    text (str | None): Alias for rag_chunk.
    title (str | None): Dictionary for the source document title.
    uri (str | None): Dictionary for the source document URI.
```

----------------------------------------

TITLE: GenerationConfig Thinking Configuration
DESCRIPTION: Details configuration options for controlling thought generation in the Gemini API. Includes settings for including thoughts and setting a thinking budget.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_138

LANGUAGE: APIDOC
CODE:
```
GenerationConfigThinkingConfigDict:
  include_thoughts: bool
    Description: Whether to include thoughts in the response.
  thinking_budget: int
    Description: The budget for thinking steps.
```

----------------------------------------

TITLE: Live Music Data Structures
DESCRIPTION: Defines various dictionary structures used for configuring and managing live music features within the GenAI library. These include parameters for client messages, setup, playback control, and server communication.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_239

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientMessageDict:
  Represents a message from the live music client.

LiveMusicClientSetupDict:
  Represents setup parameters for the live music client.

LiveMusicConnectParametersDict:
  Parameters for connecting to a live music service.

LiveMusicFilteredPromptDict:
  Represents a filtered prompt for live music generation.

LiveMusicGenerationConfigDict:
  Configuration for live music generation.

LiveMusicPlaybackControl:
  Controls playback for live music.

LiveMusicServerContentDict:
  Represents content sent from the live music server.

LiveMusicServerMessageDict:
  Represents a message from the live music server.

LiveMusicServerSetupCompleteDict:
  Indicates completion of live music server setup.

LiveMusicSetConfigParametersDict:
  Parameters for setting live music configuration.

LiveMusicSetWeightedPromptsParametersDict:
  Parameters for setting weighted prompts in live music.

LiveMusicSourceMetadataDict:
  Metadata for the source of live music content.

LiveSendRealtimeInputParametersDict:
  Parameters for sending real-time input for live features.

LiveServerContentDict:
  Represents content from a live server.

LiveServerGoAwayDict:
  Indicates a 'go away' signal from a live server.

LiveServerMessageDict:
  Represents a generic message from a live server.

LiveServerSessionResumptionUpdateDict:
  Update for live server session resumption.

LiveServerSetupCompleteDict:
  Indicates completion of live server setup.

LiveServerToolCallCancellationDict:
  Cancellation signal for a live server tool call.

LiveServerToolCallDict:
  Represents a tool call made by a live server.
```

----------------------------------------

TITLE: genai.types.StyleReferenceConfigDict and StyleReferenceImageDict Classes
DESCRIPTION: References to dictionary representations for style configuration types in genai.types.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_329

LANGUAGE: APIDOC
CODE:
```
genai.types.StyleReferenceConfigDict (class in genai.types)
  Description: Dictionary representation for StyleReferenceConfig.

genai.types.StyleReferenceImageDict (class in genai.types)
  Description: Dictionary representation for StyleReferenceImage.
```

----------------------------------------

TITLE: CreateCachedContent Configuration
DESCRIPTION: Details the parameters for creating cached content, including content data, expiration, and associated metadata.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_61

LANGUAGE: APIDOC
CODE:
```
CreateCachedContentConfig:
  contents: list[Content] | None
    The content to be cached.
  display_name: str | None
    A user-friendly name for the cached content.
  expire_time: datetime | None
    The expiration time for the cached content.
  http_options: HTTPOptions | None
    Custom HTTP options for the request.
  kms_key_name: str | None
    The KMS key name for encryption.
  system_instruction: Content | None
    A system instruction associated with the cached content.
  tool_config: ToolConfig | None
    Configuration for tools used with the cached content.
  tools: list[Tool] | None
    A list of tools associated with the cached content.
  ttl: timedelta | None
    The time-to-live for the cached content.

CreateCachedContentConfigDict:
  contents: list[Content] | None
    The content to be cached.
  display_name: str | None
    A user-friendly name for the cached content.
  expire_time: datetime | None
    The expiration time for the cached content.
  http_options: HTTPOptions | None
    Custom HTTP options for the request.
  kms_key_name: str | None
    The KMS key name for encryption.
  system_instruction: Content | None
    A system instruction associated with the cached content.
  tool_config: ToolConfig | None
    Configuration for tools used with the cached content.
  tools: list[Tool] | None
    A list of tools associated with the cached content.
  ttl: timedelta | None
    The time-to-live for the cached content.
```

----------------------------------------

TITLE: CountTokensConfigDict Type
DESCRIPTION: Dictionary representation for CountTokens API configuration. This structure is used to pass parameters for counting tokens, including generation settings and system instructions.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_120

LANGUAGE: APIDOC
CODE:
```
CountTokensConfigDict:
  description: Dictionary configuration for counting tokens.
  fields:
    generation_config: Configuration for token generation.
    http_options: HTTP-specific options for the request.
    system_instruction: System-level instructions for the model.
    tools: List of tools available for the model.
```

----------------------------------------

TITLE: GenAI Library Update Methods
DESCRIPTION: Documentation for the 'update' method across different classes in the genai library. This method is used to update cached content, models, or other configurations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_367

LANGUAGE: APIDOC
CODE:
```
genai.caches.AsyncCaches.update()
  - Updates asynchronous cache entries.

genai.caches.Caches.update()
  - Updates synchronous cache entries.

genai.models.AsyncModels.update()
  - Updates asynchronous model configurations or states.

genai.models.Models.update()
  - Updates synchronous model configurations or states.

Parameters for update methods typically include configuration objects or specific keys/values to modify. Return values vary based on the specific update operation, often indicating success or the updated state.
```

----------------------------------------

TITLE: genai.types.HttpOptions, HttpResponse, ReplayRequest headers
DESCRIPTION: Documentation for the 'headers' attribute across HttpOptions, HttpResponse, and ReplayRequest types in genai.types. This attribute is used to manage HTTP request and response headers.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_186

LANGUAGE: APIDOC
CODE:
```
headers (genai.types.HttpOptions attribute)
  A dictionary of HTTP headers to send with the request.

headers (genai.types.HttpOptionsDict attribute)
  A dictionary of HTTP headers to send with the request.

headers (genai.types.HttpResponse attribute)
  A dictionary of HTTP headers received in the response.

headers (genai.types.HttpResponseDict attribute)
  A dictionary of HTTP headers received in the response.

headers (genai.types.ReplayRequest attribute)
  A dictionary of HTTP headers associated with a replayed request.
```

----------------------------------------

TITLE: SafetyAttributes and SafetyAttributesDict API
DESCRIPTION: Defines the structure for safety attributes and their dictionary representations. These types include information about content categories, content type, and associated scores.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_294

LANGUAGE: APIDOC
CODE:
```
SafetyAttributes:
  Represents safety attributes for content.
  Attributes:
    categories: List of safety categories.
    content_type: The type of content being evaluated.
    scores: List of safety scores.

SafetyAttributesDict:
  Dictionary representation of SafetyAttributes.
  Attributes:
    categories: List of safety categories.
    content_type: The type of content being evaluated.
    scores: List of safety scores.
```

----------------------------------------

TITLE: LiveClientRealtimeInput Attributes
DESCRIPTION: Details the real-time input data for the live client, including audio, video, text, and activity timestamps.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_282

LANGUAGE: APIDOC
CODE:
```
LiveClientRealtimeInput:
  activity_end: Timestamp indicating the end of an activity.
  activity_start: Timestamp indicating the start of an activity.
  audio: Audio data for real-time input.
  audio_stream_end: Signal indicating the end of an audio stream.
  media_chunks: Chunks of media data.
  text: Textual input data.
  video: Video data for real-time input.
```

----------------------------------------

TITLE: Delete Batch Job
DESCRIPTION: Provides an example of how to delete a specific batch job resource. It uses the `client.batches.delete` method, requiring the job's name as a parameter.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_93

LANGUAGE: python
CODE:
```
# Delete the job resource
delete_job = client.batches.delete(name=job.name)

delete_job
```

----------------------------------------

TITLE: LiveMusicServerSetupComplete Types
DESCRIPTION: Represents the completion status of the live music server setup process.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_213

LANGUAGE: APIDOC
CODE:
```
LiveMusicServerSetupComplete:
  Indicates the completion of the live music server setup.

LiveMusicServerSetupCompleteDict:
  Dictionary representation of LiveMusicServerSetupComplete.
```

----------------------------------------

TITLE: Upload and Delete File
DESCRIPTION: Shows how to upload a file and subsequently delete it using the client's file management methods.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_64

LANGUAGE: python
CODE:
```
file3 = client.files.upload(file='2312.11805v3.pdf')

client.files.delete(name=file3.name)
```

----------------------------------------

TITLE: Provide List of Mixed Parts (Text and URI)
DESCRIPTION: Illustrates creating a `UserContent` object with a list containing both text and non-function call parts (like URIs). The SDK will convert the list of parts into a content with a user role.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_17

LANGUAGE: python
CODE:
```
from google.genai import types

contents = [
    types.Part.from_text('What is this image about?'),
    types.Part.from_uri(
        file_uri='gs://generativeai-downloads/images/scones.jpg',
        mime_type='image/jpeg',
    )
]

# The SDK will convert the list of parts into a content with a user role:
# types.UserContent(
#     parts=[
#     types.Part.from_text('What is this image about?'),
#     types.Part.from_uri(
#         file_uri='gs://generativeai-downloads/images/scones.jpg',
#         mime_type='image/jpeg',
#     )
#     ]
# )

```

----------------------------------------

TITLE: Get Tuning Job Status
DESCRIPTION: Retrieves the status of an ongoing or completed tuning job. It includes a loop to poll the job status until it's no longer in a running state.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_56

LANGUAGE: Python
CODE:
```
import time

tuning_job = client.tunings.get(name=tuning_job.name)

running_states = set(
    [
        'JOB_STATE_PENDING',
        'JOB_STATE_RUNNING',
    ]
)

while tuning_job.state in running_states:
    print(tuning_job.state)
    tuning_job = client.tunings.get(name=tuning_job.name)
    time.sleep(10)
```

----------------------------------------

TITLE: ListTuningJobsResponse Attributes
DESCRIPTION: Defines the structure of the response when listing tuning jobs, including pagination tokens and the list of tuning jobs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_276

LANGUAGE: APIDOC
CODE:
```
ListTuningJobsResponse:
  next_page_token: Token to retrieve the next page of tuning jobs.
  tuning_jobs: A list of tuning jobs.
```

----------------------------------------

TITLE: HttpResponseDict Type
DESCRIPTION: Dictionary representation of HttpResponse.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_248

LANGUAGE: APIDOC
CODE:
```
HttpResponseDict:
  - body: dict
  - headers: dict
```

----------------------------------------

TITLE: genai.types.GenerateImagesConfig Attributes
DESCRIPTION: Documentation for attributes of GenerateImagesConfig, including person generation settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_304

LANGUAGE: APIDOC
CODE:
```
GenerateImagesConfig:
  person_generation: dict | None
    Configuration for person generation.
```

LANGUAGE: APIDOC
CODE:
```
GenerateImagesConfigDict:
  person_generation: dict | None
    Configuration for person generation.
```

----------------------------------------

TITLE: List Batch Jobs Configuration and Response
DESCRIPTION: Defines the configuration parameters for listing batch jobs and the structure of the response. Includes options for pagination, filtering, and HTTP settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_179

LANGUAGE: APIDOC
CODE:
```
ListBatchJobsConfig:
  page_size: int
    The maximum number of batch jobs to return in a single response.
  page_token: str
    A page token received from a previous ListBatchJobsResponse to retrieve the next page of results.
  filter: str
    An optional filter to apply to the listing of batch jobs.
  http_options: dict
    Optional HTTP client options for the request.
```

LANGUAGE: APIDOC
CODE:
```
ListBatchJobsConfigDict:
  filter: str
    An optional filter to apply to the listing of batch jobs.
  http_options: dict
    Optional HTTP client options for the request.
  page_size: int
    The maximum number of batch jobs to return in a single response.
  page_token: str
    A page token received from a previous ListBatchJobsResponse to retrieve the next page of results.
```

LANGUAGE: APIDOC
CODE:
```
ListBatchJobsResponse:
  batch_jobs: list
    A list of batch job resources.
  next_page_token: str
    A token to retrieve the next page of results. If empty, there are no more pages.
```

LANGUAGE: APIDOC
CODE:
```
ListBatchJobsResponseDict:
  batch_jobs: list
    A list of batch job resources.
  next_page_token: str
    A token to retrieve the next page of results. If empty, there are no more pages.
```

----------------------------------------

TITLE: SupervisedHyperParameters Attributes
DESCRIPTION: Details the hyperparameters for supervised tuning.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_326

LANGUAGE: APIDOC
CODE:
```
SupervisedHyperParameters:
  adapter_size: int
    The size of the adapter for fine-tuning.
  epoch_count: int
    The number of training epochs.
  learning_rate_multiplier: float
    A multiplier for the base learning rate.
```

----------------------------------------

TITLE: Set Gemini API Key Environment Variable
DESCRIPTION: Configures the GEMINI_API_KEY environment variable for automatic client initialization. This is an alternative to passing the key directly to the client constructor.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
export GEMINI_API_KEY='your-api-key'
```

----------------------------------------

TITLE: Video Handling and Metadata
DESCRIPTION: Defines the structure for handling video data, including MIME type, URI, and byte content. Provides methods for loading from files, saving, and displaying videos. Also includes compression quality settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_369

LANGUAGE: APIDOC
CODE:
```
Video:
  __init__(mime_type: str, uri: str = None, video_bytes: bytes = None)
    mime_type: The MIME type of the video (e.g., 'video/mp4').
    uri: The URI of the video resource (optional).
    video_bytes: The raw byte content of the video (optional).

  from_file(file_path: str, mime_type: str = 'video/mp4') -> Video
    Loads video data from a local file path.
    file_path: The path to the video file.
    mime_type: The MIME type of the video file.
    Returns: A Video object.

  save(file_path: str, mime_type: str = 'video/mp4') -> None
    Saves the video data to a local file.
    file_path: The path where the video will be saved.
    mime_type: The MIME type to use when saving the file.

  show() -> None
    Displays the video content (e.g., in a notebook environment).

VideoDict:
  mime_type: str
    The MIME type of the video.
  uri: str
    The URI of the video resource.
  video_bytes: bytes
    The raw byte content of the video.

VideoCompressionQuality:
  LOSSLESS: str
    Represents lossless video compression.
  OPTIMIZED: str
    Represents optimized video compression for quality and size.
```

----------------------------------------

TITLE: LiveSendRealtimeInputParameters Structure
DESCRIPTION: Defines the parameters for sending real-time input to the Live Music server. It supports various input types including text, audio, and media.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_312

LANGUAGE: APIDOC
CODE:
```
LiveSendRealtimeInputParameters:
  activity_end: bool | None
    Flag indicating the end of an activity.
  activity_start: bool | None
    Flag indicating the start of an activity.
  audio: bytes | None
    Raw audio data.
  audio_stream_end: bool | None
    Flag indicating the end of an audio stream.
  media: bytes | None
    Raw media data.
  text: str | None
    Textual input.
  video: bytes | None
    Raw video data.
```

----------------------------------------

TITLE: genai.types.CreateAuthTokenConfig Attributes
DESCRIPTION: Configuration options for creating authentication tokens, including session expiration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_267

LANGUAGE: APIDOC
CODE:
```
CreateAuthTokenConfig:
  new_session_expire_time: The expiration time for the new session.
```

----------------------------------------

TITLE: ListBatchJobsConfig and ListBatchJobsConfigDict
DESCRIPTION: Configuration options for listing batch jobs. Includes filtering, pagination, and HTTP options. Available as both a structured object and a dictionary.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_268

LANGUAGE: APIDOC
CODE:
```
ListBatchJobsConfig:
  Configuration for listing batch jobs.
  Attributes:
    filter: An optional filter string to apply to the job list.
    http_options: Optional HTTP client options.
    page_size: The maximum number of batch jobs to return per page.
    page_token: A page token received from a previous ListBatchJobs call.

ListBatchJobsConfigDict:
  A dictionary representation of ListBatchJobsConfig.
  Attributes:
    filter: An optional filter string.
    http_options: Optional HTTP client options.
    page_size: The maximum number of batch jobs to return per page.
    page_token: A page token.
```

----------------------------------------

TITLE: Configuration and Control Attributes
DESCRIPTION: Documentation for attributes related to configuration settings, such as locking additional fields during authentication token creation and manual mode settings for generation routing.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_243

LANGUAGE: APIDOC
CODE:
```
CreateAuthTokenConfig.lock_additional_fields:
  Boolean flag to lock additional fields when creating an auth token.

CreateAuthTokenConfigDict.lock_additional_fields:
  Boolean flag to lock additional fields when creating an auth token (dictionary format).

GenerationConfigRoutingConfig.manual_mode:
  Enables manual mode for generation routing configuration.

GenerationConfigRoutingConfigDict.manual_mode:
  Enables manual mode for generation routing configuration (dictionary format).
```

----------------------------------------

TITLE: List Batch Prediction Jobs (Async)
DESCRIPTION: Lists batch prediction jobs asynchronously using the client's asynchronous API. It iterates through jobs with a specified page size.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_87

LANGUAGE: python
CODE:
```
async for job in await client.aio.batches.list(
    config=types.ListBatchJobsConfig(page_size=10)
):
    print(job)
```

----------------------------------------

TITLE: CountTokensConfig Type
DESCRIPTION: Configuration object for the CountTokens API method. It allows specifying generation parameters, HTTP options, system instructions, and tools to influence token counting behavior.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_119

LANGUAGE: APIDOC
CODE:
```
CountTokensConfig:
  description: Configuration for counting tokens.
  fields:
    generation_config: Configuration for token generation.
    http_options: HTTP-specific options for the request.
    system_instruction: System-level instructions for the model.
    tools: List of tools available for the model.
```

----------------------------------------

TITLE: genai.types.SupervisedTuningSpecDict
DESCRIPTION: Defines the specification for supervised tuning.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_342

LANGUAGE: APIDOC
CODE:
```
genai.types.SupervisedTuningSpecDict (class in genai.types)
  - Defines the specification for supervised tuning.
```

----------------------------------------

TITLE: Use Tuned Model for Content Generation
DESCRIPTION: Demonstrates how to use a model that has been fine-tuned. It generates content by specifying the endpoint of the tuned model.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_57

LANGUAGE: Python
CODE:
```
response = client.models.generate_content(
    model=tuning_job.tuned_model.endpoint,
    contents='why is the sky blue?',
)

print(response.text)
```

----------------------------------------

TITLE: genai.types.CreateTuningJobConfig Attributes
DESCRIPTION: Attributes related to configuring tuning jobs, including adapter size.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_11

LANGUAGE: APIDOC
CODE:
```
genai.types.CreateTuningJobConfig:
  Configuration for creating a tuning job.
  Attributes:
    adapter_size: Specifies the size of the adapter to use.
      (Type and constraints not specified in source text.)

genai.types.CreateTuningJobConfigDict:
  Dictionary representation of CreateTuningJobConfig.
  Attributes:
    adapter_size: Specifies the size of the adapter to use.
      (Type and constraints not specified in source text.)
```

----------------------------------------

TITLE: ToolDict Type
DESCRIPTION: Represents a comprehensive dictionary structure for various tool types available in the GenAI library. It lists different tool integrations and their specific configurations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_398

LANGUAGE: APIDOC
CODE:
```
Type: ToolDict
Attributes:
  - code_execution: Configuration for code execution tools.
  - computer_use: Configuration for computer use tools.
  - enterprise_web_search: Configuration for enterprise web search.
  - function_declarations: List of function declarations for tools.
  - google_maps: Configuration for Google Maps integration.
  - google_search: Configuration for Google Search integration.
  - google_search_retrieval: Configuration for Google Search retrieval.
  - retrieval: General retrieval configuration.
  - url_context: Configuration for URL context.
```

----------------------------------------

TITLE: genai.types.EmbedContentResponse Attributes
DESCRIPTION: References for metadata associated with content embedding responses and operations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_256

LANGUAGE: APIDOC
CODE:
```
EmbedContentResponse:
  metadata: Metadata related to the content embedding.
GenerateVideosOperation:
  metadata: Metadata for the video generation operation.
Operation:
  metadata: General metadata for an operation.
```

----------------------------------------

TITLE: Configure Vertex AI Env Vars (Shell)
DESCRIPTION: Sets environment variables for using the Gemini API in Vertex AI. Includes enabling Vertex AI, project ID, and location.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_5

LANGUAGE: shell
CODE:
```
export GOOGLE_GENAI_USE_VERTEXAI=true
export GOOGLE_CLOUD_PROJECT='your-project-id'
export GOOGLE_CLOUD_LOCATION='us-central1'
```

----------------------------------------

TITLE: HttpRetryOptionsDict Type
DESCRIPTION: Dictionary representation of HttpRetryOptions.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_250

LANGUAGE: APIDOC
CODE:
```
HttpRetryOptionsDict:
  - attempts: int
  - exp_base: float
  - http_status_codes: list[int]
  - initial_delay: float
  - jitter: float
  - max_delay: float
```

----------------------------------------

TITLE: genai.types.GroundingMetadataDict and GroundingSupportDict
DESCRIPTION: Documentation for GroundingMetadataDict and GroundingSupportDict classes within genai.types. These likely define structures for grounding information in generative AI models.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_175

LANGUAGE: APIDOC
CODE:
```
GroundingMetadataDict (class in genai.types)
  Represents metadata associated with grounding.

GroundingSupportDict (class in genai.types)
  Represents support information for grounding.
```

----------------------------------------

TITLE: Disable Automatic Function Calling
DESCRIPTION: Shows how to prevent automatic function calling when a Python function is provided as a tool, by passing the function in a specific way (though the example is incomplete in the source).
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_35

LANGUAGE: python
CODE:
```
from google.genai import types

response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    # The original text snippet was incomplete here, implying a method to disable auto-calling.
    # A common pattern might involve passing tool definitions differently or a specific flag.
)
```

----------------------------------------

TITLE: Data Structures for Generation Configuration
DESCRIPTION: Defines dictionaries used to configure various generation parameters for text, image, and video models. These include settings like temperature, token limits, and image dimensions.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_165

LANGUAGE: APIDOC
CODE:
```
GenerateContentConfigDict: Dict
  - Configuration for text generation, including parameters like temperature, top_k, top_p, and max_output_tokens.

GenerateImagesConfigDict: Dict
  - Configuration for image generation, specifying parameters such as image_size, number_of_images, and quality.

GenerateVideosConfigDict: Dict
  - Configuration for video generation, including parameters like video_length, aspect_ratio, and frame_rate.
```

----------------------------------------

TITLE: LiveMusicSetConfigParameters Types
DESCRIPTION: Parameters for configuring live music generation settings, including specific generation configurations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_214

LANGUAGE: APIDOC
CODE:
```
LiveMusicSetConfigParameters:
  Parameters for setting live music configuration.
  Attributes:
    - music_generation_config: Configuration for music generation.

LiveMusicSetConfigParametersDict:
  Dictionary representation of LiveMusicSetConfigParameters.
```

----------------------------------------

TITLE: Context Window Compression Configuration
DESCRIPTION: Details attributes for context window compression, specifically the trigger tokens used to initiate compression.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_358

LANGUAGE: APIDOC
CODE:
```
genai.types.ContextWindowCompressionConfig.trigger_tokens
  - Description: The number of tokens that trigger context window compression.
  - Type: int

genai.types.ContextWindowCompressionConfigDict.trigger_tokens
  - Description: The number of tokens that trigger context window compression (dictionary representation).
  - Type: int
```

----------------------------------------

TITLE: genai.files.AsyncFiles and Files delete() method
DESCRIPTION: Documentation for the 'delete()' method in genai.files.AsyncFiles and genai.files.Files.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_124

LANGUAGE: APIDOC
CODE:
```
genai.files.AsyncFiles.delete()
  - Description: (Details not provided in input)

genai.files.Files.delete()
  - Description: (Details not provided in input)
```

----------------------------------------

TITLE: genai.client.DebugConfig Properties
DESCRIPTION: Properties for configuring debugging and replay functionality within the GenAI client.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DebugConfig:
  replay_id: str
    A unique identifier for replaying a debug session.
  replays_directory: str
    The directory path where replay logs are stored.
```

----------------------------------------

TITLE: Citation and CitationDict
DESCRIPTION: Details the Citation and CitationDict structures, used to represent citations associated with model outputs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_43

LANGUAGE: APIDOC
CODE:
```
Citation:
  end_index: int
    The end index of the citation in the text.
  license: str
    The license associated with the citation.
  publication_date: str
    The publication date of the cited source.
  start_index: int
    The start index of the citation in the text.
  title: str
    The title of the cited source.
  uri: str
    The URI (URL) of the cited source.

CitationDict:
  end_index: int
    The end index of the citation in the text.
  license: str
    The license associated with the citation.
  publication_date: str
    The publication date of the cited source.
  start_index: int
    The start index of the citation in the text.
  title: str
    The title of the cited source.
  uri: str
    The URI (URL) of the cited source.
```

----------------------------------------

TITLE: GenAI Type Attributes: download_uri
DESCRIPTION: Documentation for the 'download_uri' attribute, providing a URI to download a file.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_137

LANGUAGE: APIDOC
CODE:
```
genai.types.File.download_uri
  Description: The URI from which the file can be downloaded.
  Type: str
```

----------------------------------------

TITLE: Import Gen AI SDK Modules
DESCRIPTION: Imports the necessary modules from the google.genai library, including the main genai client and the types module for defining request/response structures.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_1

LANGUAGE: python
CODE:
```
from google import genai
from google.genai import types
```

----------------------------------------

TITLE: Live Music Client Content (Class/Dict)
DESCRIPTION: Represents content sent by the client for Live Music generation, including weighted prompts.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_197

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientContent / LiveMusicClientContentDict:
  Client-side content for music generation.

  Attributes:
    weighted_prompts (Optional[list]): A list of prompts with associated weights.
```

----------------------------------------

TITLE: Generate Content with Safety Settings
DESCRIPTION: Provides an example of configuring safety settings for content generation. It demonstrates how to block specific harm categories by setting a threshold using `types.SafetySetting` within the `generate_content` configuration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_22

LANGUAGE: python
CODE:
```
from google.genai import types

response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents='Say something bad.',
    config=types.GenerateContentConfig(
        safety_settings=[
            types.SafetySetting(
                category='HARM_CATEGORY_HATE_SPEECH',
                threshold='BLOCK_ONLY_HIGH',
            )
        ]
    ),
)
print(response.text)
```

----------------------------------------

TITLE: Batch Job Configuration
DESCRIPTION: Configuration for batch job operations, including HTTP options for making requests.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_139

LANGUAGE: APIDOC
CODE:
```
GetBatchJobConfig:
  http_options: dict
    Description: Options for the HTTP request.

GetBatchJobConfigDict:
  http_options: dict
    Description: Options for the HTTP request.
```

----------------------------------------

TITLE: genai.types.GenerateVideosConfig Attributes
DESCRIPTION: Documentation for attributes of GenerateVideosConfig, including person generation settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_305

LANGUAGE: APIDOC
CODE:
```
GenerateVideosConfig:
  person_generation: dict | None
    Configuration for person generation.
```

LANGUAGE: APIDOC
CODE:
```
GenerateVideosConfigDict:
  person_generation: dict | None
    Configuration for person generation.
```

----------------------------------------

TITLE: Google GenAI Image Generation Configuration
DESCRIPTION: Specifies configuration options for generating images via the Google Generative AI API. This includes settings for output quality, safety filters, and prompt enhancements.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_217

LANGUAGE: APIDOC
CODE:
```
GenerateImagesConfig:
  __init__(self, **kwargs)
    Represents configuration for image generation.

  output_compression_quality: int
    The compression quality for the output image (0-100).
  output_gcs_uri: str
    Google Cloud Storage URI for the output image.
  output_mime_type: str
    The MIME type of the output image (e.g., 'image/png').
  person_generation: str
    Specifies the type of person generation allowed (e.g., 'PERSON_GENERATION_UNSPECIFIED').
  safety_filter_level: str
    The level of safety filtering to apply (e.g., 'HIGH').
  seed: int
    A seed for reproducible image generation.

GenerateImagesConfigDict:
  __init__(self, **kwargs)
    Dictionary representation for image generation configuration.

  add_watermark: bool
    Whether to add a watermark to the generated image.
  aspect_ratio: str
    The aspect ratio of the generated image (e.g., '1:1').
  enhance_prompt: bool
    Whether to enhance the prompt for better results.
  guidance_scale: float
    Controls how closely the image generation follows the prompt.
  http_options: dict
    HTTP client options for the request.
  include_rai_reason: bool
    Whether to include reasoning for AI-generated content.
  include_safety_attributes: bool
    Whether to include safety attributes in the response.
  language: str
    The language for the generated content.
  negative_prompt: str
    A prompt describing what to avoid in the generated image.
  number_of_images: int
    The number of images to generate.
  output_compression_quality: int
    The compression quality for the output image (0-100).
  output_gcs_uri: str
    Google Cloud Storage URI for the output image.
  output_mime_type: str
    The MIME type of the output image (e.g., 'image/png').
  person_generation: str
    Specifies the type of person generation allowed (e.g., 'PERSON_GENERATION_UNSPECIFIED').
  safety_filter_level: str
    The level of safety filtering to apply (e.g., 'HIGH').
  seed: int
    A seed for reproducible image generation.
```

----------------------------------------

TITLE: genai.types.RagRetrievalConfigHybridSearch
DESCRIPTION: Configuration for hybrid search within RAG retrieval.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_21

LANGUAGE: APIDOC
CODE:
```
genai.types.RagRetrievalConfigHybridSearch:
  Configuration for hybrid search in RAG.
  Attributes:
    alpha: A weighting factor for combining search results.
      (Type and constraints not specified in source text.)

genai.types.RagRetrievalConfigHybridSearchDict:
  Dictionary representation of RagRetrievalConfigHybridSearch.
  Attributes:
    alpha: A weighting factor for combining search results.
      (Type and constraints not specified in source text.)
```

----------------------------------------

TITLE: LiveConnect Constraints
DESCRIPTION: Defines constraints for LiveConnect, specifying configuration and model details.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_292

LANGUAGE: APIDOC
CODE:
```
LiveConnectConstraints:
  config: Configuration object for LiveConnect.
  model: Specifies the model to be used with LiveConnect.
```

LANGUAGE: APIDOC
CODE:
```
LiveConnectConstraintsDict:
  config: Configuration dictionary for LiveConnect.
  model: Specifies the model to be used with LiveConnect.
```

----------------------------------------

TITLE: genai.client.AsyncClient and genai.client.Client Properties
DESCRIPTION: References to the 'caches' property on both asynchronous and synchronous client instances.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_64

LANGUAGE: APIDOC
CODE:
```
AsyncClient:
  caches: Access to caching functionalities for the async client.

Client:
  caches: Access to caching functionalities for the synchronous client.
```

----------------------------------------

TITLE: Configure Vertex AI via Environment Variables
DESCRIPTION: Sets environment variables for using the Gemini API within Vertex AI. This includes enabling Vertex AI, specifying the project ID, and the cloud location.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_5

LANGUAGE: bash
CODE:
```
export GOOGLE_GENAI_USE_VERTEXAI=true
export GOOGLE_CLOUD_PROJECT='your-project-id'
export GOOGLE_CLOUD_LOCATION='us-central1'
```

----------------------------------------

TITLE: LiveServerContent and LiveServerContentDict Types
DESCRIPTION: Defines the structure for content received from the live server, including transcription, turn completion status, and URL context metadata. Includes both object and dictionary representations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_314

LANGUAGE: APIDOC
CODE:
```
LiveServerContent:
  Attributes:
    - output_transcription (str): The transcribed output from the server.
    - turn_complete (bool): Indicates if the current turn has been completed.
    - url_context_metadata (dict): Metadata related to URL context.

LiveServerContentDict:
  Attributes:
    - generation_complete (bool): Indicates if the generation process is complete.
    - grounding_metadata (dict): Metadata related to grounding.
    - input_transcription (str): The transcribed input provided to the server.
    - interrupted (bool): Indicates if the process was interrupted.
    - model_turn (bool): Indicates if it's the model's turn.
    - output_transcription (str): The transcribed output from the server.
    - turn_complete (bool): Indicates if the current turn has been completed.
    - url_context_metadata (dict): Metadata related to URL context.
```

----------------------------------------

TITLE: Provide List of Text Parts
DESCRIPTION: Demonstrates how to create a `UserContent` object containing multiple text parts for the Google GenAI SDK. The SDK assumes these are 2 text parts and converts them into a single content object.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_13

LANGUAGE: python
CODE:
```
from google.genai import types

contents = types.UserContent(
    parts=[
    types.Part.from_text(text='Why is the sky blue?'),
    types.Part.from_text(text='Why is the cloud white?'),
    ]
)

# The SDK converts this into a single content object with a user role.
```

----------------------------------------

TITLE: Delete Job Resource (Python)
DESCRIPTION: Provides an example of deleting a job resource using the client. It shows how to call the `delete` method with the job's name. Assumes a `client` object and a `job` object with a `name` attribute are available.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_69

LANGUAGE: python
CODE:
```
# Delete the job resource
delete_job = client.batches.delete(name=job.name)

delete_job
```

----------------------------------------

TITLE: Paginate Tuned Models (Synchronous)
DESCRIPTION: Demonstrates iterating through a list of tuned models using a pager object, including accessing elements and fetching the next page.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_74

LANGUAGE: python
CODE:
```
pager = client.models.list(config={'page_size': 10, 'query_base': False})
print(pager.page_size)
print(pager[0])
pager.next_page()
print(pager[0])
```

----------------------------------------

TITLE: List Batch Jobs Asynchronously
DESCRIPTION: Demonstrates how to list batch jobs asynchronously using the client's asynchronous API. It iterates through the jobs using an async for loop and prints each job object. Requires the `google.genai.types` module for configuration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_91

LANGUAGE: python
CODE:
```
from google.genai import types

async for job in await client.aio.batches.list(
    config=types.ListBatchJobsConfig(page_size=10)
):
    print(job)
```

----------------------------------------

TITLE: SupervisedTuningDataStats Attributes
DESCRIPTION: Provides statistics related to supervised tuning data.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_328

LANGUAGE: APIDOC
CODE:
```
SupervisedTuningDataStats:
  dropped_example_reasons: list[str]
    Reasons why examples were dropped during tuning.
  total_billable_character_count: int
    Total billable characters in the tuning dataset.
  total_billable_token_count: int
    Total billable tokens in the tuning dataset.
  total_truncated_example_count: int
    Count of examples that were truncated.
  total_tuning_character_count: int
    Total characters in the tuning dataset.
  truncated_example_indices: list[int]
    Indices of examples that were truncated.
  tuning_dataset_example_count: int
    Total number of examples in the tuning dataset.
  tuning_step_count: int
    The number of tuning steps performed.
  user_dataset_examples: list[dict]
    Examples provided by the user.
  user_input_token_distribution: dict
    Distribution of token counts for user inputs.
  user_message_per_example_distribution: dict
    Distribution of user messages per example.
  user_output_token_distribution: dict
    Distribution of token counts for user outputs.
```

----------------------------------------

TITLE: Location and Coordinate Data
DESCRIPTION: Documentation for attributes related to geographical location, including the client's location and specific longitude values.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_241

LANGUAGE: APIDOC
CODE:
```
Client.location:
  The geographical location associated with the client.

LatLng.longitude:
  The longitude coordinate value.

LatLngDict.longitude:
  The longitude coordinate value (dictionary format).
```

----------------------------------------

TITLE: Disable Automatic Function Calling
DESCRIPTION: Demonstrates how to disable automatic function calling when passing a Python function as a tool to the Gemini API. This configuration ensures that the model returns function call parts in the response, requiring manual invocation of the function.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_24

LANGUAGE: python
CODE:
```
from google.genai import types

response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents='What is the weather like in Boston?',
    config=types.GenerateContentConfig(
        tools=[get_current_weather],
        automatic_function_calling=types.AutomaticFunctionCallingConfig(
            disable=True
        ),
    ),
)
```

----------------------------------------

TITLE: GenAI Library Type Attributes
DESCRIPTION: This section documents various attributes found across different types within the genai library. It covers attributes related to text processing, configuration, and metadata. Each entry points to the specific attribute within its respective class or dictionary structure.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_353

LANGUAGE: APIDOC
CODE:
```
genai.types.LiveSendRealtimeInputParametersDict.text
  Description: Represents text input for real-time parameters.
  Location: genai.html#genai.types.LiveSendRealtimeInputParametersDict.text
```

LANGUAGE: APIDOC
CODE:
```
genai.types.LiveServerMessage.text
  Description: Property representing text content from a live server message.
  Location: genai.html#genai.types.LiveServerMessage.text
```

LANGUAGE: APIDOC
CODE:
```
genai.types.MediaModality.TEXT
  Description: Enum member representing the TEXT modality.
  Location: genai.html#genai.types.MediaModality.TEXT
```

LANGUAGE: APIDOC
CODE:
```
genai.types.Modality.TEXT
  Description: Represents the TEXT modality.
  Location: genai.html#genai.types.Modality.TEXT
```

LANGUAGE: APIDOC
CODE:
```
genai.types.Part.text
  Description: Attribute for text content within a Part object.
  Location: genai.html#genai.types.Part.text
```

LANGUAGE: APIDOC
CODE:
```
genai.types.PartDict.text
  Description: Dictionary attribute for text content within a Part.
  Location: genai.html#genai.types.PartDict.text
```

LANGUAGE: APIDOC
CODE:
```
genai.types.RagChunk.text
  Description: Text content of a Retrieval Augmented Generation (RAG) chunk.
  Location: genai.html#genai.types.RagChunk.text
```

LANGUAGE: APIDOC
CODE:
```
genai.types.RagChunkDict.text
  Description: Dictionary representation of RAG chunk text.
  Location: genai.html#genai.types.RagChunkDict.text
```

LANGUAGE: APIDOC
CODE:
```
genai.types.Segment.text
  Description: Text content of a segment.
  Location: genai.html#genai.types.Segment.text
```

LANGUAGE: APIDOC
CODE:
```
genai.types.SegmentDict.text
  Description: Dictionary representation of segment text.
  Location: genai.html#genai.types.SegmentDict.text
```

LANGUAGE: APIDOC
CODE:
```
genai.types.Transcription.text
  Description: Text transcription of an audio segment.
  Location: genai.html#genai.types.Transcription.text
```

LANGUAGE: APIDOC
CODE:
```
genai.types.TranscriptionDict.text
  Description: Dictionary representation of transcription text.
  Location: genai.html#genai.types.TranscriptionDict.text
```

LANGUAGE: APIDOC
CODE:
```
genai.types.WeightedPrompt.text
  Description: Text content of a weighted prompt.
  Location: genai.html#genai.types.WeightedPrompt.text
```

LANGUAGE: APIDOC
CODE:
```
genai.types.WeightedPromptDict.text
  Description: Dictionary representation of weighted prompt text.
  Location: genai.html#genai.types.WeightedPromptDict.text
```

LANGUAGE: APIDOC
CODE:
```
genai.types.CachedContentUsageMetadata.text_count
  Description: Count of text tokens used for cached content.
  Location: genai.html#genai.types.CachedContentUsageMetadata.text_count
```

LANGUAGE: APIDOC
CODE:
```
genai.types.CachedContentUsageMetadataDict.text_count
  Description: Dictionary key for text token count in cached content usage.
  Location: genai.html#genai.types.CachedContentUsageMetadataDict.text_count
```

LANGUAGE: APIDOC
CODE:
```
genai.types.TuningExample.text_input
  Description: Text input provided for a tuning example.
  Location: genai.html#genai.types.TuningExample.text_input
```

LANGUAGE: APIDOC
CODE:
```
genai.types.TuningExampleDict.text_input
  Description: Dictionary key for text input in a tuning example.
  Location: genai.html#genai.types.TuningExampleDict.text_input
```

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerationConfigThinkingConfig.thinking_budget
  Description: Specifies the thinking budget for generation.
  Location: genai.html#genai.types.GenerationConfigThinkingConfig.thinking_budget
```

LANGUAGE: APIDOC
CODE:
```
genai.types.ThinkingConfig.thinking_budget
  Description: Configuration for the thinking process budget.
  Location: genai.html#genai.types.ThinkingConfig.thinking_budget
```

LANGUAGE: APIDOC
CODE:
```
genai.types.ThinkingConfigDict.thinking_budget
  Description: Dictionary key for thinking budget configuration.
  Location: genai.html#genai.types.ThinkingConfigDict.thinking_budget
```

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerateContentConfig.thinking_config
  Description: Configuration object for the thinking process during content generation.
  Location: genai.html#genai.types.GenerateContentConfig.thinking_config
```

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerateContentConfigDict.thinking_config
  Description: Dictionary key for thinking configuration in content generation.
  Location: genai.html#genai.types.GenerateContentConfigDict.thinking_config
```

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerationConfig.thinking_config
  Description: Configuration for the thinking process within generation settings.
  Location: genai.html#genai.types.GenerationConfig.thinking_config
```

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerationConfigDict.thinking_config
  Description: Dictionary key for thinking configuration in generation.
  Location: genai.html#genai.types.GenerationConfigDict.thinking_config
```

LANGUAGE: APIDOC
CODE:
```
genai.types.ThinkingConfigDict
  Description: A dictionary-based representation of thinking configuration settings.
  Location: genai.html#genai.types.ThinkingConfigDict
```

LANGUAGE: APIDOC
CODE:
```
genai.types.Part.thought
  Description: The thought process or reasoning behind a generated part.
  Location: genai.html#genai.types.Part.thought
```

LANGUAGE: APIDOC
CODE:
```
genai.types.PartDict.thought
  Description: Dictionary key for the thought process in a Part.
  Location: genai.html#genai.types.PartDict.thought
```

LANGUAGE: APIDOC
CODE:
```
genai.types.Part.thought_signature
  Description: Signature or identifier for the thought process.
  Location: genai.html#genai.types.Part.thought_signature
```

LANGUAGE: APIDOC
CODE:
```
genai.types.PartDict.thought_signature
  Description: Dictionary key for the thought signature in a Part.
  Location: genai.html#genai.types.PartDict.thought_signature
```

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerateContentResponseUsageMetadata.thoughts_token_count
  Description: Token count specifically for the thoughts generated during content creation.
  Location: genai.html#genai.types.GenerateContentResponseUsageMetadata.thoughts_token_count
```

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerateContentResponseUsageMetadataDict.thoughts_token_count
  Description: Dictionary key for the token count of generated thoughts.
  Location: genai.html#genai.types.GenerateContentResponseUsageMetadataDict.thoughts_token_count
```

LANGUAGE: APIDOC
CODE:
```
genai.types.UsageMetadata.thoughts_token_count
  Description: Token count related to generated thoughts in usage metadata.
  Location: genai.html#genai.types.UsageMetadata.thoughts_token_count
```

LANGUAGE: APIDOC
CODE:
```
genai.types.UsageMetadataDict.thoughts_token_count
  Description: Dictionary key for thoughts token count in usage metadata.
  Location: genai.html#genai.types.UsageMetadataDict.thoughts_token_count
```

LANGUAGE: APIDOC
CODE:
```
genai.types.SafetySetting.threshold
  Description: The safety threshold setting for a particular safety category.
  Location: genai.html#genai.types.SafetySetting.threshold
```

LANGUAGE: APIDOC
CODE:
```
genai.types.SafetySettingDict.threshold
  Description: Dictionary key for the safety threshold.
  Location: genai.html#genai.types.SafetySettingDict.threshold
```

LANGUAGE: APIDOC
CODE:
```
genai.types.LiveServerGoAway.time_left
  Description: Indicates the remaining time before a server disconnects.
  Location: genai.html#genai.types.LiveServerGoAway.time_left
```

LANGUAGE: APIDOC
CODE:
```
genai.types.LiveServerGoAwayDict.time_left
  Description: Dictionary key for the remaining time before server disconnect.
  Location: genai.html#genai.types.LiveServerGoAwayDict.time_left
```

LANGUAGE: APIDOC
CODE:
```
genai.types.GoogleSearch.time_range_filter
  Description: Filter for specifying a time range for Google Search queries.
  Location: genai.html#genai.types.GoogleSearch.time_range_filter
```

LANGUAGE: APIDOC
CODE:
```
genai.types.GoogleSearchDict.time_range_filter
  Description: Dictionary key for the time range filter in Google Search.
  Location: genai.html#genai.types.GoogleSearchDict.time_range_filter
```

LANGUAGE: APIDOC
CODE:
```
genai.types.HttpOptions.timeout
  Description: Timeout duration for HTTP requests.
  Location: genai.html#genai.types.HttpOptions.timeout
```

LANGUAGE: APIDOC
CODE:
```
genai.types.HttpOptionsDict.timeout
  Description: Dictionary key for the HTTP request timeout.
  Location: genai.html#genai.types.HttpOptionsDict.timeout
```

LANGUAGE: APIDOC
CODE:
```
genai.types.Citation.title
  Description: Title of a citation source.
  Location: genai.html#genai.types.Citation.title
```

LANGUAGE: APIDOC
CODE:
```
genai.types.CitationDict.title
  Description: Dictionary key for the citation title.
  Location: genai.html#genai.types.CitationDict.title
```

LANGUAGE: APIDOC
CODE:
```
genai.types.EmbedContentConfig.title
  Description: Title or identifier for content embedding configuration.
  Location: genai.html#genai.types.EmbedContentConfig.title
```

LANGUAGE: APIDOC
CODE:
```
genai.types.EmbedContentConfigDict.title
  Description: Dictionary key for the title in embed content configuration.
  Location: genai.html#genai.types.EmbedContentConfigDict.title
```

----------------------------------------

TITLE: GenAI Function-Related Attributes and Types
DESCRIPTION: References to attributes and dictionary types related to function calls, responses, declarations, and configurations within the genai library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_158

LANGUAGE: APIDOC
CODE:
```
genai.types.Part.function_call (attribute)
  The function call associated with a Part.

genai.types.PartDict.function_call (attribute)
  The function call associated with a PartDict.

genai.types.ToolConfig.function_calling_config (attribute)
  Configuration for function calling within ToolConfig.

genai.types.ToolConfigDict.function_calling_config (attribute)
  Configuration for function calling within ToolConfigDict.

genai.types.GenerateContentResponse.function_calls (property)
  A list of function calls made by the model in the response.

genai.types.LiveServerToolCall.function_calls (attribute)
  The function calls made by the live server.

genai.types.LiveServerToolCallDict.function_calls (attribute)
  The function calls made by the live server (dict representation).

genai.types.Tool.function_declarations (attribute)
  A list of function declarations associated with a Tool.

genai.types.ToolDict.function_declarations (attribute)
  A list of function declarations associated with a Tool (dict representation).

genai.types.Part.function_response (attribute)
  The function response associated with a Part.

genai.types.PartDict.function_response (attribute)
  The function response associated with a PartDict.

genai.types.LiveClientToolResponse.function_responses (attribute)
  A list of function responses from the live client.

genai.types.LiveClientToolResponseDict.function_responses (attribute)
  A list of function responses from the live client (dict representation).

FunctionCallDict (class in genai.types)
  Represents a dictionary structure for a function call.

FunctionCallingConfigDict (class in genai.types)
  Represents a dictionary structure for function calling configuration.

FunctionCallingConfigMode (class in genai.types)
  Defines modes for function calling configuration.

FunctionDeclarationDict (class in genai.types)
  Represents a dictionary structure for a function declaration.

FunctionResponseDict (class in genai.types)
  Represents a dictionary structure for a function response.

FunctionResponseScheduling (class in genai.types)
  Defines scheduling options for function responses.
```

----------------------------------------

TITLE: Set Max Automatic Function Calls in ANY Mode
DESCRIPTION: Shows how to limit the number of automatic function calls by setting `maximum_remote_calls`. The example configures the SDK to allow a maximum of 2 remote calls, effectively enabling 1 turn of automatic function calling.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_27

LANGUAGE: python
CODE:
```
from google.genai import types

def get_current_weather(location: str) -> str:
    """Returns the current weather.

    Args:
        location: The city and state, e.g. San Francisco, CA
    """
    return "sunny"

response = client.models.generate_content(
    model="gemini-2.0-flash-001",
    contents="What is the weather like in Boston?",
    config=types.GenerateContentConfig(
        tools=[get_current_weather],
        automatic_function_calling=types.AutomaticFunctionCallingConfig(
            maximum_remote_calls=2
        ),
        tool_config=types.ToolConfig(
            function_calling_config=types.FunctionCallingConfig(mode='ANY')
        ),
    ),
)
```

----------------------------------------

TITLE: UrlMetadata and UrlMetadataDict Structure
DESCRIPTION: Defines the structure for URL metadata and its dictionary representation, including retrieved URL and status.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_363

LANGUAGE: APIDOC
CODE:
```
UrlMetadata:
  retrieved_url: The actual URL that was retrieved. (str)
  url_retrieval_status: The status of the URL retrieval. (UrlRetrievalStatus)
```

LANGUAGE: APIDOC
CODE:
```
UrlMetadataDict:
  retrieved_url: The actual URL that was retrieved. (str)
  url_retrieval_status: The status of the URL retrieval. (UrlRetrievalStatus)
```

----------------------------------------

TITLE: Configure GenAI for ANY Function Calling Mode
DESCRIPTION: This example shows how to configure the GenAI model to use the 'ANY' function calling mode. In this mode, the model will always return function call parts. Automatic function calling can be disabled if manual invocation is preferred.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_39

LANGUAGE: python
CODE:
```
from google.genai import types

def get_current_weather(location: str) -> str:
    """Returns the current weather.

    Args:
        location: The city and state, e.g. San Francisco, CA
    """
    return "sunny"

response = client.models.generate_content(
    model="gemini-2.0-flash-001",
    contents="What is the weather like in Boston?",
    config=types.GenerateContentConfig(
        tools=[get_current_weather],
        automatic_function_calling=types.AutomaticFunctionCallingConfig(
            disable=True
        ),
        tool_config=types.ToolConfig(
            function_calling_config=types.FunctionCallingConfig(mode='ANY')
        ),
    ),
)
```

----------------------------------------

TITLE: List Tuning Jobs (Synchronous)
DESCRIPTION: Retrieves a list of tuning jobs, with options for pagination.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_78

LANGUAGE: python
CODE:
```
for job in client.tunings.list(config={'page_size': 10}):
    print(job)
```

----------------------------------------

TITLE: Generate Content with Typed Parameters
DESCRIPTION: Illustrates generating content using typed parameters for the `generate_content` method, leveraging Pydantic types from `google.genai.types`. This includes setting various generation configuration parameters like `temperature`, `top_p`, `top_k`, `seed`, and `stop_sequences`.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_19

LANGUAGE: python
CODE:
```
from google.genai import types

response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents=types.Part.from_text(text='Why is the sky blue?'),
    config=types.GenerateContentConfig(
        temperature=0,
        top_p=0.95,
        top_k=20,
        candidate_count=1,
        seed=5,
        max_output_tokens=100,
        stop_sequences=['STOP!'],
        presence_penalty=0.0,
        frequency_penalty=0.0,
    ),
)

print(response.text)
```

----------------------------------------

TITLE: GenAI Function Response Creation Method
DESCRIPTION: Method for creating a FunctionResponse Part from a specific MCP (Model-Centric Protocol) response format.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_157

LANGUAGE: APIDOC
CODE:
```
genai.types.FunctionResponse.from_mcp_response(mcp_response: dict)
  Creates a FunctionResponse Part from an MCP response dictionary.
  Parameters:
    mcp_response: The MCP response data.
```

----------------------------------------

TITLE: BatchJobSource Type Documentation
DESCRIPTION: Specifies the source of input data for a batch job. Supports data from BigQuery, GCS, or inlined requests.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_33

LANGUAGE: APIDOC
CODE:
```
BatchJobSource:
  Attributes:
    bigquery_uri: The BigQuery dataset and table URI containing the input data.
    file_name: The name of the file containing the input data.
    format: The format of the input data (e.g., JSON, CSV).
    gcs_uri: The Google Cloud Storage URI pointing to the input data.
    inlined_requests: A list of inline requests to be processed by the batch job.
```

----------------------------------------

TITLE: Python GenAI: GenerationConfig Options
DESCRIPTION: Details the various configuration parameters available for controlling the generation process, including text, audio, and media generation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_134

LANGUAGE: APIDOC
CODE:
```
GenerationConfig:
  audio_timestamp: bool
    Whether to include audio timestamps in the output.
  candidate_count: int
    The number of response candidates to generate.
  enable_affective_dialog: bool
    Enables affective dialog features for conversational models.
  frequency_penalty: float
    Penalizes new tokens based on their frequency in the text so far.
  logprobs: bool
    Whether to include log probabilities for tokens.
  max_output_tokens: int
    The maximum number of tokens the model should generate.
  media_resolution: tuple[int, int]
    The desired resolution for generated media (width, height).
  model_selection_config: dict
    Configuration for selecting the appropriate model.
  presence_penalty: float
    Penalizes new tokens based on whether they appear in the text so far.
  response_json_schema: dict
    A JSON schema to constrain the model's output.
  response_logprobs: bool
    Whether to include log probabilities for the entire response.
  response_mime_type: str
    The desired MIME type for the response (e.g., 'image/png').
  response_modalities: list[str]
    Specifies the modalities (e.g., 'image', 'text') to include in the response.
  response_schema: dict
    A schema to structure the model's output.
  routing_config: dict
    Configuration for routing requests to different model versions or services.
  seed: int
    A seed for reproducible generation.
  speech_config: dict
    Configuration for speech-related generation or processing.
  stop_sequences: list[str]
    Sequences where the model should stop generating further tokens.
  temperature: float
    Controls randomness; higher values increase creativity.
  thinking_config: dict
    Configuration for the model's internal thinking process.
  top_k: int
    Filters the vocabulary to the top K most likely next tokens.
  top_p: float
    Filters the vocabulary to the smallest set of tokens whose cumulative probability exceeds P.
```

----------------------------------------

TITLE: genai.types.TestTableItem Attributes
DESCRIPTION: Documentation for attributes of the TestTableItem type, focusing on parameters.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_294

LANGUAGE: APIDOC
CODE:
```
TestTableItem:
  parameters: dict | None
    A dictionary of parameters for the test item.
```

LANGUAGE: APIDOC
CODE:
```
TestTableItemDict:
  parameters: dict | None
    A dictionary of parameters for the test item.
```

----------------------------------------

TITLE: GenAI Client File Property
DESCRIPTION: Details the 'files' property available on GenAI client objects, used for managing file-related operations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_144

LANGUAGE: APIDOC
CODE:
```
genai.client.AsyncClient.files
  Description: Property to access asynchronous file management operations.

genai.client.Client.files
  Description: Property to access synchronous file management operations.
```

----------------------------------------

TITLE: Live Client Message Structure
DESCRIPTION: Defines the structure of messages handled by the live client, encompassing content, real-time input, setup, and tool responses.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_188

LANGUAGE: APIDOC
CODE:
```
LiveClientMessageDict:
  client_content: LiveClientContent | None
    The content of the client's message.
  realtime_input: LiveClientRealtimeInput | None
    Real-time input data for the client.
  setup: dict | None
    Configuration or setup parameters for the client.
  tool_response: dict | None
    The response from a tool executed by the client.
```

----------------------------------------

TITLE: GenAI Library Type Definitions
DESCRIPTION: References to various type definitions within the genai.types module. These define the structure of data objects used throughout the library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_369

LANGUAGE: APIDOC
CODE:
```
genai.types.LiveClientContentDict
  - Represents content received from a live client, potentially including turns.

genai.types.Type
  - An enumeration or class representing different types, including TYPE_UNSPECIFIED.

genai.types.JSONSchema
  - Defines a JSON schema, with a 'type' attribute.

genai.types.Schema
  - Represents a schema, with a 'type' attribute.

genai.types.SchemaDict
  - Dictionary representation of a Schema.

genai.types.FinishReason
  - Enumeration for finish reasons, including UNSPECIFIED_TOOL_CALL.

genai.types.Behavior
  - Enumeration for behaviors, including UNSPECIFIED.

genai.types.BatchJob
  - Represents a batch job, with an 'update_time' attribute.

genai.types.BatchJobDict
  - Dictionary representation of a BatchJob.

genai.types.CachedContent
  - Represents cached content, with an 'update_time' attribute.

genai.types.CachedContentDict
  - Dictionary representation of CachedContent.

genai.types.File
  - Represents a file, with 'update_time' and 'uri' attributes.

genai.types.FileDict
  - Dictionary representation of a File.

genai.types.TunedModelInfo
  - Information about a tuned model, with an 'update_time' attribute.

genai.types.TunedModelInfoDict
  - Dictionary representation of TunedModelInfo.

genai.types.TuningJob
  - Represents a tuning job, with an 'update_time' attribute.

genai.types.TuningJobDict
  - Dictionary representation of a TuningJob.

genai.types.UpdateCachedContentConfigDict
  - Dictionary for configuring cached content updates.

genai.types.UpdateModelConfigDict
  - Dictionary for configuring model updates.

genai.types.FileSource
  - Represents the source of a file, including UPLOADED status.

genai.types.UploadFileConfigDict
  - Dictionary for configuring file uploads.

genai.types.UpscaleImageParameters
  - Parameters for upscaling an image, including 'upscale_factor'.

genai.types.UpscaleImageParametersDict
  - Dictionary representation of UpscaleImageParameters.

genai.types.UpscaleImageConfigDict
  - Dictionary for configuring image upscaling.

genai.types.UpscaleImageResponseDict
  - Dictionary representing the response from an image upscaling operation.

genai.types.Citation
  - Represents a citation, with a 'uri' attribute.

genai.types.CitationDict
  - Dictionary representation of a Citation.

genai.types.GroundingChunkRetrievedContext
  - Context retrieved for grounding, with a 'uri' attribute.

genai.types.GroundingChunkRetrievedContextDict
  - Dictionary representation of GroundingChunkRetrievedContext.

genai.types.GroundingChunkWeb
  - Web context for grounding, with a 'uri' attribute.

genai.types.GroundingChunkWebDict
  - Dictionary representation of GroundingChunkWeb.

genai.types.Video
  - Represents video data, with a 'uri' attribute.

genai.types.VideoDict
  - Dictionary representation of Video.

genai.types.ReplayRequest
  - Request object for replaying an interaction, with a 'url' attribute.

genai.types.ReplayRequestDict
  - Dictionary representation of ReplayRequest.

genai.types.Tool
  - Represents a tool, with a 'url_context' attribute.

genai.types.ToolDict
  - Dictionary representation of Tool.

genai.types.Candidate
  - Represents a candidate response, with 'url_context_metadata' attribute.

genai.types.CandidateDict
  - Dictionary representation of Candidate.
```

----------------------------------------

TITLE: genai.types.FileDict Attributes
DESCRIPTION: Details the attributes for FileDict, a dictionary representation of file metadata.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_104

LANGUAGE: APIDOC
CODE:
```
FileDict:
  create_time: Timestamp when the file was created.
  display_name: A user-friendly name for the file.
  download_uri: URI for downloading the file.
  error: Information about any errors encountered during file processing.
  expiration_time: Timestamp when the file expires.
  mime_type: The MIME type of the file.
  name: The name of the file.
  sha256_hash: SHA256 hash of the file content.
  size_bytes: The size of the file in bytes.
  source: The source of the file.
  state: The current state of the file.
  update_time: Timestamp when the file was last updated.
  uri: The URI of the file.
  video_metadata: Metadata specific to video files.
```

----------------------------------------

TITLE: genai.types.SupervisedTuningDatasetDistributionDatasetBucketDict
DESCRIPTION: Represents the distribution of data within a bucket for supervised tuning datasets.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_339

LANGUAGE: APIDOC
CODE:
```
genai.types.SupervisedTuningDatasetDistributionDatasetBucketDict (class in genai.types)
  - Represents the distribution of data within a bucket for supervised tuning datasets.
```

----------------------------------------

TITLE: genai.types.Schema Attributes
DESCRIPTION: Attributes for schema definitions, including additional properties and JSON schema references.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_15

LANGUAGE: APIDOC
CODE:
```
genai.types.Schema:
  Represents a schema definition.
  Attributes:
    additional_properties: Specifies whether additional properties are allowed.
      (Type and constraints not specified in source text.)

genai.types.SchemaDict:
  Dictionary representation of Schema.
  Attributes:
    additional_properties: Specifies whether additional properties are allowed.
      (Type and constraints not specified in source text.)
```

----------------------------------------

TITLE: GenAI Type Attributes: distillation_data_stats, distillation_spec
DESCRIPTION: Documentation for attributes related to distillation, including statistics and specifications for tuning jobs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_134

LANGUAGE: APIDOC
CODE:
```
genai.types.TuningDataStats.distillation_data_stats
  Description: Statistics related to distillation data.
  Type: dict or DistillationDataStatsDict

genai.types.TuningJob.distillation_spec
  Description: Specification for the distillation process in a tuning job.
  Type: dict or DistillationSpecDict
```

----------------------------------------

TITLE: HttpRetryOptionsDict
DESCRIPTION: Represents HTTP retry options for requests. Includes configuration for delays and backoff strategies.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_251

LANGUAGE: APIDOC
CODE:
```
HttpRetryOptionsDict:
  max_delay: Maximum delay in seconds for retries (float).
```

----------------------------------------

TITLE: List Batch Jobs Asynchronously with Pager (Python)
DESCRIPTION: Demonstrates how to list batch jobs asynchronously using a pager. It shows how to initialize the pager, access page size, retrieve the first item, and fetch the next page of results. Requires an initialized `client` object.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_68

LANGUAGE: python
CODE:
```
from google.genai import types

async_pager = await client.aio.batches.list(
    config=types.ListBatchJobsConfig(page_size=10)
)
print(async_pager.page_size)
print(async_pager[0])
await async_pager.next_page()
print(async_pager[0])
```

----------------------------------------

TITLE: Usage Metadata Attributes
DESCRIPTION: Details attributes related to usage metadata, including total token counts and traffic types, found across different response and configuration objects.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_354

LANGUAGE: APIDOC
CODE:
```
genai.types.UsageMetadata.total_token_count
  - Description: The total number of tokens used.
  - Type: int

genai.types.UsageMetadataDict.total_token_count
  - Description: The total number of tokens used (dictionary representation).
  - Type: int

genai.types.CountTokensResponse.total_tokens
  - Description: The total number of tokens in the response.
  - Type: int

genai.types.CountTokensResponseDict.total_tokens
  - Description: The total number of tokens in the response (dictionary representation).
  - Type: int

genai.types.GenerateContentResponseUsageMetadata.traffic_type
  - Description: The type of traffic for the request.
  - Type: genai.types.TrafficType

genai.types.GenerateContentResponseUsageMetadataDict.traffic_type
  - Description: The type of traffic for the request (dictionary representation).
  - Type: genai.types.TrafficType

genai.types.UsageMetadata.traffic_type
  - Description: The type of traffic for the request.
  - Type: genai.types.TrafficType

genai.types.UsageMetadataDict.traffic_type
  - Description: The type of traffic for the request (dictionary representation).
  - Type: genai.types.TrafficType
```

----------------------------------------

TITLE: genai.types.PartnerModelTuningSpecDict Class
DESCRIPTION: Represents tuning specifications for a partner model.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_299

LANGUAGE: APIDOC
CODE:
```
PartnerModelTuningSpecDict:
  (inherits from dict)
  
  Attributes:
    training_data_uri: str
      The URI of the training data.
    validation_data_uri: str | None
      The URI of the validation data.
```

----------------------------------------

TITLE: CitationMetadata and CitationMetadataDict Types
DESCRIPTION: Defines the structure for citation metadata, containing a list of citations, and its dictionary representation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_106

LANGUAGE: APIDOC
CODE:
```
CitationMetadata:
  citations: list[Citation]

CitationMetadataDict:
  citations: list[CitationDict]
```

----------------------------------------

TITLE: LiveConnect Configuration Parameters
DESCRIPTION: Details the configurable parameters for LiveConnect functionality, including media resolution, audio transcription, proactivity settings, and session management.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_291

LANGUAGE: APIDOC
CODE:
```
LiveConnectConfigDict:
  media_resolution: Specifies the desired media resolution.
  output_audio_transcription: Enables or disables audio transcription output.
  proactivity: Configures proactivity settings for the connection.
  realtime_input_config: Settings for real-time input configuration.
  response_modalities: Defines the expected response modalities.
  seed: A seed value for reproducibility.
  session_resumption: Configuration for session resumption.
  speech_config: Settings related to speech processing.
  system_instruction: An instruction provided to the system.
  temperature: Controls the randomness of predictions.
  tools: A list of tools available for use.
  top_k: The number of top-k tokens to consider.
  top_p: The cumulative probability for top-p sampling.
```

----------------------------------------

TITLE: GenerateContentResponseUsageMetadata Attributes
DESCRIPTION: Defines the attributes of GenerateContentResponseUsageMetadata, which provides details on token consumption for a generative AI request.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_213

LANGUAGE: APIDOC
CODE:
```
GenerateContentResponseUsageMetadata:
  # Attributes related to token usage would be listed here, e.g.:
  # prompt_token_count: Number of tokens in the prompt.
  # candidates_token_count: Number of tokens in the generated candidates.
```

----------------------------------------

TITLE: LiveServerSetupComplete Attributes
DESCRIPTION: Details the attributes for LiveServerSetupComplete, signaling the completion of live server setup.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_228

LANGUAGE: APIDOC
CODE:
```
LiveServerSetupComplete:
  session_id: The unique identifier for the live server session.
```

----------------------------------------

TITLE: genai.types.RagRetrievalConfigFilter Attributes
DESCRIPTION: Reference for metadata filtering configuration in RAG retrieval.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_257

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigFilter:
  metadata_filter: Configuration for filtering based on metadata.
```

----------------------------------------

TITLE: Common Attributes: filtered_prompt, filtered_reason, finish_message, finished, first_page
DESCRIPTION: Documentation for common attributes related to content filtering, generation completion, and pagination within the genai library. These attributes provide insights into model output and data structure details.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_153

LANGUAGE: APIDOC
CODE:
```
filtered_prompt:
  Represents a prompt that has been filtered, likely due to safety or policy violations. Found in message structures.
  Example:
    LiveMusicServerMessage(filtered_prompt='[Content removed due to policy]')

filtered_reason:
  Provides the reason why a prompt or content was filtered. Associated with filtered content.
  Example:
    LiveMusicFilteredPrompt(filtered_reason='VIOLATED_SAFETY_POLICY')

finish_message:
  A message associated with the completion of a generation task, potentially indicating why it finished or any relevant notes.
  Example:
    Candidate(finish_message='Generation completed successfully.')

finished:
  A boolean flag indicating whether a process, like transcription, has been completed.
  Example:
    Transcription(finished=True)

first_page:
  Indicates the first page number or identifier in a paginated sequence, often used in retrieval or chunking contexts.
  Example:
    RagChunkPageSpan(first_page=1)
```

----------------------------------------

TITLE: BlockedReason Type Documentation
DESCRIPTION: Enumerates the possible reasons why a request or content might be blocked due to safety or policy violations. Includes unspecified, blocklist, safety, prohibited content, and image safety.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_35

LANGUAGE: APIDOC
CODE:
```
BlockedReason:
  Enum Values:
    BLOCKED_REASON_UNSPECIFIED: Default value. Should not be used.
    BLOCKLIST: Content blocked due to being on a blocklist.
    IMAGE_SAFETY: Content blocked due to image safety concerns.
    OTHER: Other unspecified reasons for blocking.
    PROHIBITED_CONTENT: Content blocked due to prohibited content policies.
    SAFETY: Content blocked due to general safety concerns.
```

----------------------------------------

TITLE: GenerateContentConfigDict Parameters for Python GenAI
DESCRIPTION: Details the dictionary-based configuration parameters for content generation in the Python GenAI library. This mirrors GenerateContentConfig but is intended for dictionary usage.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_207

LANGUAGE: APIDOC
CODE:
```
GenerateContentConfigDict:
  audio_timestamp: object
    Timestamp information for audio.
  automatic_function_calling: bool
    Enable automatic function calling.
  cached_content: str
    Pre-cached content for the model.
  candidate_count: int
    Number of candidates to generate.
  frequency_penalty: float
    Penalty for repeating tokens based on frequency.
  http_options: object
    HTTP-specific options.
  labels: dict
    Key-value pairs for labeling.
  logprobs: bool
    Enable log probabilities for the response.
  max_output_tokens: int
    The maximum number of tokens to generate in the output.
  media_resolution: str
    Specifies the resolution for media content.
  model_selection_config: object
    Configuration for model selection.
  presence_penalty: float
    Penalty for repeating tokens.
  response_json_schema: str
    Schema for JSON response.
  response_logprobs: bool
    Enable log probabilities for the response.
  response_mime_type: str
    MIME type for the response.
  response_modalities: list[str]
    Modalities expected in the response.
  response_schema: str
    Schema for the response.
  routing_config: object
    Configuration for routing.
  safety_settings: object
    Settings for safety filters.
  seed: int
    Seed for reproducible generation.
  speech_config: object
    Configuration for speech synthesis.
  stop_sequences: list[str]
    Sequences that stop generation.
  system_instruction: object
    System-level instructions for the model.
  temperature: float
    Controls randomness in generation.
  thinking_config: object
    Configuration for thinking process.
  tool_config: object
    Configuration for tools.
  tools: list[object]
    List of tools available to the model.
  top_k: int
    Top-K sampling parameter.
  top_p: float
    Top-P (nucleus) sampling parameter.
```

----------------------------------------

TITLE: genai.types.ComputeTokensConfigDict
DESCRIPTION: Dictionary structure for configuring token computation requests.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_97

LANGUAGE: APIDOC
CODE:
```
ComputeTokensConfigDict
  Properties:
    model: str | None
      Description: The name of the model to use for token computation.
```

----------------------------------------

TITLE: genai.types.CreateTuningJobConfig Attributes
DESCRIPTION: Details attributes for CreateTuningJobConfig, including batch_size for specifying the batch size during tuning.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_37

LANGUAGE: APIDOC
CODE:
```
genai.types.CreateTuningJobConfig.batch_size
  - Description: The batch size for the tuning job.
  - Related: genai.types.CreateTuningJobConfigDict.batch_size
```

----------------------------------------

TITLE: GenerateContentConfigDict Parameters
DESCRIPTION: Details the members of the GenerateContentConfigDict type, mirroring configurable parameters for content generation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_118

LANGUAGE: APIDOC
CODE:
```
Type: GenerateContentConfigDict
Parameters:
  audio_timestamp: (Optional[Timestamp]) - Timestamp for audio content.
  automatic_function_calling: (Optional[bool]) - Enable automatic function calling.
  cached_content: (Optional[str]) - Content to be cached.
  candidate_count: (Optional[int]) - Number of candidates to generate.
  frequency_penalty: (Optional[float]) - Controls frequency penalty.
  http_options: (Optional[HttpOptions]) - HTTP request options.
```

----------------------------------------

TITLE: genai.types.LiveMusicGenerationConfig.guidance
DESCRIPTION: Documentation for the 'guidance' attribute in LiveMusicGenerationConfig and LiveMusicGenerationConfigDict. This likely relates to guidance parameters for music generation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_176

LANGUAGE: APIDOC
CODE:
```
guidance (genai.types.LiveMusicGenerationConfig attribute)
  Specifies guidance for live music generation.

guidance (genai.types.LiveMusicGenerationConfigDict attribute)
  Specifies guidance for live music generation.
```

----------------------------------------

TITLE: Schema Attributes and Methods
DESCRIPTION: Details the attributes and methods available for the Schema type, which is used for defining data structures and validation rules, often based on JSON Schema.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_373

LANGUAGE: APIDOC
CODE:
```
Schema:
  additional_properties: Any
    Specifies properties not explicitly defined.
  any_of: List[Schema]
    A list of schemas where the data must match at least one.
  default: Any
    The default value for the property.
  defs: Dict[str, Schema]
    Definitions for reusable schema components.
  description: str
    A description of the schema or property.
  enum: List[Any]
    A list of allowed values for the property.
  example: Any
    An example value for the property.
  format: str
    The format of the data (e.g., 'date-time', 'email').
  items: Schema | List[Schema]
    Defines the schema for items in an array.
  max_items: int
    The maximum number of items allowed in an array.
  max_length: int
    The maximum length allowed for a string.
  max_properties: int
    The maximum number of properties allowed in an object.
  maximum: Union[int, float]
    The maximum numerical value allowed.
  min_items: int
    The minimum number of items allowed in an array.
  min_length: int
    The minimum length allowed for a string.
  min_properties: int
    The minimum number of properties allowed in an object.
  minimum: Union[int, float]
    The minimum numerical value allowed.
  nullable: bool
    Indicates if the property can be null.
  pattern: str
    A regular expression pattern for string validation.
  properties: Dict[str, Schema]
    Defines the properties of an object.
  property_ordering: List[str]
    Specifies the order of properties.
  ref: str
    A reference to another schema definition.
  required: List[str]
    A list of required property names.
  title: str
    A title for the schema or property.
  type: str | List[str]
    The data type of the property (e.g., 'string', 'integer', 'object').

  from_json_schema(schema: Dict) -> Schema
    Creates a Schema object from a JSON schema dictionary.
```

----------------------------------------

TITLE: GenAI Usage Metadata and Music Content Attributes
DESCRIPTION: References to attributes for cached content usage metadata and live music server content, specifically focusing on audio duration and audio chunks.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_31

LANGUAGE: APIDOC
CODE:
```
CachedContentUsageMetadata:
  audio_duration_seconds: The duration of audio content in seconds.

CachedContentUsageMetadataDict:
  audio_duration_seconds: The duration of audio content in seconds in a dictionary.

LiveMusicServerContent:
  audio_chunks: A list of audio chunks received from the music server.

LiveMusicServerContentDict:
  audio_chunks: A list of audio chunks received from the music server in a dictionary.
```

----------------------------------------

TITLE: Part Type Members
DESCRIPTION: Details the factory methods available on the Part type for creating different types of content parts.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_264

LANGUAGE: APIDOC
CODE:
```
Part:
  from_function_call(function_call: FunctionCall)
    Creates a Part object from a function call.

  from_function_response(function_response: FunctionResponse)
    Creates a Part object from a function response.

  from_text(text: str)
    Creates a Part object from plain text.

  from_uri(mime_type: str, uri: str)
    Creates a Part object from a URI, specifying the MIME type and URI.
```

----------------------------------------

TITLE: Download File for Generation
DESCRIPTION: Shows how to download a file from a given URL using the wget command. This file can then be used as input for content generation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_13

LANGUAGE: sh
CODE:
```
!wget -q https://storage.googleapis.com/generativeai-downloads/data/a11.txt
```

----------------------------------------

TITLE: genai.types.HttpResponse Attributes
DESCRIPTION: References to attributes of the HttpResponse type, related to HTTP response content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_50

LANGUAGE: APIDOC
CODE:
```
HttpResponse:
  body: The body content of the HTTP response.
```

----------------------------------------

TITLE: LiveServerMessage and LiveServerMessageDict Types
DESCRIPTION: Defines the general structure for messages exchanged with the live server, encompassing various event types like go_away, server_content, tool calls, and usage metadata. Includes object and dictionary representations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_316

LANGUAGE: APIDOC
CODE:
```
LiveServerMessage:
  Attributes:
    - go_away (LiveServerGoAway): Message indicating server shutdown.
    - server_content (LiveServerContent): Content received from the server.
    - session_resumption_update (LiveServerSessionResumptionUpdate): Update regarding session resumption.
    - setup_complete (LiveServerSetupComplete): Message indicating setup completion.
    - tool_call (dict): Information about a tool call.
    - tool_call_cancellation (dict): Information about a tool call cancellation.
    - usage_metadata (dict): Metadata about resource usage.
    - data (dict): Generic data payload.
    - text (str): Plain text message.

LiveServerMessageDict:
  Attributes:
    - go_away (LiveServerGoAwayDict): Message indicating server shutdown.
    - server_content (LiveServerContentDict): Content received from the server.
    - session_resumption_update (LiveServerSessionResumptionUpdateDict): Update regarding session resumption.
    - setup_complete (LiveServerSetupComplete): Message indicating setup completion.
    - tool_call (dict): Information about a tool call.
    - tool_call_cancellation (dict): Information about a tool call cancellation.
    - usage_metadata (dict): Metadata about resource usage.
```

----------------------------------------

TITLE: genai.types.StyleReferenceConfig style_description Attribute
DESCRIPTION: References to the 'style_description' attribute for providing textual descriptions of styles in genai.types.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_327

LANGUAGE: APIDOC
CODE:
```
genai.types.StyleReferenceConfig.style_description
  Description: A textual description of the desired style.
  Type: str

genai.types.StyleReferenceConfigDict.style_description
  Description: Dictionary representation of the style description.
  Type: str
```

----------------------------------------

TITLE: Create Client Using Environment Variables
DESCRIPTION: Initializes a client without explicit arguments, relying on pre-configured environment variables (e.g., GOOGLE_API_KEY or Vertex AI credentials).
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_6

LANGUAGE: python
CODE:
```
from google import genai

client = genai.Client()
```

----------------------------------------

TITLE: LiveMusicSourceMetadata Structure
DESCRIPTION: Contains metadata related to the source of music generation, including client content and generation configurations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_311

LANGUAGE: APIDOC
CODE:
```
LiveMusicSourceMetadata:
  client_content: str | None
    Content provided by the client.
  music_generation_config: dict | None
    The music generation configuration associated with this source.
```

----------------------------------------

TITLE: LiveMusicSourceMetadata Types
DESCRIPTION: Metadata related to the source of live music, including client content and generation configurations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_216

LANGUAGE: APIDOC
CODE:
```
LiveMusicSourceMetadata:
  Metadata about the source of live music.
  Attributes:
    - client_content: Content provided by the client.
    - music_generation_config: Configuration used for music generation.

LiveMusicSourceMetadataDict:
  Dictionary representation of LiveMusicSourceMetadata.
```

----------------------------------------

TITLE: Download File for Upload
DESCRIPTION: Command to download a file using `wget` for subsequent upload to the client.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_13

LANGUAGE: console
CODE:
```
!wget -q https://storage.googleapis.com/generativeai-downloads/data/a11.txt
```

----------------------------------------

TITLE: Use Extra Request Body for Advanced Features
DESCRIPTION: Shows how to use the `extra_body` field within `HttpOptions` to include additional JSON properties in the request body. This is useful for accessing experimental backend features, such as compositional function calling.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_91

LANGUAGE: python
CODE:
```
response = client.models.generate_content(
    model="gemini-2.5-pro",
    contents="What is the weather in Boston? and how about Sunnyvale?",
    config=types.GenerateContentConfig(
        tools=[get_current_weather],
        http_options=types.HttpOptions(extra_body={'tool_config': {'function_calling_config': {'mode': 'COMPOSITIONAL'}}}),
    ),
)
```

----------------------------------------

TITLE: Python GenAI: CreateFileConfigDict Fields
DESCRIPTION: Dictionary-based representation for file creation configuration, mirroring CreateFileConfig fields.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_132

LANGUAGE: APIDOC
CODE:
```
CreateFileConfigDict:
  http_options: HTTP-specific options for the file creation request.
  should_return_http_response: A boolean indicating whether to return the raw HTTP response.
```

----------------------------------------

TITLE: UrlContextMetadata and UrlContextMetadataDict
DESCRIPTION: Contains metadata associated with a URL context, specifically referencing URL metadata. The Dict version is for dictionary-based metadata.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_423

LANGUAGE: APIDOC
CODE:
```
UrlContextMetadata:
  url_metadata: UrlMetadata | None
    Metadata pertaining to the URL.

UrlContextMetadataDict:
  url_metadata: UrlMetadataDict | None
    Metadata pertaining to the URL.
```

----------------------------------------

TITLE: ListCachedContentsConfig
DESCRIPTION: Configuration options for listing cached content, including pagination and HTTP options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_270

LANGUAGE: APIDOC
CODE:
```
ListCachedContentsConfig:
  Configuration for listing cached contents.
  Attributes:
    http_options: Optional HTTP client options.
    page_size: The maximum number of cached contents to return per page.
```

----------------------------------------

TITLE: GenAI Type Dictionary Classes
DESCRIPTION: References to dictionary-like type classes used within the GenAI library for data structures.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_140

LANGUAGE: APIDOC
CODE:
```
genai.types.DistillationDataStatsDict
  Description: Dictionary representation for distillation data statistics.

genai.types.DistillationHyperParametersDict
  Description: Dictionary representation for distillation hyperparameters.

genai.types.DistillationSpecDict
  Description: Dictionary representation for distillation specifications.
```

----------------------------------------

TITLE: genai.types.FileSource Enumeration
DESCRIPTION: Enumeration for the source of a file.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_105

LANGUAGE: APIDOC
CODE:
```
FileSource:
  GENERATED: The file was generated by the model.
  SOURCE_UNSPECIFIED: The source of the file is not specified.
  UPLOADED: The file was uploaded by the user.
```

----------------------------------------

TITLE: genai.types.JSONSchemaType and genai.types.Type Enumerations
DESCRIPTION: References to boolean type definitions within JSONSchemaType and a general Type enumeration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_53

LANGUAGE: APIDOC
CODE:
```
JSONSchemaType:
  BOOLEAN: Represents the boolean data type in JSON Schema.

Type:
  BOOLEAN: Represents a boolean value.
```

----------------------------------------

TITLE: Test Table File Types
DESCRIPTION: Represents a file containing test data organized in a table format. Includes fields for comments, parameter names, and the test method itself.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_391

LANGUAGE: APIDOC
CODE:
```
TestTableFile:
  comment: str | None
    An optional comment describing the test table.
  parameter_names: list[str]
    A list of parameter names for the test table.
  test_method: str
    The name of the test method.
  test_table: list[list[str]]
    The actual test data in a list of lists format.
```

LANGUAGE: APIDOC
CODE:
```
TestTableFileDict:
  comment: str | None
    An optional comment describing the test table.
  parameter_names: list[str]
    A list of parameter names for the test table.
  test_method: str
    The name of the test method.
  test_table: list[list[str]]
    The actual test data in a list of lists format.
```

----------------------------------------

TITLE: Synchronous Streaming for Image Content (from URI)
DESCRIPTION: Demonstrates streaming content generation when the input includes an image from a Google Cloud Storage URI. The `Part.from_uri` method is used to reference the image.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_45

LANGUAGE: python
CODE:
```
from google.genai import types

for chunk in client.models.generate_content_stream(
    model='gemini-2.0-flash-001',
    contents=[
        'What is this image about?',
        types.Part.from_uri(
            file_uri='gs://generativeai-downloads/images/scones.jpg',
            mime_type='image/jpeg',
        ),
    ],
):
    print(chunk.text, end='')
```

----------------------------------------

TITLE: LiveMusicServerMessage Types
DESCRIPTION: Defines the structure for messages exchanged with the live music server, including filtered prompts, server content, and setup completion status.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_212

LANGUAGE: APIDOC
CODE:
```
LiveMusicServerMessage:
  Represents a message from the live music server.
  Attributes:
    - filtered_prompt: The filtered prompt sent by the server.
    - server_content: Content received from the server (e.g., audio).
    - setup_complete: Indicates if the server setup is complete.

LiveMusicServerMessageDict:
  Dictionary representation of LiveMusicServerMessage.
```

----------------------------------------

TITLE: Language Enumeration
DESCRIPTION: Identifies supported languages for various operations within the GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_266

LANGUAGE: APIDOC
CODE:
```
Language:
  Represents a supported programming language.
  Members:
    LANGUAGE_UNSPECIFIED: The language is not specified.
    PYTHON: Indicates the Python language.
```

----------------------------------------

TITLE: genai.types.VoiceConfig Attributes
DESCRIPTION: Documentation for attributes of VoiceConfig, including prebuilt voice configuration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_310

LANGUAGE: APIDOC
CODE:
```
VoiceConfig:
  prebuilt_voice_config: dict | None
    Configuration for a prebuilt voice.
```

LANGUAGE: APIDOC
CODE:
```
VoiceConfigDict:
  prebuilt_voice_config: dict | None
    Configuration for a prebuilt voice.
```

----------------------------------------

TITLE: BatchJob Type Documentation
DESCRIPTION: Details the structure and attributes of the BatchJob type, representing a batch processing job. Includes information on its state, creation time, update time, and destination.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_31

LANGUAGE: APIDOC
CODE:
```
BatchJob:
  Attributes:
    create_time: Timestamp when the batch job was created.
    dest: Destination configuration for the batch job results.
    display_name: A user-friendly name for the batch job.
    end_time: Timestamp when the batch job finished execution.
    error: Information about any errors encountered during job execution.
    model: The generative AI model used for the batch job.
    name: The unique identifier for the batch job.
    src: Source configuration for the input data of the batch job.
    start_time: Timestamp when the batch job began execution.
    state: The current status of the batch job (e.g., PENDING, RUNNING, SUCCEEDED, FAILED).
    update_time: Timestamp when the batch job was last updated.
```

----------------------------------------

TITLE: genai.types Usage Metrics Attributes
DESCRIPTION: Details attributes related to usage metrics, such as billable_character_count and billable_sum for tracking costs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_43

LANGUAGE: APIDOC
CODE:
```
genai.types.EmbedContentMetadata.billable_character_count
  - Description: The number of characters that were billed for content embedding.
  - Related: genai.types.EmbedContentMetadataDict.billable_character_count
```

LANGUAGE: APIDOC
CODE:
```
genai.types.SupervisedTuningDatasetDistribution.billable_sum
  - Description: The total billable amount for the dataset distribution.
  - Related: genai.types.SupervisedTuningDatasetDistributionDict.billable_sum
```

----------------------------------------

TITLE: genai.types.FileStatus Attributes
DESCRIPTION: References for status messages within FileStatus and related error types.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_255

LANGUAGE: APIDOC
CODE:
```
FileStatus:
  message: A status message associated with the file.
GoogleRpcStatus:
  message: A detailed error message.
JobError:
  message: A message describing the job error.
```

----------------------------------------

TITLE: genai.types.ListBatchJobsResponse Attributes
DESCRIPTION: Attributes for the response when listing batch jobs, including pagination tokens.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_268

LANGUAGE: APIDOC
CODE:
```
ListBatchJobsResponse:
  next_page_token: Token to retrieve the next page of results.
```

----------------------------------------

TITLE: Live Music Weighted Prompts Attributes
DESCRIPTION: Details attributes related to weighted prompts for live music content, including configurations for setting weighted prompts.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_385

LANGUAGE: APIDOC
CODE:
```
genai.types.LiveMusicClientContent.weighted_prompts
  Description: List of weighted prompts for live music content.
  Type: list[WeightedPrompt] or list[WeightedPromptDict]

genai.types.LiveMusicClientContentDict.weighted_prompts
  Description: Dictionary representation of weighted prompts for live music content.
  Type: list[WeightedPromptDict] or list[WeightedPrompt]

genai.types.LiveMusicSetWeightedPromptsParameters.weighted_prompts
  Description: Parameters for setting weighted prompts in live music.
  Type: list[WeightedPrompt] or list[WeightedPromptDict]

genai.types.LiveMusicSetWeightedPromptsParametersDict.weighted_prompts
  Description: Dictionary representation of parameters for setting weighted prompts.
  Type: list[WeightedPromptDict] or list[WeightedPrompt]
```

----------------------------------------

TITLE: genai.batches.AsyncBatches.create
DESCRIPTION: Asynchronously creates a batch request for processing multiple generative AI prompts. This method is part of the AsyncBatches class in the genai.batches module.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_112

LANGUAGE: APIDOC
CODE:
```
genai.batches.AsyncBatches.create(requests: List[CreateBatchRequest]) -> Batch
  Description: Creates a new batch of requests.
  Parameters:
    requests: A list of CreateBatchRequest objects, each defining a prompt and model.
  Returns: A Batch object representing the created batch.
  Related: genai.batches.Batches.create, genai.types.CreateBatchRequest
```

----------------------------------------

TITLE: StyleReferenceImage Members
DESCRIPTION: Configuration for referencing a style using an image.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_318

LANGUAGE: APIDOC
CODE:
```
StyleReferenceImage:
  config: StyleReferenceConfig
    Configuration for the style reference.
  reference_id: str
    An identifier for the reference image.
  reference_image: Image
    The image data used for style reference.
  reference_type: StyleReferenceType
    The type of reference (e.g., image).
  style_image_config: StyleImageConfig
    Specific configuration for the style image.
```

----------------------------------------

TITLE: UploadFileConfig and UploadFileConfigDict
DESCRIPTION: Defines configuration options for uploading files, including display name, MIME type, and HTTP options. The Dict version is for dictionary-based configurations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_418

LANGUAGE: APIDOC
CODE:
```
UploadFileConfig:
  http_options: dict | None
    HTTP options for the upload request.
  mime_type: str | None
    The MIME type of the file.
  name: str | None
    The name of the file.

UploadFileConfigDict:
  display_name: str | None
    The display name of the file.
  http_options: dict | None
    HTTP options for the upload request.
  mime_type: str | None
    The MIME type of the file.
  name: str | None
    The name of the file.
```

----------------------------------------

TITLE: genai.types.ListModelsResponse Attributes
DESCRIPTION: Attributes for the response when listing available models, including pagination tokens.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_271

LANGUAGE: APIDOC
CODE:
```
ListModelsResponse:
  next_page_token: Token to retrieve the next page of results.
```

----------------------------------------

TITLE: CreateBatchJob Configuration
DESCRIPTION: Specifies configuration options for creating batch jobs, including destination, display name, and HTTP settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_60

LANGUAGE: APIDOC
CODE:
```
CreateBatchJobConfig:
  dest: str | None
    The destination for the batch job output.
  display_name: str | None
    A user-friendly name for the batch job.
  http_options: HTTPOptions | None
    Custom HTTP options for the request.

CreateBatchJobConfigDict:
  dest: str | None
    The destination for the batch job output.
  display_name: str | None
    A user-friendly name for the batch job.
  http_options: HTTPOptions | None
    Custom HTTP options for the request.
```

----------------------------------------

TITLE: List Batch Jobs (Async)
DESCRIPTION: Demonstrates asynchronous listing of batch prediction jobs with the Google GenAI Python client, utilizing an async pager for efficient retrieval of results.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_67

LANGUAGE: python
CODE:
```
from google.genai import types

async for job in await client.aio.batches.list(
    config=types.ListBatchJobsConfig(page_size=10)
):
    print(job)
```

----------------------------------------

TITLE: InlinedRequest Type
DESCRIPTION: Represents an inlined request payload, containing model configuration and content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_255

LANGUAGE: APIDOC
CODE:
```
InlinedRequest:
  config: Model configuration object.
  contents: List of content parts for the request.
  model: The name of the model to use (string).
```

----------------------------------------

TITLE: LiveServerContent Structure
DESCRIPTION: Represents content received from the Live Music server. It includes information about generation status, grounding metadata, and model turns.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_313

LANGUAGE: APIDOC
CODE:
```
LiveServerContent:
  generation_complete: bool | None
    Indicates if the music generation process is complete.
  grounding_metadata: dict | None
    Metadata related to grounding the generated content.
  input_transcription: str | None
    The transcribed input provided by the user.
  interrupted: bool | None
    Flag indicating if the generation was interrupted.
  model_turn: bool | None
    Indicates if the current content is from the model's turn.
```

----------------------------------------

TITLE: OAuth Authentication
DESCRIPTION: Configuration details for OAuth authentication, including access tokens and service account information.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_19

LANGUAGE: APIDOC
CODE:
```
AuthConfigOauthConfig:
  access_token: str
    The OAuth access token.
  service_account: str
    Service account details for OAuth flow.

AuthConfigOauthConfigDict:
  access_token: str
    The OAuth access token.
  service_account: str
    Service account details for OAuth flow.
```

----------------------------------------

TITLE: Async Tunings Pager
DESCRIPTION: Demonstrates how to use the asynchronous pager object for tuning jobs. It shows accessing page size, individual items, and fetching the next page.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_81

LANGUAGE: python
CODE:
```
async_pager = await client.aio.tunings.list(config={'page_size': 10})
print(async_pager.page_size)
print(async_pager[0])
await async_pager.next_page()
print(async_pager[0])
```

----------------------------------------

TITLE: LiveSendRealtimeInputParameters Types
DESCRIPTION: Parameters for sending real-time input data for live music generation, including audio, text, and activity timing.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_217

LANGUAGE: APIDOC
CODE:
```
LiveSendRealtimeInputParameters:
  Parameters for sending real-time input data.
  Attributes:
    - activity_end: Timestamp indicating the end of an activity.
    - activity_start: Timestamp indicating the start of an activity.
    - audio: Raw audio data.
    - audio_stream_end: Flag indicating the end of an audio stream.
    - media: Media data (e.g., video).
    - text: Textual input.
    - video: Video data.

LiveSendRealtimeInputParametersDict:
  Dictionary representation of LiveSendRealtimeInputParameters.
```

----------------------------------------

TITLE: genai.types.DistillationHyperParameters Attributes
DESCRIPTION: Attributes for distillation hyper-parameters, including adapter size.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_12

LANGUAGE: APIDOC
CODE:
```
genai.types.DistillationHyperParameters:
  Hyper-parameters for distillation.
  Attributes:
    adapter_size: Specifies the size of the adapter.
      (Type and constraints not specified in source text.)

genai.types.DistillationHyperParametersDict:
  Dictionary representation of DistillationHyperParameters.
  Attributes:
    adapter_size: Specifies the size of the adapter.
      (Type and constraints not specified in source text.)
```

----------------------------------------

TITLE: UrlContext and UrlContextDict Structure
DESCRIPTION: Defines the structure for providing URL context and its dictionary representation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_361

LANGUAGE: APIDOC
CODE:
```
UrlContext:
  parts: The content parts associated with the URL. (List[Part])
```

LANGUAGE: APIDOC
CODE:
```
UrlContextDict:
  parts: The content parts associated with the URL. (List[PartDict])
```

----------------------------------------

TITLE: GenAI JSON Schema and Media Type Attributes
DESCRIPTION: References to attributes related to JSON schema types and media modalities, including ARRAY, AUDIO, and aspect ratio configurations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_28

LANGUAGE: APIDOC
CODE:
```
JSONSchemaType:
  ARRAY: Represents the JSON schema type for an array.

Type:
  ARRAY: Represents the type for an array.

EditImageConfig:
  aspect_ratio: Attribute for the aspect ratio of an edited image.

EditImageConfigDict:
  aspect_ratio: Attribute for the aspect ratio of an edited image in a dictionary.

GenerateImagesConfig:
  aspect_ratio: Attribute for the aspect ratio of generated images.

GenerateImagesConfigDict:
  aspect_ratio: Attribute for the aspect ratio of generated images in a dictionary.

GenerateVideosConfig:
  aspect_ratio: Attribute for the aspect ratio of generated videos.

GenerateVideosConfigDict:
  aspect_ratio: Attribute for the aspect ratio of generated videos in a dictionary.

MediaModality:
  AUDIO: Represents the audio media modality.

Modality:
  AUDIO: Represents the audio media modality.
```

----------------------------------------

TITLE: APIDOC: UpscaleImageConfig and UpscaleImageConfigDict
DESCRIPTION: Defines configuration settings for upscaling an image. It covers options like enhancing the input image, output compression quality, output MIME type, and RAI (Responsible AI) related flags.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_355

LANGUAGE: APIDOC
CODE:
```
UpscaleImageConfig:
  enhance_input_image: bool | None
    Whether to enhance the input image before upscaling.
  http_options: dict | None
    Custom HTTP options to be used for the request.
  image_preservation_factor: float | None
    A factor to control image preservation during upscaling.
  include_rai_reason: bool | None
    Whether to include RAI (Responsible AI) reasons in the output.
  output_compression_quality: int | None
    The compression quality for the output image (0-100).
  output_mime_type: str | None
    The MIME type for the output image.

UpscaleImageConfigDict:
  enhance_input_image: bool | None
    Whether to enhance the input image before upscaling.
  http_options: dict | None
    Custom HTTP options to be used for the request.
  image_preservation_factor: float | None
    A factor to control image preservation during upscaling.
  include_rai_reason: bool | None
    Whether to include RAI (Responsible AI) reasons in the output.
  output_compression_quality: int | None
    The compression quality for the output image (0-100).
  output_mime_type: str | None
    The MIME type for the output image.
```

----------------------------------------

TITLE: Create and Manage Batch Prediction Job
DESCRIPTION: Illustrates creating a batch prediction job, specifying the model and source data. It also shows how to retrieve a job by name and monitor its state until completion.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_65

LANGUAGE: python
CODE:
```
# Specify model and source file only, destination and job display name will be auto-populated
job = client.batches.create(
    model='gemini-2.0-flash-001',
    src='bq://my-project.my-dataset.my-table',
)

job

# Get a job by name
job = client.batches.get(name=job.name)

job.state

completed_states = set(
    [
        'JOB_STATE_SUCCEEDED',
        'JOB_STATE_FAILED',
        'JOB_STATE_CANCELLED',
        'JOB_STATE_PAUSED',
    ]
)

while job.state not in completed_states:
    print(job.state)
    job = client.batches.get(name=job.name)
    time.sleep(30)

job
```

----------------------------------------

TITLE: CreateAuthTokenConfig Type
DESCRIPTION: Configuration for creating authentication tokens. This includes settings for token expiration, associated uses, and constraints for live connections.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_123

LANGUAGE: APIDOC
CODE:
```
CreateAuthTokenConfig:
  description: Configuration for creating authentication tokens.
  fields:
    expire_time: The expiration time for the token.
    http_options: HTTP-specific options for the request.
    live_connect_constraints: Constraints for live connections.
    lock_additional_fields: Flag to lock additional fields.
    new_session_expire_time: Expiration time for new sessions.
    uses: Specifies the intended uses of the token.
```

----------------------------------------

TITLE: DownloadFileConfig Configuration
DESCRIPTION: Configuration options for downloading files, including HTTP-specific settings that can modify request behavior.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_73

LANGUAGE: APIDOC
CODE:
```
DownloadFileConfig:
  http_options: dict
    A dictionary containing options to customize HTTP requests, such as headers or timeouts.
```

LANGUAGE: APIDOC
CODE:
```
DownloadFileConfigDict:
  http_options: dict
    A dictionary containing options to customize HTTP requests, such as headers or timeouts.
```

----------------------------------------

TITLE: Audio Data Types
DESCRIPTION: Defines structures for handling audio data, including raw data, MIME type, and source metadata.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_14

LANGUAGE: APIDOC
CODE:
```
AudioChunk:
  data: bytes
    The raw audio data.
  mime_type: str
    The MIME type of the audio data (e.g., 'audio/wav').
  source_metadata: dict
    Metadata associated with the audio source.

AudioChunkDict:
  data: bytes
    The raw audio data.
  mime_type: str
    The MIME type of the audio data (e.g., 'audio/wav').
  source_metadata: dict
    Metadata associated with the audio source.
```

----------------------------------------

TITLE: Provide List of Function Call Parts
DESCRIPTION: Illustrates creating a `ModelContent` object with multiple function call parts. The SDK converts a list of function call parts into a content with a model role.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_15

LANGUAGE: python
CODE:
```
from google.genai import types

contents = [
    types.Part.from_function_call(
        name='get_weather_by_location',
        args={'location': 'Boston'}
    ),
    types.Part.from_function_call(
        name='get_weather_by_location',
        args={'location': 'New York'}
    ),
]

# The SDK converts the list of function call parts to a content with a model role:
# types.ModelContent(
#     parts=[
#     types.Part.from_function_call(
#         name='get_weather_by_location',
#         args={'location': 'Boston'}
#     ),
#     types.Part.from_function_call(
#         name='get_weather_by_location',
#         args={'location': 'New York'}
#     )
#     ]
# )

```

----------------------------------------

TITLE: genai.types Delete Configuration and Response Classes
DESCRIPTION: References to various dictionary-based configuration and response types for delete operations within genai.types.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_126

LANGUAGE: APIDOC
CODE:
```
genai.types.DeleteBatchJobConfigDict
  - Description: (Details not provided in input)

genai.types.DeleteCachedContentConfigDict
  - Description: (Details not provided in input)

genai.types.DeleteCachedContentResponseDict
  - Description: (Details not provided in input)

genai.types.DeleteFileConfigDict
  - Description: (Details not provided in input)

genai.types.DeleteFileResponseDict
  - Description: (Details not provided in input)

genai.types.DeleteModelConfigDict
  - Description: (Details not provided in input)

genai.types.DeleteModelResponseDict
  - Description: (Details not provided in input)

genai.types.DeleteResourceJobDict
  - Description: (Details not provided in input)
```

----------------------------------------

TITLE: Token Information Types
DESCRIPTION: Provides details about tokens, including their role in a conversation and their numerical IDs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_394

LANGUAGE: APIDOC
CODE:
```
TokensInfo:
  role: str
    The role associated with the tokens (e.g., 'user', 'model').
  token_ids: list[int]
    A list of token IDs.
  tokens: list[str]
    A list of the token strings.
```

LANGUAGE: APIDOC
CODE:
```
TokensInfoDict:
  role: str
    The role associated with the tokens (e.g., 'user', 'model').
  token_ids: list[int]
    A list of token IDs.
  tokens: list[str]
    A list of the token strings.
```

----------------------------------------

TITLE: GenAI File and Data Attributes
DESCRIPTION: Details attributes related to file operations, data structures, and states within the genai library. Includes properties like expiration times, file names, URIs, and file states.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_141

LANGUAGE: APIDOC
CODE:
```
genai.types.TuningJobDict.experiment
  Description: Experiment details for a tuning job.

genai.types.File.expiration_time
  Description: The expiration time of the file.

genai.types.FileDict.expiration_time
  Description: The expiration time of the file in dictionary format.

genai.types.CachedContent.expire_time
  Description: The expiration time for cached content.

genai.types.CachedContentDict.expire_time
  Description: The expiration time for cached content in dictionary format.

genai.types.CreateAuthTokenConfig.expire_time
  Description: Specifies the expiration time for an authentication token.

genai.types.CreateAuthTokenConfigDict.expire_time
  Description: Specifies the expiration time for an authentication token in dictionary format.

genai.types.CreateCachedContentConfig.expire_time
  Description: Configures the expiration time for creating cached content.

genai.types.CreateCachedContentConfigDict.expire_time
  Description: Configures the expiration time for creating cached content in dictionary format.

genai.types.UpdateCachedContentConfig.expire_time
  Description: Updates the expiration time for cached content.

genai.types.UpdateCachedContentConfigDict.expire_time
  Description: Updates the expiration time for cached content in dictionary format.

genai.types.BatchJobDestination.file_name
  Description: The name of the destination file for a batch job.

genai.types.BatchJobDestinationDict.file_name
  Description: The name of the destination file for a batch job in dictionary format.

genai.types.BatchJobSource.file_name
  Description: The name of the source file for a batch job.

genai.types.BatchJobSourceDict.file_name
  Description: The name of the source file for a batch job in dictionary format.

genai.types.FileData.file_uri
  Description: The Uniform Resource Identifier (URI) of the file data.

genai.types.FileDataDict.file_uri
  Description: The Uniform Resource Identifier (URI) of the file data in dictionary format.

genai.types.ListFilesResponse.files
  Description: A list of file objects.

genai.types.ListFilesResponseDict.files
  Description: A list of file objects in dictionary format.
```

----------------------------------------

TITLE: genai.types.AuthType
DESCRIPTION: Enumerates different authentication types.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_23

LANGUAGE: APIDOC
CODE:
```
genai.types.AuthType:
  Enum for authentication types.
  Members:
    API_KEY_AUTH: Authentication using an API key.
  (Further details on usage and other members are not provided in the source text.)
```

----------------------------------------

TITLE: genai.types.EditImageConfig Attributes
DESCRIPTION: Documentation for attributes of EditImageConfig, including person generation settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_303

LANGUAGE: APIDOC
CODE:
```
EditImageConfig:
  person_generation: dict | None
    Configuration for person generation.
```

LANGUAGE: APIDOC
CODE:
```
EditImageConfigDict:
  person_generation: dict | None
    Configuration for person generation.
```

----------------------------------------

TITLE: Function Calling with Python Functions
DESCRIPTION: Demonstrates how to enable automatic Python function calling by passing Python functions directly to the `tools` parameter in `generate_content`.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_34

LANGUAGE: python
CODE:
```
from google.genai import types

def get_current_weather(location: str) -> str:
    """Returns the current weather.

    Args:
      location: The city and state, e.g. San Francisco, CA
    """
    return 'sunny'


response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents='What is the weather like in Boston?',
    config=types.GenerateContentConfig(
        tools=[get_current_weather],
    ),
)

print(response.text)
```

----------------------------------------

TITLE: LiveMusic Client Message
DESCRIPTION: Defines the structure of a client message for Live Music interactions, encompassing content, generation configuration, and playback controls.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_295

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientMessage:
  client_content: The content provided by the client for music generation.
  music_generation_config: Configuration specific to music generation.
  playback_control: Controls for playback of generated music.
  setup: Setup parameters for the music client.
```

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientMessageDict:
  client_content: The content provided by the client for music generation.
  music_generation_config: Configuration specific to music generation.
  playback_control: Controls for playback of generated music.
  setup: Setup parameters for the music client.
```

----------------------------------------

TITLE: LiveServerToolCall Structures
DESCRIPTION: Represents tool calls made within a live server environment, including function calls and cancellations. These structures define how tool execution is communicated.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_320

LANGUAGE: APIDOC
CODE:
```
LiveServerToolCall:
  function_calls: list[FunctionCall]
    A list of function calls to be executed.

LiveServerToolCallDict:
  function_calls: list[FunctionCallDict]
    A dictionary representation of function calls.
```

LANGUAGE: APIDOC
CODE:
```
LiveServerToolCallCancellation:
  ids: list[str]
    A list of identifiers for tool calls to be cancelled.

LiveServerToolCallCancellationDict:
  ids: list[str]
    A dictionary representation of cancelled tool call identifiers.
```

----------------------------------------

TITLE: GenAI Type Constants: DOCUMENT, DONT_ALLOW
DESCRIPTION: Documentation for specific enumerated values or constants within GenAI types.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_139

LANGUAGE: APIDOC
CODE:
```
genai.types.MediaModality.DOCUMENT
  Description: Represents the DOCUMENT media modality.

genai.types.PersonGeneration.DONT_ALLOW
  Description: Constant indicating that person generation is not allowed.
```

----------------------------------------

TITLE: Install Google Gen AI SDK
DESCRIPTION: Installs the Google Gen AI Python SDK using pip. This is the primary step to begin using the library in your Python projects.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_0

LANGUAGE: shell
CODE:
```
pip install google-genai
```

----------------------------------------

TITLE: genai.types.LiveMusicGenerationConfig Attributes
DESCRIPTION: References to attributes for configuring live music generation, specifically BPM and brightness.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_54

LANGUAGE: APIDOC
CODE:
```
LiveMusicGenerationConfig:
  bpm: Beats per minute for the music generation.
  brightness: Brightness parameter for music generation.
```

----------------------------------------

TITLE: List Tuning Jobs Pager (Synchronous)
DESCRIPTION: Demonstrates using a pager object to iterate through lists of tuning jobs, accessing page size and individual items, and fetching the next page.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_83

LANGUAGE: python
CODE:
```
pager = client.tunings.list(config={'page_size': 10})
print(pager.page_size)
print(pager[0])
pager.next_page()
print(pager[0])
```

----------------------------------------

TITLE: genai.types.Segment Attributes
DESCRIPTION: Documentation for attributes of the Segment type, including part index.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_296

LANGUAGE: APIDOC
CODE:
```
Segment:
  part_index: int | None
    The index of the part within the content.
```

LANGUAGE: APIDOC
CODE:
```
SegmentDict:
  part_index: int | None
    The index of the part within the content.
```

----------------------------------------

TITLE: LiveConnectConfig Options
DESCRIPTION: Configuration parameters for establishing a live connection with the GenAI service. This includes settings for media, generation, and real-time input.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_193

LANGUAGE: APIDOC
CODE:
```
LiveConnectConfig:
  context_window_compression: Configuration for context window compression.
  enable_affective_dialog: Enables or disables affective dialog features.
  generation_config: Settings for controlling response generation.
  http_options: Configuration for HTTP requests.
  input_audio_transcription: Configuration for input audio transcription.
  max_output_tokens: Maximum number of tokens for the output.
  media_resolution: Specifies the resolution for media processing.
  output_audio_transcription: Configuration for output audio transcription.
  proactivity: Settings related to the client's proactivity.
  realtime_input_config: Configuration for real-time input.
  response_modalities: Specifies the allowed modalities for responses.
```

----------------------------------------

TITLE: PartnerModelTuningSpec Members
DESCRIPTION: Details the attributes available on the PartnerModelTuningSpec type, used for specifying parameters for partner model tuning.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_345

LANGUAGE: APIDOC
CODE:
```
PartnerModelTuningSpec:
  hyper_parameters: Dictionary of hyper-parameters for tuning.
  training_dataset_uri: URI pointing to the training dataset.
```

----------------------------------------

TITLE: genai.types.GenerateContentResponsePromptFeedback Attributes
DESCRIPTION: Details attributes for prompt feedback, including block_reason and block_reason_message for safety-related blocking.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_46

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerateContentResponsePromptFeedback.block_reason
  - Description: The reason why the prompt was blocked due to safety.
  - Related: genai.types.GenerateContentResponsePromptFeedbackDict.block_reason
```

LANGUAGE: APIDOC
CODE:
```
genai.types.GenerateContentResponsePromptFeedback.block_reason_message
  - Description: A message explaining the reason for prompt blocking.
  - Related: genai.types.GenerateContentResponsePromptFeedbackDict.block_reason_message
```

----------------------------------------

TITLE: Live Client Content Structure
DESCRIPTION: Represents the content exchanged within a live client session, including turns and completion status.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_187

LANGUAGE: APIDOC
CODE:
```
LiveClientContentDict:
  turn_complete: bool
    Indicates if the current turn is complete.
  turns: list[Turn]
    A list of turns in the conversation.
```

----------------------------------------

TITLE: Operation Configuration Types
DESCRIPTION: Defines types for configuring operations, including HTTP options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_235

LANGUAGE: APIDOC
CODE:
```
GetOperationConfig:
  Represents configuration for getting an operation.
  Attributes:
    http_options: Configuration for HTTP requests.

GetOperationConfigDict:
  Dictionary representation of GetOperationConfig.
  Attributes:
    http_options: Configuration for HTTP requests.
```

----------------------------------------

TITLE: genai.types.DatasetDistribution Attributes
DESCRIPTION: References to attributes of DatasetDistribution types, related to data distribution buckets.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_55

LANGUAGE: APIDOC
CODE:
```
DatasetDistribution:
  buckets: Data distribution buckets.

SupervisedTuningDatasetDistribution:
  buckets: Data distribution buckets for supervised tuning.
```

----------------------------------------

TITLE: genai.types.SupervisedHyperParameters Attributes
DESCRIPTION: Attributes for supervised hyper-parameters, including adapter size.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_13

LANGUAGE: APIDOC
CODE:
```
genai.types.SupervisedHyperParameters:
  Hyper-parameters for supervised learning.
  Attributes:
    adapter_size: Specifies the size of the adapter.
      (Type and constraints not specified in source text.)

genai.types.SupervisedHyperParametersDict:
  Dictionary representation of SupervisedHyperParameters.
  Attributes:
    adapter_size: Specifies the size of the adapter.
      (Type and constraints not specified in source text.)
```

----------------------------------------

TITLE: StyleReferenceImageDict Members
DESCRIPTION: Dictionary representation for style reference using an image.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_319

LANGUAGE: APIDOC
CODE:
```
StyleReferenceImageDict:
  config: StyleReferenceConfigDict
    Configuration for the style reference.
  reference_id: str
    An identifier for the reference image.
  reference_image: ImageDict
    The image data used for style reference.
  reference_type: StyleReferenceType
    The type of reference (e.g., image).
```

----------------------------------------

TITLE: Create Tuning Job
DESCRIPTION: Initiates a model tuning job using the prepared dataset and base model, with configurable parameters like epoch count.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_69

LANGUAGE: python
CODE:
```
from google.genai import types

tuning_job = client.tunings.tune(
    base_model=model,
    training_dataset=training_dataset,
    config=types.CreateTuningJobConfig(
        epoch_count=1, tuned_model_display_name='test_dataset_examples model'
    ),
)
print(tuning_job)
```

----------------------------------------

TITLE: Google Maps Integration
DESCRIPTION: Configuration for Google Maps integration, including authentication settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_145

LANGUAGE: APIDOC
CODE:
```
GoogleMaps:
  auth_config: dict
    Description: Authentication configuration for Google Maps.

GoogleMapsDict:
  auth_config: dict
    Description: Authentication configuration for Google Maps.
```

----------------------------------------

TITLE: genai.types.PersonGeneration
DESCRIPTION: Defines generation modes for person-related content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_18

LANGUAGE: APIDOC
CODE:
```
genai.types.PersonGeneration:
  Enum for person generation settings.
  Members:
    ALLOW_ADULT: Allows generation of adult content.
    ALLOW_ALL: Allows all types of content generation.
  (Further details on usage are not provided in the source text.)
```

----------------------------------------

TITLE: GenAI Asynchronous Client and Session Classes
DESCRIPTION: References to various asynchronous client and session related classes within the genai library, including AsyncClient, AsyncSession, AsyncBatches, AsyncCaches, AsyncChat, AsyncFiles, AsyncLive, AsyncModels, AsyncTokens, and AsyncTunings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_29

LANGUAGE: APIDOC
CODE:
```
AsyncBatches (class in genai.batches): Manages asynchronous batch operations.

AsyncCaches (class in genai.caches): Manages asynchronous caching operations.

AsyncChat (class in genai.chats): Handles asynchronous chat interactions.

AsyncChats (class in genai.chats): Manages multiple asynchronous chat sessions.

AsyncClient (class in genai.client): The main asynchronous client for interacting with GenAI services.

AsyncFiles (class in genai.files): Manages asynchronous file operations.

AsyncLive (class in genai.live): Provides asynchronous access to live streaming features.

AsyncModels (class in genai.models): Manages asynchronous model operations.

AsyncSession (class in genai.live): Represents an asynchronous session for live interactions.

AsyncTokens (class in genai.tokens): Handles asynchronous tokenization operations.

AsyncTunings (class in genai.tunings): Manages asynchronous model tuning operations.
```

----------------------------------------

TITLE: LiveMusicSetConfigParameters Structure
DESCRIPTION: Defines parameters for configuring music generation settings in the Live Music feature. It allows specifying generation configurations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_309

LANGUAGE: APIDOC
CODE:
```
LiveMusicSetConfigParameters:
  music_generation_config: dict | None
    A dictionary containing specific parameters for music generation.
```

----------------------------------------

TITLE: List Tuning Jobs Pager (Asynchronous)
DESCRIPTION: Demonstrates using an asynchronous pager object to iterate through lists of tuning jobs, accessing page size and individual items, and fetching the next page.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_85

LANGUAGE: python
CODE:
```
async_pager = await client.aio.tunings.list(config={'page_size': 10})
print(async_pager.page_size)
print(async_pager[0])
await async_pager.next_page()
print(async_pager[0])
```

----------------------------------------

TITLE: genai.types.TestTableFileDict
DESCRIPTION: Represents a file containing test table data.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_350

LANGUAGE: APIDOC
CODE:
```
genai.types.TestTableFileDict (class in genai.types)
  - Represents a file containing test table data.
```

----------------------------------------

TITLE: GenAI Schema and Score Attributes
DESCRIPTION: Details on schema definitions and score attributes within the genai library, including dictionary representations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_318

LANGUAGE: APIDOC
CODE:
```
genai.types.SchemaDict (class in genai.types)
  - Description: A dictionary structure representing a schema.

genai.types.SafetyAttributes.scores
  - Description: A list of scores associated with safety attributes.
  - Related: genai.types.SafetyAttributesDict.scores

genai.types.SafetyAttributesDict.scores
  - Description: Dictionary representation of safety scores.
```

----------------------------------------

TITLE: TuningJob Attributes
DESCRIPTION: Details the attributes for TuningJob, which represents a model tuning job and its configuration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_407

LANGUAGE: APIDOC
CODE:
```
TuningJob:
  base_model: The base model used for tuning.
  create_time: Timestamp when the tuning job was created.
  description: A description of the tuning job.
  distillation_spec: Specification for distillation tuning.
  encryption_spec: Specification for encryption.
  end_time: Timestamp when the tuning job finished.
  error: Information about any errors encountered during the job.
  experiment: The experiment associated with the tuning job.
  labels: Labels applied to the tuning job.
  name: The name of the tuning job.
  partner_model_tuning_spec: Specification for partner model tuning.
  pipeline_job: The pipeline job associated with the tuning job.
  satisfies_pzi: Indicates if the job satisfies Private Service Connect (PZI).
  satisfies_pzs: Indicates if the job satisfies Private Service Connect (PZS).
  service_account: The service account used for the tuning job.
  start_time: Timestamp when the tuning job started.
  state: The current state of the tuning job.
  supervised_tuning_spec: Specification for supervised tuning.
  tuned_model: The name of the tuned model.
  tuned_model_display_name: The display name of the tuned model.
  tuning_data_stats: Statistics related to the tuning data.
  update_time: Timestamp when the tuning job was last updated.
  has_ended: Boolean indicating if the tuning job has ended.
  has_succeeded: Boolean indicating if the tuning job has succeeded.

TuningJobDict:
  base_model: The base model used for tuning (dictionary representation).
  create_time: Timestamp when the tuning job was created (dictionary representation).
  description: A description of the tuning job (dictionary representation).
  distillation_spec: Specification for distillation tuning (dictionary representation).
  encryption_spec: Specification for encryption (dictionary representation).
  end_time: Timestamp when the tuning job finished (dictionary representation).
  error: Information about any errors encountered during the job (dictionary representation).
  experiment: The experiment associated with the tuning job (dictionary representation).
  labels: Labels applied to the tuning job (dictionary representation).
  name: The name of the tuning job (dictionary representation).
  partner_model_tuning_spec: Specification for partner model tuning (dictionary representation).
  pipeline_job: The pipeline job associated with the tuning job (dictionary representation).
  satisfies_pzi: Indicates if the job satisfies Private Service Connect (PZI) (dictionary representation).
  satisfies_pzs: Indicates if the job satisfies Private Service Connect (PZS) (dictionary representation).
  service_account: The service account used for the tuning job (dictionary representation).
  start_time: Timestamp when the tuning job started (dictionary representation).
  state: The current state of the tuning job (dictionary representation).
  supervised_tuning_spec: Specification for supervised tuning (dictionary representation).
  tuned_model: The name of the tuned model (dictionary representation).
  tuned_model_display_name: The display name of the tuned model (dictionary representation).
  tuning_data_stats: Statistics related to the tuning data (dictionary representation).
  update_time: Timestamp when the tuning job was last updated (dictionary representation).
  has_ended: Boolean indicating if the tuning job has ended (dictionary representation).
  has_succeeded: Boolean indicating if the tuning job has succeeded (dictionary representation).
```

----------------------------------------

TITLE: GenerationConfigDict Parameters
DESCRIPTION: Defines the core configuration options for content generation. This includes parameters controlling creativity, output length, stopping conditions, and response formatting.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_135

LANGUAGE: APIDOC
CODE:
```
GenerationConfigDict:
  audio_timestamp: Optional[bool]
    Whether to include audio timestamps in the output.
  candidate_count: Optional[int]
    The number of candidates to generate.
  enable_affective_dialog: Optional[bool]
    Enables affective dialog features.
  frequency_penalty: Optional[float]
    Controls the likelihood of repeating tokens based on their frequency.
  logprobs: Optional[bool]
    Whether to include log probabilities in the output.
  max_output_tokens: Optional[int]
    The maximum number of tokens to generate in the output.
  media_resolution: Optional[str]
    Specifies the desired resolution for media outputs.
  model_selection_config: Optional[dict]
    Configuration for model selection logic.
  presence_penalty: Optional[float]
    Controls the likelihood of repeating tokens based on their presence.
  response_json_schema: Optional[dict]
    A JSON schema to validate the response against.
  response_logprobs: Optional[bool]
    Whether to include log probabilities for the response.
  response_mime_type: Optional[str]
    The MIME type for the response.
  response_modalities: Optional[list[str]]
    The modalities to include in the response.
  response_schema: Optional[dict]
    A schema to structure the response.
  routing_config: Optional[dict]
    Configuration for routing requests to different models.
  seed: Optional[int]
    A seed for reproducible generation.
  speech_config: Optional[dict]
    Configuration for speech-related outputs.
  stop_sequences: Optional[list[str]]
    Sequences that will cause the generation to stop.
  temperature: Optional[float]
    Controls the randomness of the output (0.0 to 1.0).
  thinking_config: Optional[dict]
    Configuration for the model's thinking process.
  top_k: Optional[int]
    Filters tokens by their top-k probability.
  top_p: Optional[float]
    Filters tokens by their cumulative probability (nucleus sampling).
```

----------------------------------------

TITLE: Audio Transcription Configuration
DESCRIPTION: Configuration options for audio transcription tasks.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_15

LANGUAGE: APIDOC
CODE:
```
AudioTranscriptionConfig:
  (No specific fields detailed in input)

AudioTranscriptionConfigDict:
  (No specific fields detailed in input)
```

----------------------------------------

TITLE: genai.types.SubjectReferenceConfigDict and SubjectReferenceImageDict Classes
DESCRIPTION: References to dictionary representations for subject configuration types in genai.types.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_334

LANGUAGE: APIDOC
CODE:
```
genai.types.SubjectReferenceConfigDict (class in genai.types)
  Description: Dictionary representation for SubjectReferenceConfig.

genai.types.SubjectReferenceImageDict (class in genai.types)
  Description: Dictionary representation for SubjectReferenceImage.
```

----------------------------------------

TITLE: Google Search Retrieval Configuration
DESCRIPTION: Configuration for Google Search retrieval, including dynamic retrieval settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_148

LANGUAGE: APIDOC
CODE:
```
GoogleSearchRetrieval:
  dynamic_retrieval_config: dict
    Description: Configuration for dynamic retrieval.

GoogleSearchRetrievalDict:
  dynamic_retrieval_config: dict
    Description: Configuration for dynamic retrieval.
```

----------------------------------------

TITLE: genai.types.File Attributes
DESCRIPTION: Details the attributes available for the File type, representing metadata about an uploaded file.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_102

LANGUAGE: APIDOC
CODE:
```
File:
  expiration_time: Timestamp when the file expires.
  mime_type: The MIME type of the file (e.g., 'image/jpeg').
  name: The name of the file.
  sha256_hash: SHA256 hash of the file content.
  size_bytes: The size of the file in bytes.
  source: The source of the file (e.g., UPLOADED, GENERATED).
  state: The current state of the file (e.g., ACTIVE, PROCESSING).
  update_time: Timestamp when the file was last updated.
  uri: The URI of the file.
  video_metadata: Metadata specific to video files.
```

----------------------------------------

TITLE: genai.types.InlinedRequest and InlinedRequestDict Members
DESCRIPTION: Represents an inlined request structure for multimodal models. It contains configuration, content parts, and the model identifier.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_167

LANGUAGE: APIDOC
CODE:
```
InlinedRequest:
  config: Model configuration settings.
  contents: A list of content parts for the request.
  model: The identifier of the model to use.

InlinedRequestDict:
  config: Model configuration settings.
  contents: A list of content parts for the request.
  model: The identifier of the model to use.
```

----------------------------------------

TITLE: Transcription and TranscriptionDict
DESCRIPTION: Structures for holding transcription results, including text and completion status.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_342

LANGUAGE: APIDOC
CODE:
```
Transcription:
  finished: Indicates if the transcription process is finished.
  text: The transcribed text.
```

LANGUAGE: APIDOC
CODE:
```
TranscriptionDict:
  finished: Indicates if the transcription process is finished.
  text: The transcribed text.
```

----------------------------------------

TITLE: GenAI File State and Scale Enums
DESCRIPTION: Defines enumerations for file states and scale values used within the GenAI library.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_145

LANGUAGE: APIDOC
CODE:
```
genai.types.FileState.FAILED
  Description: Indicates that the file operation has failed.

genai.types.FileState
  Description: Enum representing the state of a file.
    - FILE_STATE_UNSPECIFIED: Default value. The file state is not specified.
    - PROCESSING: The file is currently being processed.
    - ACTIVE: The file is active and ready for use.
    - FAILED: The file operation has failed.

genai.types.Scale.F_MAJOR_D_MINOR
  Description: Represents a specific scale value (F Major D Minor).
```

----------------------------------------

TITLE: HTTP Basic Authentication
DESCRIPTION: Configuration for HTTP Basic Authentication, typically involving a username and password or token.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_18

LANGUAGE: APIDOC
CODE:
```
AuthConfigHttpBasicAuthConfig:
  credential_secret: str
    The secret credential, such as a password or token.

AuthConfigHttpBasicAuthConfigDict:
  credential_secret: str
    The secret credential, such as a password or token.
```

----------------------------------------

TITLE: Create Gen AI Client from Env Vars (Python)
DESCRIPTION: Creates a client instance using environment variables for configuration. The SDK automatically detects and uses the appropriate settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_6

LANGUAGE: python
CODE:
```
client = genai.Client()
```

----------------------------------------

TITLE: Ranking and Retrieval Configuration
DESCRIPTION: Details attributes related to language model ranking and retrieval configuration, specifically the `llm_ranker` attribute used for ranking retrieved documents.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_240

LANGUAGE: APIDOC
CODE:
```
RagRetrievalConfigRanking.llm_ranker:
  Attribute for LLM-based ranking in retrieval configuration.

RagRetrievalConfigRankingDict.llm_ranker:
  Attribute for LLM-based ranking in retrieval configuration (dictionary format).
```

----------------------------------------

TITLE: GenerateContentConfigDict Attributes
DESCRIPTION: Details the configurable parameters for generating content, including settings for logging, token limits, response formatting, and safety controls. These attributes allow fine-tuning model behavior and output.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_119

LANGUAGE: APIDOC
CODE:
```
GenerateContentConfigDict:
  Attributes:
    labels: dict[str, str] | None
      Optional labels for the request.
    logprobs: bool | None
      Whether to include log probabilities in the response.
    max_output_tokens: int | None
      The maximum number of tokens to generate.
    media_resolution: Literal['medium', 'high'] | None
      The desired resolution for media content.
    model_selection_config: ModelSelectionConfigDict | None
      Configuration for model selection.
    presence_penalty: float | None
      Penalty for repeating tokens.
    response_json_schema: str | None
      A JSON schema to constrain the response format.
    response_logprobs: bool | None
      Whether to include log probabilities for the response.
    response_mime_type: str | None
      The MIME type for the response.
    response_modalities: list[str] | None
      The modalities expected in the response.
    response_schema: str | None
      A schema to constrain the response.
    routing_config: RoutingConfigDict | None
      Configuration for routing requests.
    safety_settings: list[SafetySettingDict] | None
      Settings to control safety filters.
    seed: int | None
      A seed for reproducible generation.
    speech_config: SpeechConfigDict | None
      Configuration for speech synthesis.
    stop_sequences: list[str] | None
      Sequences that will stop generation.
    system_instruction: str | None
      An instruction to guide the model's behavior.
    temperature: float | None
      Controls randomness; higher values mean more random.
    thinking_config: ThinkingConfigDict | None
      Configuration for the model's thinking process.
    tool_config: ToolConfigDict | None
      Configuration for tools the model can use.
    tools: list[ToolDict] | None
      A list of tools the model can access.
    top_k: int | None
      Filters tokens with probability mass less than the result of $\text{topk}$.
    top_p: float | None
      Filters tokens with cumulative probability mass less than $\text{top_p}$.
```

----------------------------------------

TITLE: Image Type and Methods
DESCRIPTION: Defines the Image object for handling image data, including methods for loading, saving, and displaying images.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_252

LANGUAGE: APIDOC
CODE:
```
Image:
  gcs_uri: Google Cloud Storage URI of the image (string).
  image_bytes: Raw bytes of the image (bytes).
  mime_type: MIME type of the image (string).
  from_file(path: str, mime_type: str = None):
    Creates an Image object from a local file path.
    Parameters:
      path: Path to the image file.
      mime_type: Optional MIME type of the image.
    Returns: An Image object.
  model_post_init():
    Internal method for post-initialization of the Image model.
  save(path: str, mime_type: str = None):
    Saves the image to a local file path.
    Parameters:
      path: Path to save the image file.
      mime_type: Optional MIME type for saving.
  show():
    Displays the image (behavior depends on the environment).
```

----------------------------------------

TITLE: Function Calling with Python Functions
DESCRIPTION: Illustrates how to enable function calling by passing Python functions directly to the `generate_content` method's configuration. The SDK automatically handles calling the function based on the model's response.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_23

LANGUAGE: python
CODE:
```
from google.genai import types

def get_current_weather(location: str) -> str:
    """Returns the current weather.

    Args:
      location: The city and state, e.g. San Francisco, CA
    """
    return 'sunny'

response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents='What is the weather like in Boston?',
    config=types.GenerateContentConfig(
        tools=[get_current_weather],
    ),
)

print(response.text)
```

----------------------------------------

TITLE: LiveClientMessage Attributes
DESCRIPTION: Defines the structure of a message sent or received by the live client, including content, input, setup, and tool responses.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_280

LANGUAGE: APIDOC
CODE:
```
LiveClientMessage:
  client_content: The content provided by the client.
  realtime_input: Real-time input data from the client.
  setup: Setup configuration for the client session.
  tool_response: Response from a tool executed by the client.
```

----------------------------------------

TITLE: Grounding Chunk Types
DESCRIPTION: Defines types for grounding chunks, including retrieved context and web content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_241

LANGUAGE: APIDOC
CODE:
```
GroundingChunk:
  Represents a chunk used for grounding.
  Attributes:
    retrieved_context: Context retrieved from a source.
    web: Information related to web content.

GroundingChunkDict:
  Dictionary representation of GroundingChunk.
  Attributes:
    retrieved_context: Context retrieved from a source.
    web: Information related to web content.

GroundingChunkRetrievedContext:
  Represents retrieved context for grounding.
  Attributes:
    rag_chunk: The RAG chunk.
    text: The text content of the chunk.
    title: The title of the chunk.
    uri: The URI of the chunk.

GroundingChunkRetrievedContextDict:
  Dictionary representation of GroundingChunkRetrievedContext.
  Attributes:
    rag_chunk: The RAG chunk.
    text: The text content of the chunk.
    title: The title of the chunk.
    uri: The URI of the chunk.

GroundingChunkWeb:
  Represents web content information for grounding.
```

----------------------------------------

TITLE: AuthToken Attributes
DESCRIPTION: Details the attributes available for AuthToken, representing an authentication token.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_23

LANGUAGE: APIDOC
CODE:
```
AuthToken:
  name: str
    Description: The name or identifier of the authentication token.
```

----------------------------------------

TITLE: TokensInfo and TokensInfoDict
DESCRIPTION: Defines structures for holding token information, including role and token IDs.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_336

LANGUAGE: APIDOC
CODE:
```
TokensInfo:
  role: The role associated with the tokens.
  token_ids: A list of token identifiers.
  tokens: The token values or representations.
```

LANGUAGE: APIDOC
CODE:
```
TokensInfoDict:
  role: The role associated with the tokens.
  token_ids: A list of token identifiers.
  tokens: The token values or representations.
```

----------------------------------------

TITLE: Generate Content with Pydantic Schema
DESCRIPTION: Demonstrates generating content and specifying a Pydantic model as the response schema. The library will attempt to parse the JSON response into the defined Pydantic model.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_41

LANGUAGE: python
CODE:
```
from pydantic import BaseModel
from google.genai import types


class CountryInfo(BaseModel):
    name: str
    population: int
    capital: str
    continent: str
    gdp: int
    official_language: str
    total_area_sq_mi: int


response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents='Give me information for the United States.',
    config=types.GenerateContentConfig(
        response_mime_type='application/json',
        response_schema=CountryInfo,
    ),
)
print(response.text)
```

----------------------------------------

TITLE: genai.types.Model Structure
DESCRIPTION: Represents a generative AI model, including its name, version, limits, and capabilities.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_332

LANGUAGE: APIDOC
CODE:
```
genai.types.Model:
  Represents a generative AI model.
  Fields:
    - name: The unique identifier for the model.
    - version: The version of the model.
    - display_name: A human-readable name for the model.
    - description: A detailed description of the model.
    - input_token_limit: Maximum number of tokens the model can accept as input.
    - output_token_limit: Maximum number of tokens the model can generate as output.
    - endpoints: List of available endpoints for the model.
    - checkpoints: Information about model checkpoints.
    - default_checkpoint_id: The ID of the default checkpoint.
    - labels: Key-value pairs for model categorization.
    - supported_actions: List of actions the model supports.
    - tuned_model_info: Information about fine-tuned versions of the model.
```

----------------------------------------

TITLE: genai.types.HarmBlockMethod Enum
DESCRIPTION: Documentation for the HarmBlockMethod enumeration in genai.types. This enum defines methods for blocking harmful content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_179

LANGUAGE: APIDOC
CODE:
```
HarmBlockMethod (class in genai.types)
  Defines methods for blocking harmful content.

  Members:
    HARM_BLOCK_METHOD_UNSPECIFIED: Default, unspecified method.
    BLOCK_NONE: No blocking is applied.
    BLOCK_ONLY_HIGH: Only block content classified as high severity.
    BLOCK_MEDIUM_AND_ABOVE: Block content classified as medium or high severity.
    BLOCK_LOW_AND_ABOVE: Block content classified as low, medium, or high severity.
```

----------------------------------------

TITLE: LiveClientToolResponse Structure
DESCRIPTION: Defines the structure for tool responses from the GenAI client, including function call results. This is used to communicate the outcome of tool executions.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_192

LANGUAGE: APIDOC
CODE:
```
LiveClientToolResponse:
  function_responses: A list of responses from executed functions.

LiveClientToolResponseDict:
  function_responses: A list of responses from executed functions.
```

----------------------------------------

TITLE: genai.batches.AsyncBatches and Batches delete() method
DESCRIPTION: Documentation for the 'delete()' method in genai.batches.AsyncBatches and genai.batches.Batches.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_122

LANGUAGE: APIDOC
CODE:
```
genai.batches.AsyncBatches.delete()
  - Description: (Details not provided in input)

genai.batches.Batches.delete()
  - Description: (Details not provided in input)
```

----------------------------------------

TITLE: Operation Configuration
DESCRIPTION: Configuration for operation-related tasks, including HTTP options for making requests.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_143

LANGUAGE: APIDOC
CODE:
```
GetOperationConfig:
  http_options: dict
    Description: Options for the HTTP request.

GetOperationConfigDict:
  http_options: dict
    Description: Options for the HTTP request.
```

----------------------------------------

TITLE: ContentEmbeddingStatistics
DESCRIPTION: Details the ContentEmbeddingStatistics structure, providing statistics for content embeddings, specifically token count.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_50

LANGUAGE: APIDOC
CODE:
```
ContentEmbeddingStatistics:
  token_count: int
    The number of tokens used for the embedding.
```

----------------------------------------

TITLE: GenAI Scaling and Scheduling Attributes
DESCRIPTION: Details on attributes related to scaling configurations and scheduling parameters within the genai library, including specific enum values and configuration options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_316

LANGUAGE: APIDOC
CODE:
```
genai.types.TuningJob.satisfies_pzi
  - Description: Boolean flag indicating if the tuning job satisfies PZI requirements.
  - Related: genai.types.TuningJobDict.satisfies_pzi

genai.types.TuningJobDict.satisfies_pzi
  - Description: Dictionary representation of the PZI satisfaction flag for a tuning job.

genai.types.TuningJob.satisfies_pzs
  - Description: Boolean flag indicating if the tuning job satisfies PZS requirements.
  - Related: genai.types.TuningJobDict.satisfies_pzs

genai.types.TuningJobDict.satisfies_pzs
  - Description: Dictionary representation of the PZS satisfaction flag for a tuning job.

genai.types.Scale (class in genai.types)
  - Description: Represents scaling configurations or options.

genai.types.LiveMusicGenerationConfig.scale
  - Description: Specifies the scale for live music generation.
  - Related: genai.types.LiveMusicGenerationConfigDict.scale

genai.types.LiveMusicGenerationConfigDict.scale
  - Description: Dictionary representation of the scale for live music generation.

genai.types.Scale.SCALE_UNSPECIFIED
  - Description: Unspecified scale value for the Scale enum/class.

genai.types.FunctionResponse.scheduling
  - Description: Information about the scheduling of a function response.
  - Related: genai.types.FunctionResponseDict.scheduling

genai.types.FunctionResponseDict.scheduling
  - Description: Dictionary representation of scheduling information for a function response.

genai.types.FunctionResponseScheduling.SCHEDULING_UNSPECIFIED
  - Description: Unspecified scheduling value for the FunctionResponseScheduling enum/class.
```

----------------------------------------

TITLE: Generate Content with Typed Configuration
DESCRIPTION: Shows how to use Pydantic types for `generate_content` parameters and provides a comprehensive set of configuration options including `temperature`, `top_p`, `top_k`, `seed`, `stop_sequences`, and `safety_settings`.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_23

LANGUAGE: Python
CODE:
```
from google.genai import types

response = client.models.generate_content(
    model='gemini-2.0-flash-001',
    contents=types.Part.from_text(text='Why is the sky blue?'),
    config=types.GenerateContentConfig(
        temperature=0,
        top_p=0.95,
        top_k=20,
        candidate_count=1,
        seed=5,
        max_output_tokens=100,
        stop_sequences=['STOP!'],
        presence_penalty=0.0,
        frequency_penalty=0.0,
    ),
)

print(response.text)
```

----------------------------------------

TITLE: genai.types.SupervisedTuningDataStatsDict
DESCRIPTION: Contains statistics related to supervised tuning data.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_341

LANGUAGE: APIDOC
CODE:
```
genai.types.SupervisedTuningDataStatsDict (class in genai.types)
  - Contains statistics related to supervised tuning data.
```

----------------------------------------

TITLE: genai.types.FileState Enumeration
DESCRIPTION: Enumeration for the state of a file.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_106

LANGUAGE: APIDOC
CODE:
```
FileState:
  ACTIVE: The file is ready for use.
  FAILED: The file processing failed.
  PROCESSING: The file is currently being processed.
  STATE_UNSPECIFIED: The state of the file is not specified.
```

----------------------------------------

TITLE: genai.types.InlinedRequestDict
DESCRIPTION: Represents a dictionary structure for inline request data within batch jobs. It defines the schema for individual requests provided directly.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_208

LANGUAGE: APIDOC
CODE:
```
genai.types.InlinedRequestDict (class)
  Description: A dictionary type for defining inline request parameters in batch operations.
```

----------------------------------------

TITLE: genai.types BatchJob and CreateBatchJobConfig Attributes
DESCRIPTION: Documentation for the 'dest' attribute in genai.types.BatchJob, genai.types.BatchJobDict, genai.types.CreateBatchJobConfig, and genai.types.CreateBatchJobConfigDict.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_130

LANGUAGE: APIDOC
CODE:
```
genai.types.BatchJob.dest
  - Description: (Details not provided in input)

genai.types.BatchJobDict.dest
  - Description: (Details not provided in input)

genai.types.CreateBatchJobConfig.dest
  - Description: (Details not provided in input)

genai.types.CreateBatchJobConfigDict.dest
  - Description: (Details not provided in input)
```

----------------------------------------

TITLE: genai.types.Model.supported_actions
DESCRIPTION: Attribute indicating the actions supported by a model.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_343

LANGUAGE: APIDOC
CODE:
```
genai.types.Model.supported_actions (attribute in genai.types.Model)
  - Indicates the actions supported by a model.

genai.types.ModelDict.supported_actions (attribute in genai.types.ModelDict)
  - Indicates the actions supported by a model.
```

----------------------------------------

TITLE: genai.types.FunctionCallingConfig
DESCRIPTION: Configuration for function calling, including allowed function names and mode.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_19

LANGUAGE: APIDOC
CODE:
```
genai.types.FunctionCallingConfig:
  Configuration for enabling and controlling function calling.
  Attributes:
    allowed_function_names: A list of function names that are permitted to be called.
      (Type and constraints not specified in source text.)
    mode: The mode for function calling.
      (Type and constraints not specified in source text.)

genai.types.FunctionCallingConfigDict:
  Dictionary representation of FunctionCallingConfig.
  Attributes:
    allowed_function_names: A list of function names that are permitted to be called.
      (Type and constraints not specified in source text.)
    mode: The mode for function calling.
      (Type and constraints not specified in source text.)
```

----------------------------------------

TITLE: Function Call and Response Identifiers
DESCRIPTION: Attributes related to identifying function calls and responses, including unique IDs and token information.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_193

LANGUAGE: APIDOC
CODE:
```
genai.types.FunctionCall.id
  Description: The unique identifier for a function call.
  Type: str

genai.types.FunctionCallDict.id
  Description: Dictionary representation of the function call ID.
  Type: str

genai.types.FunctionResponse.id
  Description: The unique identifier for a function response.
  Type: str

genai.types.FunctionResponseDict.id
  Description: Dictionary representation of the function response ID.
  Type: str
```

----------------------------------------

TITLE: GenAI File Attributes
DESCRIPTION: Details the attributes of the File type, which represents uploaded or managed files, including creation time, display name, download URI, and error information.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_101

LANGUAGE: APIDOC
CODE:
```
File:
  create_time: datetime
    The timestamp when the file was created.
  display_name: string
    A user-friendly name for the file.
  download_uri: string
    The URI to download the file.
  error: object
    Information about any errors encountered with the file.
```

----------------------------------------

TITLE: Citation and CitationDict Types
DESCRIPTION: Defines the structure for citation information, including title and URI, and its dictionary representation.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_105

LANGUAGE: APIDOC
CODE:
```
Citation:
  title: str
  uri: str

CitationDict:
  end_index: int
  license: str
  publication_date: str
  start_index: int
  title: str
  uri: str
```

----------------------------------------

TITLE: Live Music Client Message (Class/Dict)
DESCRIPTION: Represents a message from the client for Live Music generation, containing content and generation configuration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_198

LANGUAGE: APIDOC
CODE:
```
LiveMusicClientMessage / LiveMusicClientMessageDict:
  A message object for Live Music client interactions.

  Attributes:
    client_content (Optional[LiveMusicClientContent]): The content provided by the client.
    music_generation_config (Optional[MusicGenerationConfig]): Configuration specific to music generation.
```

----------------------------------------

TITLE: List Base Models (Asynchronous)
DESCRIPTION: Demonstrates listing available base models using the asynchronous client. It utilizes `async for` loops and awaits asynchronous pager operations, including setting `page_size` and fetching the next page.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_21

LANGUAGE: python
CODE:
```
async for job in await client.aio.models.list():
    print(job)

async_pager = await client.aio.models.list(config={'page_size': 10})
print(async_pager.page_size)
print(async_pager[0])
await async_pager.next_page()
print(async_pager[0])
```

----------------------------------------

TITLE: Generate Content with Text
DESCRIPTION: Demonstrates how to generate content using a text prompt with the client.models.generate_content method. It specifies the model and the text content, then prints the response text.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_12

LANGUAGE: python
CODE:
```
response = client.models.generate_content(
    model='gemini-2.0-flash-001', contents='Why is the sky blue?'
)
print(response.text)
```

----------------------------------------

TITLE: Google Search Configuration Types
DESCRIPTION: Defines types for Google Search integration, including time range filters and dynamic retrieval.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_239

LANGUAGE: APIDOC
CODE:
```
GoogleSearch:
  Represents Google Search configuration.
  Attributes:
    time_range_filter: Filter for the time range of search results.

GoogleSearchDict:
  Dictionary representation of GoogleSearch.
  Attributes:
    time_range_filter: Filter for the time range of search results.

GoogleSearchRetrieval:
  Represents configuration for Google Search retrieval.
  Attributes:
    dynamic_retrieval_config: Configuration for dynamic retrieval.

GoogleSearchRetrievalDict:
  Dictionary representation of GoogleSearchRetrieval.
  Attributes:
    dynamic_retrieval_config: Configuration for dynamic retrieval.
```

----------------------------------------

TITLE: ToolComputerUse and ToolComputerUseDict
DESCRIPTION: Types for configuring the computer use tool, including environment settings.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_339

LANGUAGE: APIDOC
CODE:
```
ToolComputerUse:
  environment: Specifies the execution environment for computer use.
```

LANGUAGE: APIDOC
CODE:
```
ToolComputerUseDict:
  environment: Specifies the execution environment for computer use.
```

----------------------------------------

TITLE: ToolConfig and ToolConfigDict Types
DESCRIPTION: Specifies configuration options for tools, including function calling and retrieval mechanisms. These types allow customization of tool behavior.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_397

LANGUAGE: APIDOC
CODE:
```
Type: ToolConfig
Attributes:
  - function_calling_config: Configuration for function calling.
  - retrieval_config: Configuration for retrieval capabilities.
```

LANGUAGE: APIDOC
CODE:
```
Type: ToolConfigDict
Attributes:
  - function_calling_config: Configuration for function calling.
  - retrieval_config: Configuration for retrieval capabilities.
```

----------------------------------------

TITLE: LiveMusicServerContent Types
DESCRIPTION: Represents content received from the live music server, specifically audio chunks. Includes both structured data and dictionary representations.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_211

LANGUAGE: APIDOC
CODE:
```
LiveMusicServerContent:
  Represents server-sent content, primarily audio chunks.
  Attributes:
    - audio_chunks: List of audio data chunks.

LiveMusicServerContentDict:
  Dictionary representation of LiveMusicServerContent.
```

----------------------------------------

TITLE: TuningJob Attributes
DESCRIPTION: Details the attributes available for the TuningJob type, providing information on its state, tuning specifications, and model details.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_345

LANGUAGE: APIDOC
CODE:
```
TuningJob:
  state: The current state of the tuning job.
  supervised_tuning_spec: Configuration for supervised tuning.
  tuned_model: The name of the tuned model.
  tuned_model_display_name: A display name for the tuned model.
  tuning_data_stats: Statistics related to the tuning data.
  update_time: The timestamp when the tuning job was last updated.
  has_ended: Boolean indicating if the tuning job has completed.
  has_succeeded: Boolean indicating if the tuning job completed successfully.
```

----------------------------------------

TITLE: Paginate Tuned Models (Asynchronous)
DESCRIPTION: Shows asynchronous iteration over a list of tuned models, including accessing elements and fetching subsequent pages.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_76

LANGUAGE: python
CODE:
```
async_pager = await client.aio.models.list(config={'page_size': 10, 'query_base': False})
print(async_pager.page_size)
print(async_pager[0])
await async_pager.next_page()
print(async_pager[0])
```

----------------------------------------

TITLE: GenAI Live Session Receive Method
DESCRIPTION: Documentation for the `receive` method of the `AsyncSession` class in the genai.live module. This method is used to asynchronously retrieve the next message from a live session.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_313

LANGUAGE: APIDOC
CODE:
```
genai.live.AsyncSession.receive()
  Asynchronously receives the next message from the session.
  This method is part of the asynchronous streaming API for real-time interactions.
  It returns a message object when data is available.
  
  Returns:
    A message object representing the received data.

```

----------------------------------------

TITLE: LiveClientMessageDict Attributes
DESCRIPTION: Represents the dictionary structure for LiveClientMessage, allowing access to various message components like content, input, and setup.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_281

LANGUAGE: APIDOC
CODE:
```
LiveClientMessageDict:
  client_content: The content provided by the client.
  realtime_input: Real-time input data from the client.
  setup: Setup configuration for the client session.
  tool_response: Response from a tool executed by the client.
```

----------------------------------------

TITLE: List Tuned Models (Asynchronous)
DESCRIPTION: Provides an asynchronous way to list tuned models, using async iterators for efficient handling of results.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_75

LANGUAGE: python
CODE:
```
async for job in await client.aio.models.list(config={'page_size': 10, 'query_base': False}):
    print(job)
```

----------------------------------------

TITLE: Synchronous Streaming for Image Content (from Bytes)
DESCRIPTION: Shows how to stream content generation with an image from the local file system. The image is read into bytes and then passed using `Part.from_bytes`.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/_sources/index.rst.txt#_snippet_46

LANGUAGE: python
CODE:
```
from google.genai import types

YOUR_IMAGE_PATH = 'your_image_path'

# Assuming image is read into bytes, e.g.:
# with open(YOUR_IMAGE_PATH, 'rb') as f:
#     image_bytes = f.read()

# response = client.models.generate_content_stream(
#     model='gemini-2.0-flash-001',
#     contents=[
#         'What is this image about?',
#         types.Part.from_bytes(image_bytes, mime_type='image/jpeg'),
#     ],
# )
# for chunk in response:
#     print(chunk.text, end='')

# Placeholder for the actual code to read and use from_bytes
```

----------------------------------------

TITLE: ContentEmbedding and ContentEmbeddingDict
DESCRIPTION: Defines structures for content embeddings, including statistics and embedding values.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_49

LANGUAGE: APIDOC
CODE:
```
ContentEmbedding:
  statistics: ContentEmbeddingStatistics
    Statistics related to the embedding.
  values: list
    The embedding vector values.

ContentEmbeddingDict:
  statistics: ContentEmbeddingStatisticsDict
    Statistics related to the embedding.
  values: list
    The embedding vector values.
```

----------------------------------------

TITLE: genai.live.AsyncLive.connect
DESCRIPTION: Establishes an asynchronous connection to the generative AI live service. This method is part of the AsyncLive class in the genai.live module.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_102

LANGUAGE: APIDOC
CODE:
```
genai.live.AsyncLive.connect()
  Description: Connects to the asynchronous live service.
  Parameters: None explicitly listed in reference, may use internal client configuration.
  Returns: An asynchronous connection object or confirmation.
  Related: genai.live.AsyncLive.disconnect()
```

----------------------------------------

TITLE: Supervised Tuning Specification Type
DESCRIPTION: Defines the structure for specifying validation datasets in supervised tuning configurations. Includes a URI for the dataset.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_390

LANGUAGE: APIDOC
CODE:
```
SupervisedTuningSpecDict:
  validation_dataset_uri: str
    The URI of the validation dataset.
```

----------------------------------------

TITLE: Import Gen AI SDK Modules (Python)
DESCRIPTION: Imports necessary modules from the google.genai library. This includes the main client and type definitions.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_1

LANGUAGE: python
CODE:
```
from google import genai
from google.genai import types
```

----------------------------------------

TITLE: Attributes for Generated Media Lists
DESCRIPTION: References attributes that hold lists of generated images or videos within response objects.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_169

LANGUAGE: APIDOC
CODE:
```
genai.types.EditImageResponse.generated_images: List[GeneratedImageDict]
  - List of generated images from an image editing operation.

genai.types.GenerateImagesResponse.generated_images: List[GeneratedImageDict]
  - List of generated images from an image generation operation.

genai.types.UpscaleImageResponse.generated_images: List[GeneratedImageDict]
  - List of generated images from an image upscaling operation.

genai.types.GenerateVideosResponse.generated_videos: List[GeneratedVideoDict]
  - List of generated videos from a video generation operation.
```

----------------------------------------

TITLE: Python GenAI: CreateAuthTokenConfigDict Fields
DESCRIPTION: Details the fields available for configuring authentication token creation. These fields allow customization of connection constraints, field locking, session expiration, and usage tracking.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_125

LANGUAGE: APIDOC
CODE:
```
CreateAuthTokenConfigDict:
  live_connect_constraints: Specifies constraints for live connections.
  lock_additional_fields: Boolean flag to lock additional fields.
  new_session_expire_time: Duration for which a new session remains valid.
  uses: Defines the intended uses or purposes of the token.
```

----------------------------------------

TITLE: genai.types.ImagePromptLanguage Options
DESCRIPTION: Enumerates the supported language codes for image prompts. These codes are used to specify the language for multimodal model understanding of image content.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_166

LANGUAGE: APIDOC
CODE:
```
ImagePromptLanguage:
  auto: Automatically detect the language.
  en: English.
  es: Spanish.
  hi: Hindi.
  ja: Japanese.
  ko: Korean.
  pt: Portuguese.
  zh: Chinese.
```

----------------------------------------

TITLE: Generate Content (Streaming for Image Content from Local File)
DESCRIPTION: Demonstrates streaming content generation with local image files. It reads the image into bytes and uses `types.Part.from_bytes`.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_44

LANGUAGE: python
CODE:
```
from google.genai import types

YOUR_IMAGE_PATH = 'your_image_path'
YOUR_IMAGE_MIME_TYPE = 'your_image_mime_type'
with open(YOUR_IMAGE_PATH, 'rb') as f:
    image_bytes = f.read()

for chunk in client.models.generate_content_stream(
    model='gemini-2.0-flash-001',
    contents=[
        'What is this image about?',
        types.Part.from_bytes(data=image_bytes, mime_type=YOUR_IMAGE_MIME_TYPE),
    ],
):
    print(chunk.text, end='')
```

----------------------------------------

TITLE: Batch Prediction Job Pager (Sync)
DESCRIPTION: Demonstrates using the synchronous pager for listing batch prediction jobs. Shows how to access page size, items, and fetch the next page.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_86

LANGUAGE: python
CODE:
```
pager = client.batches.list(config=types.ListBatchJobsConfig(page_size=10))
print(pager.page_size)
print(pager[0])
pager.next_page()
print(pager[0])
```

----------------------------------------

TITLE: GenAI Data Structure Classes
DESCRIPTION: References to data structure classes used within the genai library for organizing configuration and data. These include dictionaries for various reference types.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_246

LANGUAGE: APIDOC
CODE:
```
genai.types.MaskReferenceConfigDict
  Description: Dictionary representation for MaskReferenceConfig.

genai.types.MaskReferenceImageDict
  Description: Dictionary representation for MaskReferenceImage.

genai.types.MaskReferenceMode
  Description: Class defining mask reference modes.

genai.types.DatasetDistributionDict
  Description: Dictionary representation for DatasetDistribution.

genai.types.SupervisedTuningDatasetDistributionDict
  Description: Dictionary representation for SupervisedTuningDatasetDistribution.

genai.types.HttpRetryOptionsDict
  Description: Dictionary representation for HttpRetryOptions.

genai.types.JSONSchemaDict
  Description: Dictionary representation for JSONSchema.

genai.types.SchemaDict
  Description: Dictionary representation for Schema.

genai.types.GenerateContentConfigDict
  Description: Dictionary representation for GenerateContentConfig.

genai.types.GenerationConfigDict
  Description: Dictionary representation for GenerationConfig.

genai.types.LiveConnectConfigDict
  Description: Dictionary representation for LiveConnectConfig.

genai.types.VertexAISearchDict
  Description: Dictionary representation for VertexAISearch.
```

----------------------------------------

TITLE: FunctionCallingConfigDict Attributes
DESCRIPTION: A dictionary representation of FunctionCallingConfig for configuration.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_197

LANGUAGE: APIDOC
CODE:
```
FunctionCallingConfigDict:
  allowed_function_names: A list of specific function names that the model is permitted to call.
  mode: The mode for function calling (e.g., ANY, NONE).
```

----------------------------------------

TITLE: Create Client Using Environment Variables
DESCRIPTION: Initializes a client that automatically uses environment variables for configuration. This is useful for seamless integration with cloud environments.
SOURCE: https://github.com/googleapis/python-genai/blob/main/README.md#_snippet_6

LANGUAGE: python
CODE:
```
from google import genai

client = genai.Client()
```

----------------------------------------

TITLE: Data Structures for Generation Configuration Variants
DESCRIPTION: Defines specific dictionary structures for different types of generation configurations, including routing strategies.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_172

LANGUAGE: APIDOC
CODE:
```
GenerationConfigDict: Dict
  - General dictionary for generation configuration.

GenerationConfigRoutingConfigAutoRoutingModeDict: Dict
  - Configuration for automatic routing mode within generation settings.

GenerationConfigRoutingConfigDict: Dict
  - Configuration for routing strategies in generation.

GenerationConfigRoutingConfigManualRoutingModeDict: Dict
  - Configuration for manual routing mode within generation settings.
```

----------------------------------------

TITLE: FileDict Attributes
DESCRIPTION: Details the attributes available for the FileDict type, which represents metadata about uploaded files.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_188

LANGUAGE: APIDOC
CODE:
```
FileDict:
  display_name: The user-friendly name of the file.
  download_uri: A URI to download the file.
  error: Information about any errors encountered during file processing.
  expiration_time: The timestamp when the file will expire.
  mime_type: The MIME type of the file (e.g., 'image/jpeg').
  name: The system-generated name or identifier for the file.
  sha256_hash: The SHA256 hash of the file content.
  size_bytes: The size of the file in bytes.
  source: The origin of the file (e.g., UPLOADED, GENERATED).
  state: The current processing state of the file (e.g., ACTIVE, PROCESSING, FAILED).
  update_time: The timestamp when the file metadata was last updated.
  uri: The URI of the file resource.
  video_metadata: Metadata specific to video files, if applicable.
```

----------------------------------------

TITLE: genai.types.TuningJob Properties
DESCRIPTION: Documentation for properties related to tuning jobs in genai.types, specifically 'has_ended' and 'has_succeeded'. These likely indicate the status of a model tuning process.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_184

LANGUAGE: APIDOC
CODE:
```
has_ended (genai.types.TuningJob property)
  Boolean indicating if the tuning job has completed.

has_succeeded (genai.types.TuningJob property)
  Boolean indicating if the tuning job completed successfully.
```

----------------------------------------

TITLE: genai.models.AsyncModels and Models delete() method
DESCRIPTION: Documentation for the 'delete()' method in genai.models.AsyncModels and genai.models.Models.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_125

LANGUAGE: APIDOC
CODE:
```
genai.models.AsyncModels.delete()
  - Description: (Details not provided in input)

genai.models.Models.delete()
  - Description: (Details not provided in input)
```

----------------------------------------

TITLE: InlinedRequestDict Type
DESCRIPTION: A dictionary representation of an inlined request payload.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/index.html#_snippet_256

LANGUAGE: APIDOC
CODE:
```
InlinedRequestDict:
  config: Model configuration object.
  contents: List of content parts for the request.
  model: The name of the model to use (string).
```

----------------------------------------

TITLE: genai.types Batch Job Data Structures
DESCRIPTION: Defines dictionary structures for batch job inputs and outputs, including source, destination, and general job information.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_40

LANGUAGE: APIDOC
CODE:
```
genai.types.BatchJobDestinationDict
  - Description: Dictionary structure for batch job destination configuration.
```

LANGUAGE: APIDOC
CODE:
```
genai.types.BatchJobDict
  - Description: Dictionary structure representing a batch job.
```

LANGUAGE: APIDOC
CODE:
```
genai.types.BatchJobSourceDict
  - Description: Dictionary structure for batch job source configuration.
```

----------------------------------------

TITLE: genai.types.FunctionCallingConfigMode
DESCRIPTION: Enumerates the modes for function calling.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/genindex.html#_snippet_20

LANGUAGE: APIDOC
CODE:
```
genai.types.FunctionCallingConfigMode:
  Enum for function calling modes.
  Members:
    ANY: Allows any function to be called.
  (Further details on usage and other members are not provided in the source text.)
```

----------------------------------------

TITLE: List Cached Contents Configuration and Response
DESCRIPTION: Defines the configuration parameters for listing cached contents and the structure of the response. Supports pagination and HTTP options.
SOURCE: https://github.com/googleapis/python-genai/blob/main/docs/modules.html#_snippet_180

LANGUAGE: APIDOC
CODE:
```
ListCachedContentsConfig:
  http_options: dict
    Optional HTTP client options for the request.
  page_size: int
    The maximum number of cached contents to return in a single response.
  page_token: str
    A page token received from a previous ListCachedContentsResponse to retrieve the next page of results.
```

LANGUAGE: APIDOC
CODE:
```
ListCachedContentsConfigDict:
  http_options: dict
    Optional HTTP client options for the request.
  page_size: int
    The maximum number of cached contents to return in a single response.
  page_token: str
    A page token received from a previous ListCachedContentsResponse to retrieve the next page of results.
```

LANGUAGE: APIDOC
CODE:
```
ListCachedContentsResponse:
  cached_contents: list
    A list of cached content resources.
  next_page_token: str
    A token to retrieve the next page of results. If empty, there are no more pages.
```

LANGUAGE: APIDOC
CODE:
```
ListCachedContentsResponseDict:
  cached_contents: list
    A list of cached content resources.
  next_page_token: str
    A token to retrieve the next page of results. If empty, there are no more pages.
```